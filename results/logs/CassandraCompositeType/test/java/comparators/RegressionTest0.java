package comparators;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        java.nio.ByteBuffer byteBuffer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList1 = comparators.Composite.deserialize(byteBuffer0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        java.nio.ByteBuffer byteBuffer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean1 = comparators.Composite.validate(byteBuffer0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        int int0 = comparators.Composite.FIRST_BYTE_OFFSET;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4 + "'", int0 == 4);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        int int0 = comparators.Composite.COMPONENT_REAL;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4 + "'", int0 == 4);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        int int0 = comparators.Composite.COMPOSITETYPE_ID_2;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 80 + "'", int0 == 80);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        int int0 = comparators.Composite.COMPONENT_MINIMUM;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        int int0 = comparators.Composite.COMPOSITETYPE_ID_1;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 77 + "'", int0 == 77);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        boolean boolean1 = comparators.Composite.isValidType((java.lang.Object) 1L);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        int int0 = comparators.Composite.COMPOSITETYPE_VERSION;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        int int0 = comparators.Composite.MIN_BYTE_COUNT;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 5 + "'", int0 == 5);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        int int0 = comparators.Composite.COMPOSITETYPE_ID_0;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 67 + "'", int0 == 67);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        java.lang.Object[] objArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray1 = comparators.Composite.serialize(objArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        comparators.Composite composite0 = null;
        comparators.Composite composite1 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = comparators.Composite.compare(composite0, composite1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray11 = new byte[] {};
        int int12 = comparators.Composite.compare(byteArray10, byteArray11);
        int int13 = comparators.Composite.compare(byteArray4, byteArray11);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = comparators.Composite.compare((int) ' ', byteArray11, (int) 'a', byteArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 36");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        int int0 = comparators.Composite.COMPONENT_TIMEUUID;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 5 + "'", int0 == 5);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        int int0 = comparators.Composite.COMPONENT_ASCII;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 7 + "'", int0 == 7);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        int int0 = comparators.Composite.COMPONENT_MAXIMUM;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 255 + "'", int0 == 255);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        int int0 = comparators.Composite.COMPONENT_BYTES;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 9 + "'", int0 == 9);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        byte[] byteArray14 = composite13.serialize();
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "", "", "", "hi!", "hi!" };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray22 = composite13.toArray(strArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(strArray21);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.nio.ByteBuffer byteBuffer5 = null;
        // The following exception was thrown during execution in test generation
        try {
            compositeType0.validate(byteBuffer5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        byte[] byteArray2 = new byte[] { (byte) 0, (byte) 100 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList3 = comparators.Composite.deserialize(byteArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[0, 100]");
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        java.util.UUID uUID14 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite15 = composite9.addTimeUUID(uUID14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = composite9.remove((java.lang.Object) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        int int0 = comparators.Composite.COMPONENT_LEXICALUUID;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 6 + "'", int0 == 6);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        java.nio.ByteBuffer byteBuffer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = comparators.Composite.validate(byteBuffer0, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        boolean boolean31 = comparators.Composite.validate((int) ' ', byteArray28, true);
        boolean boolean32 = composite22.contains((java.lang.Object) boolean31);
        java.util.Spliterator<java.lang.Object> objSpliterator33 = composite22.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = composite9.removeAll((java.util.Collection<java.lang.Object>) composite22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objSpliterator33);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.util.RandomAccess[] randomAccessArray23 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray24 = composite22.toArray(randomAccessArray23);
        comparators.Composite composite26 = composite22.addLong((long) 67);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = composite9.retainAll((java.util.Collection<java.lang.Object>) composite26);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(randomAccessArray23);
        org.junit.Assert.assertNotNull(randomAccessArray24);
        org.junit.Assert.assertNotNull(composite26);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 1, (byte) -1, (byte) 10, (byte) -1 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(255, byteArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 259");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 1, -1, 10, -1]");
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        int int0 = comparators.Composite.COMPONENT_UTF8;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 8 + "'", int0 == 8);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList4 = comparators.Composite.deserialize(byteArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        byte[] byteArray0 = null;
        comparators.Composite composite1 = new comparators.Composite(byteArray0);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer2 = composite1.serializeToByteBuffer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        int int0 = comparators.Composite.COMPONENT_BOOL;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 2 + "'", int0 == 2);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        int int42 = comparators.Composite.compare(byteArray33, byteArray40);
        java.util.List<java.lang.Object> objList43 = comparators.Composite.deserialize(byteArray40);
        composite25.bytes = byteArray40;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean45 = composite13.retainAll((java.util.Collection<java.lang.Object>) composite25);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(objList43);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer7 = compositeType0.fromString("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        java.nio.ByteBuffer byteBuffer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = comparators.Composite.validate(byteBuffer0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        java.nio.ByteBuffer byteBuffer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList2 = compositeListSerializer0.fromByteBuffer(byteBuffer1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = composite9.removeAll((java.util.Collection<java.lang.Object>) composite25);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        composite9.clear();
        boolean boolean17 = composite9.equals((java.lang.Object) 1L);
        java.io.DataOutputStream dataOutputStream18 = composite9.out;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(dataOutputStream18);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        comparators.CompositeType compositeType11 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray12 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList13 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13, byteBufferArray12);
        java.lang.String str15 = compositeType11.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator16 = compositeType11.indexComparator;
        comparators.CompositeType compositeType17 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray18 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList19 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19, byteBufferArray18);
        java.lang.String str21 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType11.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType17);
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.lang.String str28 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator34 = compositeType29.indexComparator;
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator40 = compositeType29.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType35);
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray42 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList43 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43, byteBufferArray42);
        java.lang.String str45 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.lang.String str46 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.util.AbstractList[] abstractListArray48 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray49 = (java.util.AbstractList<java.nio.ByteBuffer>[]) abstractListArray48;
        byteBufferListArray49[0] = byteBufferList25;
        byteBufferListArray49[1] = byteBufferList43;
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray54 = composite9.toArray(byteBufferListArray49);
        java.lang.Class<?> wildcardClass55 = byteBufferListArray49.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(compositeType11);
        org.junit.Assert.assertNotNull(byteBufferArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(indexInfoComparator16);
        org.junit.Assert.assertNotNull(compositeType17);
        org.junit.Assert.assertNotNull(byteBufferArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(indexInfoComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteBufferComparator40);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteBufferArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(abstractListArray48);
        org.junit.Assert.assertNotNull(byteBufferListArray49);
        org.junit.Assert.assertNotNull(byteBufferListArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.util.RandomAccess[] randomAccessArray24 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray25 = composite23.toArray(randomAccessArray24);
        comparators.Composite composite27 = composite23.addLong((long) 67);
        comparators.Composite composite29 = composite27.addBool(true);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = composite13.remove((java.lang.Object) composite29);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(randomAccessArray24);
        org.junit.Assert.assertNotNull(randomAccessArray25);
        org.junit.Assert.assertNotNull(composite27);
        org.junit.Assert.assertNotNull(composite29);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        byte[] byteArray0 = null;
        comparators.Composite composite1 = new comparators.Composite(byteArray0);
        java.lang.Class<?> wildcardClass2 = composite1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        comparators.Composite composite37 = composite10.addBytes(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = composite37.serializeToByteBuffer();
        compositeType0.validate(byteBuffer38);
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator45 = compositeType40.indexComparator;
        boolean boolean46 = comparators.Composite.isValidType((java.lang.Object) compositeType40);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator47 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType40);
        java.lang.Class<?> wildcardClass48 = compositeType40.getClass();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(indexInfoComparator45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteBufferComparator47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        comparators.Composite composite17 = composite15.addLong((long) 6);
        byte[] byteArray18 = composite17.bytes;
        java.util.UUID uUID19 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite20 = composite17.addLexicalUUID(uUID19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNull(byteArray18);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        byte[] byteArray21 = composite9.bytes;
        java.util.Collection<java.lang.Object> objCollection22 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = composite9.retainAll(objCollection22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(byteArray21);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        composite9.startOffset = 1;
        java.lang.Class<?> wildcardClass23 = composite9.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        comparators.Composite composite0 = new comparators.Composite();
        java.util.UUID uUID1 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite2 = composite0.addTimeUUID(uUID1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        int int33 = composite28.startOffset;
        composite28.clear();
        boolean boolean35 = composite18.containsAll((java.util.Collection<java.lang.Object>) composite28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(byteArray40);
        byte[] byteArray43 = comparators.Composite.serialize(objList42);
        java.util.stream.Stream<java.lang.Object> objStream44 = objList42.parallelStream();
        comparators.Composite composite45 = new comparators.Composite(objList42);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        java.util.List<java.lang.Object> objList52 = comparators.Composite.deserialize(byteArray50);
        byte[] byteArray53 = comparators.Composite.serialize(objList52);
        java.util.stream.Stream<java.lang.Object> objStream54 = objList52.parallelStream();
        comparators.Composite composite55 = new comparators.Composite(objList52);
        java.lang.Object[] objArray56 = composite55.toArray();
        int int57 = composite55.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream58 = composite55.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream59 = composite55.parallelStream();
        int int60 = composite55.startOffset;
        int int61 = comparators.Composite.compare(composite45, composite55);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = composite28.retainAll((java.util.Collection<java.lang.Object>) composite45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(objList42);
        org.junit.Assert.assertNull(byteArray43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(objList52);
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        java.util.UUID uUID19 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite20 = composite9.addTimeUUID(uUID19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        byte[] byteArray12 = composite9.bytes;
        java.io.ByteArrayOutputStream byteArrayOutputStream13 = composite9.byteStream;
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        boolean boolean22 = comparators.Composite.validate(0, byteArray19);
        byte[] byteArray23 = null;
        int int24 = comparators.Composite.compare(byteArray19, byteArray23);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = composite9.remove((java.lang.Object) byteArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNull(byteArrayOutputStream13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        int int0 = comparators.Composite.COMPONENT_STOP;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 0 + "'", int0 == 0);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        java.lang.String str0 = comparators.Composite.UTF8_ENCODING;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "UTF-8" + "'", str0, "UTF-8");
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        boolean boolean12 = comparators.Composite.isValidType((java.lang.Object) byteArray11);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray11 = new byte[] {};
        int int12 = comparators.Composite.compare(byteArray10, byteArray11);
        int int13 = comparators.Composite.compare(byteArray4, byteArray11);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        int int27 = comparators.Composite.compare(byteArray18, byteArray25);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = comparators.Composite.compare(9, byteArray11, 8, byteArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 13");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream68 = null;
        composite65.byteStream = byteArrayOutputStream68;
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray74 = new byte[] {};
        int int75 = comparators.Composite.compare(byteArray73, byteArray74);
        java.util.List<java.lang.Object> objList76 = comparators.Composite.deserialize(byteArray74);
        byte[] byteArray77 = comparators.Composite.serialize(objList76);
        java.util.stream.Stream<java.lang.Object> objStream78 = objList76.parallelStream();
        comparators.Composite composite79 = new comparators.Composite(objList76);
        java.lang.Object[] objArray80 = composite79.toArray();
        int int81 = composite79.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream82 = composite79.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream83 = composite79.parallelStream();
        comparators.Composite composite85 = composite79.addBool(true);
        java.util.Iterator<java.lang.Object> objItor86 = composite79.iterator();
        int int87 = composite65.compareTo(composite79);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = composite17.remove((java.lang.Object) composite65);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertNull(byteArray77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(objStream82);
        org.junit.Assert.assertNotNull(objStream83);
        org.junit.Assert.assertNotNull(composite85);
        org.junit.Assert.assertNotNull(objItor86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        int int0 = comparators.Composite.COMPONENT_LONG;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 3 + "'", int0 == 3);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer byteBuffer1 = null;
        // The following exception was thrown during execution in test generation
        try {
            compositeType0.validate(byteBuffer1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        java.lang.Object[] objArray1 = new java.lang.Object[] { (byte) 10 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer2 = comparators.Composite.serializeToByteBuffer(objArray1);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[10]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[10]");
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        java.lang.Class<?> wildcardClass11 = objArray10.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        int int13 = compositeListSerializer0.computeInitialHashSize((int) ' ');
        comparators.hector.CompositeListSerializer compositeListSerializer14 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator20 = compositeType15.indexComparator;
        comparators.CompositeType compositeType21 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray22 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList23 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23, byteBufferArray22);
        java.lang.String str25 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator26 = compositeType15.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType21);
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray28 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList29 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29, byteBufferArray28);
        java.lang.String str31 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.lang.String str32 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.util.List<java.util.List<java.lang.Object>> objListList33 = compositeListSerializer14.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList29);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet34 = compositeListSerializer0.toBytesSet(objListList33);
        comparators.hector.CompositeListSerializer compositeListSerializer35 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType36 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray37 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList38 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38, byteBufferArray37);
        java.lang.String str40 = compositeType36.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator41 = compositeType36.indexComparator;
        comparators.CompositeType compositeType42 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray43 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList44 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44, byteBufferArray43);
        java.lang.String str46 = compositeType42.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator47 = compositeType36.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType42);
        comparators.CompositeType compositeType48 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray49 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList50 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList50, byteBufferArray49);
        java.lang.String str52 = compositeType48.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList50);
        java.lang.String str53 = compositeType42.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList50);
        java.util.List<java.util.List<java.lang.Object>> objListList54 = compositeListSerializer35.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList50);
        comparators.hector.CompositeListSerializer compositeListSerializer55 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType56 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray57 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList58 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58, byteBufferArray57);
        java.lang.String str60 = compositeType56.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator61 = compositeType56.indexComparator;
        comparators.CompositeType compositeType62 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray63 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList64 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64, byteBufferArray63);
        java.lang.String str66 = compositeType62.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator67 = compositeType56.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType62);
        comparators.CompositeType compositeType68 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray69 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList70 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList70, byteBufferArray69);
        java.lang.String str72 = compositeType68.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList70);
        java.lang.String str73 = compositeType62.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList70);
        java.util.List<java.util.List<java.lang.Object>> objListList74 = compositeListSerializer55.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList70);
        int int76 = compositeListSerializer55.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer77 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType78 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray79 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList80 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList80, byteBufferArray79);
        java.lang.String str82 = compositeType78.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList80);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator83 = compositeType78.indexComparator;
        comparators.CompositeType compositeType84 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray85 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList86 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList86, byteBufferArray85);
        java.lang.String str88 = compositeType84.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList86);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator89 = compositeType78.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType84);
        comparators.CompositeType compositeType90 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray91 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList92 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList92, byteBufferArray91);
        java.lang.String str94 = compositeType90.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList92);
        java.lang.String str95 = compositeType84.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList92);
        java.util.List<java.util.List<java.lang.Object>> objListList96 = compositeListSerializer77.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList92);
        java.util.List<java.nio.ByteBuffer> byteBufferList97 = compositeListSerializer55.toBytesList(objListList96);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet98 = compositeListSerializer35.toBytesSet(objListList96);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet99 = compositeListSerializer0.toBytesSet(objListList96);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 43 + "'", int13 == 43);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(indexInfoComparator20);
        org.junit.Assert.assertNotNull(compositeType21);
        org.junit.Assert.assertNotNull(byteBufferArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteBufferComparator26);
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteBufferArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(objListList33);
        org.junit.Assert.assertNotNull(byteBufferSet34);
        org.junit.Assert.assertNotNull(compositeType36);
        org.junit.Assert.assertNotNull(byteBufferArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(indexInfoComparator41);
        org.junit.Assert.assertNotNull(compositeType42);
        org.junit.Assert.assertNotNull(byteBufferArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteBufferComparator47);
        org.junit.Assert.assertNotNull(compositeType48);
        org.junit.Assert.assertNotNull(byteBufferArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(objListList54);
        org.junit.Assert.assertNotNull(compositeType56);
        org.junit.Assert.assertNotNull(byteBufferArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(indexInfoComparator61);
        org.junit.Assert.assertNotNull(compositeType62);
        org.junit.Assert.assertNotNull(byteBufferArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(byteBufferComparator67);
        org.junit.Assert.assertNotNull(compositeType68);
        org.junit.Assert.assertNotNull(byteBufferArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(objListList74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 6 + "'", int76 == 6);
        org.junit.Assert.assertNotNull(compositeType78);
        org.junit.Assert.assertNotNull(byteBufferArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(indexInfoComparator83);
        org.junit.Assert.assertNotNull(compositeType84);
        org.junit.Assert.assertNotNull(byteBufferArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(byteBufferComparator89);
        org.junit.Assert.assertNotNull(compositeType90);
        org.junit.Assert.assertNotNull(byteBufferArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertNotNull(objListList96);
        org.junit.Assert.assertNotNull(byteBufferList97);
        org.junit.Assert.assertNotNull(byteBufferSet98);
        org.junit.Assert.assertNotNull(byteBufferSet99);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        java.util.UUID uUID14 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite15 = composite9.addTimeUUID(uUID14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        java.util.List<java.lang.Object> objList17 = comparators.Composite.deserialize(byteArray15);
        byte[] byteArray18 = comparators.Composite.serialize(objList17);
        java.util.stream.Stream<java.lang.Object> objStream19 = objList17.parallelStream();
        comparators.Composite composite20 = new comparators.Composite(objList17);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = composite9.removeAll((java.util.Collection<java.lang.Object>) composite20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(objList17);
        org.junit.Assert.assertNull(byteArray18);
        org.junit.Assert.assertNotNull(objStream19);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        comparators.Composite composite36 = composite9.addBytes(byteArray34);
        java.util.Collection<java.lang.Object> objCollection37 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = composite36.addAll(objCollection37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(composite36);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 100 };
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList3 = comparators.Composite.deserialize(byteArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 100]");
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        comparators.CompositeType compositeType11 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray12 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList13 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13, byteBufferArray12);
        java.lang.String str15 = compositeType11.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator16 = compositeType11.indexComparator;
        comparators.CompositeType compositeType17 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray18 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList19 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19, byteBufferArray18);
        java.lang.String str21 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType11.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType17);
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.lang.String str28 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator34 = compositeType29.indexComparator;
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator40 = compositeType29.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType35);
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray42 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList43 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43, byteBufferArray42);
        java.lang.String str45 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.lang.String str46 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.util.AbstractList[] abstractListArray48 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray49 = (java.util.AbstractList<java.nio.ByteBuffer>[]) abstractListArray48;
        byteBufferListArray49[0] = byteBufferList25;
        byteBufferListArray49[1] = byteBufferList43;
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray54 = composite9.toArray(byteBufferListArray49);
        comparators.Composite composite55 = new comparators.Composite((java.lang.Object[]) byteBufferListArray49);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(compositeType11);
        org.junit.Assert.assertNotNull(byteBufferArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(indexInfoComparator16);
        org.junit.Assert.assertNotNull(compositeType17);
        org.junit.Assert.assertNotNull(byteBufferArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(indexInfoComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteBufferComparator40);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteBufferArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(abstractListArray48);
        org.junit.Assert.assertNotNull(byteBufferListArray49);
        org.junit.Assert.assertNotNull(byteBufferListArray54);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        composite9.clear();
        boolean boolean17 = composite9.equals((java.lang.Object) 1L);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.util.RandomAccess[] randomAccessArray28 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray29 = composite27.toArray(randomAccessArray28);
        comparators.Composite composite30 = new comparators.Composite((java.lang.Object[]) randomAccessArray29);
        int int31 = comparators.Composite.compare(composite9, composite30);
        java.io.DataOutputStream dataOutputStream32 = composite9.out;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(randomAccessArray28);
        org.junit.Assert.assertNotNull(randomAccessArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(dataOutputStream32);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.lang.String str17 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite42.startOffset;
        int int48 = composite28.compareTo(composite42);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        comparators.Composite composite55 = composite28.addBytes(byteArray53);
        java.nio.ByteBuffer byteBuffer56 = composite55.serializeToByteBuffer();
        compositeType18.validate(byteBuffer56);
        java.lang.String str58 = compositeType6.getString(byteBuffer56);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer60 = compositeType6.fromString("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray12 = new byte[] {};
        int int13 = comparators.Composite.compare(byteArray11, byteArray12);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray12);
        byte[] byteArray15 = comparators.Composite.serialize(objList14);
        java.util.stream.Stream<java.lang.Object> objStream16 = objList14.parallelStream();
        comparators.Composite composite17 = new comparators.Composite(objList14);
        java.util.RandomAccess[] randomAccessArray18 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray19 = composite17.toArray(randomAccessArray18);
        comparators.Composite composite21 = composite17.addLong((long) 67);
        byte[] byteArray22 = composite21.serialize();
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray22);
        int int24 = comparators.Composite.compare(byteArray5, byteArray22);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = comparators.Composite.validate(5, byteArray22, true);
            org.junit.Assert.fail("Expected exception of type org.apache.cassandra.db.marshal.MarshalException; message: Not a composite type (ID byte 0 incorrect)");
        } catch (org.apache.cassandra.db.marshal.MarshalException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNull(byteArray15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(randomAccessArray18);
        org.junit.Assert.assertNotNull(randomAccessArray19);
        org.junit.Assert.assertNotNull(composite21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.util.RandomAccess[] randomAccessArray11 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray12 = composite10.toArray(randomAccessArray11);
        comparators.Composite composite14 = composite10.addLong((long) 67);
        byte[] byteArray15 = composite14.serialize();
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray15);
        comparators.Composite composite17 = new comparators.Composite(byteArray15);
        comparators.Composite composite18 = compositeSerializer0.fromBytes(byteArray15);
        java.nio.ByteBuffer byteBuffer19 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite20 = compositeSerializer0.fromByteBuffer(byteBuffer19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(randomAccessArray12);
        org.junit.Assert.assertNotNull(composite14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNotNull(composite18);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        comparators.Composite composite37 = composite10.addBytes(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = composite37.serializeToByteBuffer();
        compositeType0.validate(byteBuffer38);
        boolean boolean40 = comparators.Composite.validate(byteBuffer38);
        comparators.Composite composite41 = new comparators.Composite(byteBuffer38);
        java.util.UUID uUID42 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite43 = composite41.addTimeUUID(uUID42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        java.lang.Object obj0 = null;
        boolean boolean1 = comparators.Composite.isValidType(obj0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        java.util.Collection[] collectionArray28 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.Object>[] objCollectionArray29 = (java.util.Collection<java.lang.Object>[]) collectionArray28;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.lang.Object>[] objCollectionArray30 = composite26.toArray((java.util.Collection<java.lang.Object>[]) collectionArray28);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertNotNull(collectionArray28);
        org.junit.Assert.assertNotNull(objCollectionArray29);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray12 = new byte[] {};
        int int13 = comparators.Composite.compare(byteArray11, byteArray12);
        int int14 = comparators.Composite.compare(byteArray5, byteArray12);
        boolean boolean16 = comparators.Composite.validate((int) (byte) 0, byteArray12, true);
        byte[] byteArray19 = null;
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        int int33 = comparators.Composite.compare(byteArray24, byteArray31);
        int int34 = comparators.Composite.compare((int) (byte) 1, byteArray19, 10, byteArray24);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(byteArray40);
        boolean boolean43 = comparators.Composite.validate(0, byteArray40);
        byte[] byteArray44 = null;
        int int45 = comparators.Composite.compare(byteArray40, byteArray44);
        int int46 = comparators.Composite.compare(byteArray24, byteArray40);
        // The following exception was thrown during execution in test generation
        try {
            int int47 = comparators.Composite.compare(1, byteArray12, 67, byteArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(objList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        composite9.startOffset = 4;
        java.util.Collection<java.lang.Object> objCollection25 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = composite9.removeAll(objCollection25);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj81 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        int int56 = composite17.startOffset;
        comparators.Composite composite58 = composite17.addAscii("hi!");
        comparators.Composite composite59 = new comparators.Composite();
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(byteArray64);
        byte[] byteArray67 = comparators.Composite.serialize(objList66);
        java.util.stream.Stream<java.lang.Object> objStream68 = objList66.parallelStream();
        comparators.Composite composite69 = new comparators.Composite(objList66);
        java.lang.Object[] objArray70 = composite69.toArray();
        int int71 = composite69.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream72 = composite69.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream73 = composite69.parallelStream();
        int int74 = composite59.compareTo(composite69);
        byte[] byteArray78 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray79 = new byte[] {};
        int int80 = comparators.Composite.compare(byteArray78, byteArray79);
        java.util.List<java.lang.Object> objList81 = comparators.Composite.deserialize(byteArray79);
        byte[] byteArray82 = comparators.Composite.serialize(objList81);
        java.util.stream.Stream<java.lang.Object> objStream83 = objList81.parallelStream();
        comparators.Composite composite84 = new comparators.Composite(objList81);
        byte[] byteArray89 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray90 = new byte[] {};
        int int91 = comparators.Composite.compare(byteArray89, byteArray90);
        boolean boolean93 = comparators.Composite.validate((int) ' ', byteArray90, true);
        boolean boolean94 = composite84.contains((java.lang.Object) boolean93);
        java.util.stream.Stream<java.lang.Object> objStream95 = composite84.parallelStream();
        boolean boolean96 = composite59.contains((java.lang.Object) composite84);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean97 = composite58.retainAll((java.util.Collection<java.lang.Object>) composite84);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(composite58);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(objList66);
        org.junit.Assert.assertNull(byteArray67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(objList81);
        org.junit.Assert.assertNull(byteArray82);
        org.junit.Assert.assertNotNull(objStream83);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(objStream95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.io.DataOutputStream dataOutputStream16 = composite9.out;
        java.util.UUID uUID17 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite18 = composite9.addLexicalUUID(uUID17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(dataOutputStream16);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        int int28 = comparators.Composite.compare(byteArray19, byteArray26);
        java.util.List<java.lang.Object> objList29 = comparators.Composite.deserialize(byteArray26);
        composite11.bytes = byteArray26;
        boolean boolean31 = comparators.Composite.validate(1, byteArray26);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(97, byteArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 101");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(objList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        comparators.hector.CompositeListSerializer compositeListSerializer12 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator18 = compositeType13.indexComparator;
        comparators.CompositeType compositeType19 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray20 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList21 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList21, byteBufferArray20);
        java.lang.String str23 = compositeType19.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList21);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator24 = compositeType13.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType19);
        comparators.CompositeType compositeType25 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray26 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList27 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList27, byteBufferArray26);
        java.lang.String str29 = compositeType25.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList27);
        java.lang.String str30 = compositeType19.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList27);
        java.util.List<java.util.List<java.lang.Object>> objListList31 = compositeListSerializer12.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList27);
        int int33 = compositeListSerializer12.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer34 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator40 = compositeType35.indexComparator;
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray42 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList43 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43, byteBufferArray42);
        java.lang.String str45 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator46 = compositeType35.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType41);
        comparators.CompositeType compositeType47 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray48 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList49 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList49, byteBufferArray48);
        java.lang.String str51 = compositeType47.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList49);
        java.lang.String str52 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList49);
        java.util.List<java.util.List<java.lang.Object>> objListList53 = compositeListSerializer34.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList49);
        comparators.hector.CompositeListSerializer compositeListSerializer54 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType55 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray56 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList57 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57, byteBufferArray56);
        java.lang.String str59 = compositeType55.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator60 = compositeType55.indexComparator;
        comparators.CompositeType compositeType61 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray62 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList63 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList63, byteBufferArray62);
        java.lang.String str65 = compositeType61.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList63);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator66 = compositeType55.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType61);
        comparators.CompositeType compositeType67 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray68 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList69 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList69, byteBufferArray68);
        java.lang.String str71 = compositeType67.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList69);
        java.lang.String str72 = compositeType61.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList69);
        java.util.List<java.util.List<java.lang.Object>> objListList73 = compositeListSerializer54.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList69);
        int int75 = compositeListSerializer54.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer76 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType77 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray78 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList79 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList79, byteBufferArray78);
        java.lang.String str81 = compositeType77.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList79);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator82 = compositeType77.indexComparator;
        comparators.CompositeType compositeType83 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray84 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList85 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList85, byteBufferArray84);
        java.lang.String str87 = compositeType83.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList85);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator88 = compositeType77.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType83);
        comparators.CompositeType compositeType89 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray90 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList91 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList91, byteBufferArray90);
        java.lang.String str93 = compositeType89.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList91);
        java.lang.String str94 = compositeType83.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList91);
        java.util.List<java.util.List<java.lang.Object>> objListList95 = compositeListSerializer76.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList91);
        java.util.List<java.nio.ByteBuffer> byteBufferList96 = compositeListSerializer54.toBytesList(objListList95);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet97 = compositeListSerializer34.toBytesSet(objListList95);
        java.util.List<java.util.List<java.lang.Object>> objListList98 = compositeListSerializer12.fromBytesSet(byteBufferSet97);
        java.util.List<java.util.List<java.lang.Object>> objListList99 = compositeListSerializer0.fromBytesSet(byteBufferSet97);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(indexInfoComparator18);
        org.junit.Assert.assertNotNull(compositeType19);
        org.junit.Assert.assertNotNull(byteBufferArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteBufferComparator24);
        org.junit.Assert.assertNotNull(compositeType25);
        org.junit.Assert.assertNotNull(byteBufferArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(objListList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(indexInfoComparator40);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteBufferArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteBufferComparator46);
        org.junit.Assert.assertNotNull(compositeType47);
        org.junit.Assert.assertNotNull(byteBufferArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(objListList53);
        org.junit.Assert.assertNotNull(compositeType55);
        org.junit.Assert.assertNotNull(byteBufferArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(indexInfoComparator60);
        org.junit.Assert.assertNotNull(compositeType61);
        org.junit.Assert.assertNotNull(byteBufferArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(byteBufferComparator66);
        org.junit.Assert.assertNotNull(compositeType67);
        org.junit.Assert.assertNotNull(byteBufferArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(objListList73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 6 + "'", int75 == 6);
        org.junit.Assert.assertNotNull(compositeType77);
        org.junit.Assert.assertNotNull(byteBufferArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(indexInfoComparator82);
        org.junit.Assert.assertNotNull(compositeType83);
        org.junit.Assert.assertNotNull(byteBufferArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(byteBufferComparator88);
        org.junit.Assert.assertNotNull(compositeType89);
        org.junit.Assert.assertNotNull(byteBufferArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNotNull(objListList95);
        org.junit.Assert.assertNotNull(byteBufferList96);
        org.junit.Assert.assertNotNull(byteBufferSet97);
        org.junit.Assert.assertNotNull(objListList98);
        org.junit.Assert.assertNotNull(objListList99);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        comparators.Composite composite36 = composite9.addBytes(byteArray34);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray41 = new byte[] {};
        int int42 = comparators.Composite.compare(byteArray40, byteArray41);
        java.util.List<java.lang.Object> objList43 = comparators.Composite.deserialize(byteArray41);
        byte[] byteArray44 = comparators.Composite.serialize(objList43);
        java.util.stream.Stream<java.lang.Object> objStream45 = objList43.parallelStream();
        comparators.Composite composite46 = new comparators.Composite(objList43);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        boolean boolean55 = comparators.Composite.validate((int) ' ', byteArray52, true);
        boolean boolean56 = composite46.contains((java.lang.Object) boolean55);
        java.util.stream.Stream<java.lang.Object> objStream57 = composite46.parallelStream();
        composite46.startOffset = 8;
        comparators.Composite composite61 = composite46.addAscii("hi!");
        comparators.Composite composite63 = composite46.addLong((long) 4);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = composite36.remove((java.lang.Object) 4);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(objList43);
        org.junit.Assert.assertNull(byteArray44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertNotNull(composite63);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        comparators.Composite composite11 = new comparators.Composite();
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        java.util.stream.Stream<java.lang.Object> objStream20 = objList18.parallelStream();
        comparators.Composite composite21 = new comparators.Composite(objList18);
        java.lang.Object[] objArray22 = composite21.toArray();
        int int23 = composite21.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream24 = composite21.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream25 = composite21.parallelStream();
        int int26 = composite11.compareTo(composite21);
        comparators.hector.CompositeListSerializer compositeListSerializer27 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray29 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList30 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30, byteBufferArray29);
        java.lang.String str32 = compositeType28.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator33 = compositeType28.indexComparator;
        comparators.CompositeType compositeType34 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray35 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList36 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList36, byteBufferArray35);
        java.lang.String str38 = compositeType34.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList36);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator39 = compositeType28.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType34);
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.lang.String str45 = compositeType34.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.List<java.util.List<java.lang.Object>> objListList46 = compositeListSerializer27.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList42);
        comparators.CompositeType compositeType47 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator48 = compositeType47.indexComparator;
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator50 = compositeType47.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType49);
        java.lang.Object[] objArray51 = new java.lang.Object[] { compositeListSerializer27, compositeType49 };
        java.lang.Object[][] objArray52 = new java.lang.Object[][] { objArray51 };
        java.lang.Object[][] objArray53 = composite11.toArray(objArray52);
        java.lang.Object[][] objArray54 = composite9.toArray(objArray53);
        comparators.Composite composite55 = new comparators.Composite((java.lang.Object[]) objArray53);
        comparators.CompositeType compositeType56 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray57 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList58 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58, byteBufferArray57);
        java.lang.String str60 = compositeType56.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator61 = compositeType56.indexComparator;
        comparators.CompositeType compositeType62 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray63 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList64 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64, byteBufferArray63);
        java.lang.String str66 = compositeType62.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator67 = compositeType56.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType62);
        comparators.CompositeType compositeType68 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray69 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList70 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList70, byteBufferArray69);
        java.lang.String str72 = compositeType68.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList70);
        org.apache.cassandra.db.IColumn[] iColumnArray73 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList74 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList74, iColumnArray73);
        java.lang.String str76 = compositeType68.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList74);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator77 = compositeType68.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator78 = byteBufferComparator67.thenComparing(byteBufferComparator77);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean79 = composite55.remove((java.lang.Object) byteBufferComparator78);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteBufferArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(indexInfoComparator33);
        org.junit.Assert.assertNotNull(compositeType34);
        org.junit.Assert.assertNotNull(byteBufferArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteBufferComparator39);
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(objListList46);
        org.junit.Assert.assertNotNull(indexInfoComparator48);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferComparator50);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(compositeType56);
        org.junit.Assert.assertNotNull(byteBufferArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(indexInfoComparator61);
        org.junit.Assert.assertNotNull(compositeType62);
        org.junit.Assert.assertNotNull(byteBufferArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(byteBufferComparator67);
        org.junit.Assert.assertNotNull(compositeType68);
        org.junit.Assert.assertNotNull(byteBufferArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(iColumnArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(byteBufferComparator77);
        org.junit.Assert.assertNotNull(byteBufferComparator78);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        boolean boolean1 = comparators.Composite.isValidType((java.lang.Object) 100.0d);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        int int33 = composite28.startOffset;
        composite28.clear();
        boolean boolean35 = composite18.containsAll((java.util.Collection<java.lang.Object>) composite28);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(byteArray40);
        byte[] byteArray43 = comparators.Composite.serialize(objList42);
        java.util.stream.Stream<java.lang.Object> objStream44 = objList42.parallelStream();
        comparators.Composite composite45 = new comparators.Composite(objList42);
        java.lang.Object[] objArray46 = composite45.toArray();
        int int47 = composite45.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream48 = composite45.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream49 = composite45.parallelStream();
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        int int62 = comparators.Composite.compare(byteArray53, byteArray60);
        java.util.List<java.lang.Object> objList63 = comparators.Composite.deserialize(byteArray60);
        composite45.bytes = byteArray60;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean65 = composite28.removeAll((java.util.Collection<java.lang.Object>) composite45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(objList42);
        org.junit.Assert.assertNull(byteArray43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(objList63);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        comparators.Composite composite11 = new comparators.Composite();
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        java.util.stream.Stream<java.lang.Object> objStream20 = objList18.parallelStream();
        comparators.Composite composite21 = new comparators.Composite(objList18);
        java.lang.Object[] objArray22 = composite21.toArray();
        int int23 = composite21.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream24 = composite21.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream25 = composite21.parallelStream();
        int int26 = composite11.compareTo(composite21);
        comparators.hector.CompositeListSerializer compositeListSerializer27 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray29 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList30 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30, byteBufferArray29);
        java.lang.String str32 = compositeType28.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator33 = compositeType28.indexComparator;
        comparators.CompositeType compositeType34 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray35 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList36 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList36, byteBufferArray35);
        java.lang.String str38 = compositeType34.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList36);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator39 = compositeType28.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType34);
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.lang.String str45 = compositeType34.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.List<java.util.List<java.lang.Object>> objListList46 = compositeListSerializer27.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList42);
        comparators.CompositeType compositeType47 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator48 = compositeType47.indexComparator;
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator50 = compositeType47.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType49);
        java.lang.Object[] objArray51 = new java.lang.Object[] { compositeListSerializer27, compositeType49 };
        java.lang.Object[][] objArray52 = new java.lang.Object[][] { objArray51 };
        java.lang.Object[][] objArray53 = composite11.toArray(objArray52);
        java.lang.Object[][] objArray54 = composite9.toArray(objArray53);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        java.util.List<java.lang.Object> objList61 = comparators.Composite.deserialize(byteArray59);
        byte[] byteArray62 = comparators.Composite.serialize(objList61);
        java.util.stream.Stream<java.lang.Object> objStream63 = objList61.parallelStream();
        comparators.Composite composite64 = new comparators.Composite(objList61);
        byte[] byteArray69 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray70 = new byte[] {};
        int int71 = comparators.Composite.compare(byteArray69, byteArray70);
        boolean boolean73 = comparators.Composite.validate((int) ' ', byteArray70, true);
        boolean boolean74 = composite64.contains((java.lang.Object) boolean73);
        java.util.stream.Stream<java.lang.Object> objStream75 = composite64.parallelStream();
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        java.util.List<java.lang.Object> objList82 = comparators.Composite.deserialize(byteArray80);
        byte[] byteArray83 = comparators.Composite.serialize(objList82);
        java.util.stream.Stream<java.lang.Object> objStream84 = objList82.parallelStream();
        comparators.Composite composite85 = new comparators.Composite(objList82);
        java.lang.Object[] objArray86 = composite85.toArray();
        int int87 = composite85.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream88 = composite85.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream89 = composite85.parallelStream();
        comparators.Composite composite91 = composite85.addBool(true);
        java.io.DataOutputStream dataOutputStream92 = composite85.out;
        composite64.out = dataOutputStream92;
        composite9.out = dataOutputStream92;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteBufferArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(indexInfoComparator33);
        org.junit.Assert.assertNotNull(compositeType34);
        org.junit.Assert.assertNotNull(byteBufferArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteBufferComparator39);
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(objListList46);
        org.junit.Assert.assertNotNull(indexInfoComparator48);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferComparator50);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(objList61);
        org.junit.Assert.assertNull(byteArray62);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objStream75);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(objList82);
        org.junit.Assert.assertNull(byteArray83);
        org.junit.Assert.assertNotNull(objStream84);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(objStream88);
        org.junit.Assert.assertNotNull(objStream89);
        org.junit.Assert.assertNotNull(composite91);
        org.junit.Assert.assertNotNull(dataOutputStream92);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.Class<?> wildcardClass20 = byteBufferList15.getClass();
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        boolean boolean27 = comparators.Composite.validate(0, byteArray24);
        byte[] byteArray28 = null;
        int int29 = comparators.Composite.compare(byteArray24, byteArray28);
        comparators.Composite composite30 = new comparators.Composite(byteArray28);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer31 = compositeSerializer0.toByteBuffer(composite30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        org.apache.cassandra.db.IColumn[] iColumnArray9 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList10 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList10, iColumnArray9);
        java.lang.String str12 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList10);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer14 = compositeType0.fromString("Placeholder(1)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(iColumnArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        compositeTypeIterator80.offset = 77;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.util.RandomAccess[] randomAccessArray40 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray41 = composite39.toArray(randomAccessArray40);
        comparators.Composite composite43 = composite39.addLong((long) 67);
        byte[] byteArray44 = composite43.serialize();
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray44);
        comparators.Composite composite46 = new comparators.Composite(byteArray44);
        boolean boolean47 = composite23.equals((java.lang.Object) byteArray44);
        java.util.UUID uUID48 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite49 = composite23.addTimeUUID(uUID48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(randomAccessArray40);
        org.junit.Assert.assertNotNull(randomAccessArray41);
        org.junit.Assert.assertNotNull(composite43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        comparators.Composite composite34 = composite28.addBool(true);
        comparators.Composite composite36 = composite34.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream37 = composite34.byteStream;
        java.nio.ByteBuffer byteBuffer38 = compositeSerializer0.toByteBuffer(composite34);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        java.lang.Object[] objArray49 = composite48.toArray();
        int int50 = composite48.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream51 = composite48.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream52 = composite48.parallelStream();
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        java.util.List<java.lang.Object> objList59 = comparators.Composite.deserialize(byteArray57);
        byte[] byteArray60 = comparators.Composite.serialize(objList59);
        java.util.stream.Stream<java.lang.Object> objStream61 = objList59.parallelStream();
        comparators.Composite composite62 = new comparators.Composite(objList59);
        java.lang.Object[] objArray63 = composite62.toArray();
        int int64 = composite62.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream65 = composite62.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream66 = composite62.parallelStream();
        int int67 = composite62.startOffset;
        int int68 = composite48.compareTo(composite62);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        java.util.List<java.lang.Object> objList75 = comparators.Composite.deserialize(byteArray73);
        byte[] byteArray76 = comparators.Composite.serialize(objList75);
        java.util.stream.Stream<java.lang.Object> objStream77 = objList75.parallelStream();
        comparators.Composite composite78 = new comparators.Composite(objList75);
        java.util.RandomAccess[] randomAccessArray79 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray80 = composite78.toArray(randomAccessArray79);
        comparators.Composite composite82 = composite78.addLong((long) 67);
        byte[] byteArray83 = composite82.serialize();
        java.util.List<java.lang.Object> objList84 = comparators.Composite.deserialize(byteArray83);
        comparators.Composite composite85 = new comparators.Composite(byteArray83);
        boolean boolean86 = composite62.equals((java.lang.Object) byteArray83);
        comparators.Composite composite87 = compositeSerializer0.fromBytes(byteArray83);
        boolean boolean88 = composite87.isEmpty();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArrayOutputStream37);
        org.junit.Assert.assertEquals(byteArrayOutputStream37.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(objList75);
        org.junit.Assert.assertNull(byteArray76);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(randomAccessArray79);
        org.junit.Assert.assertNotNull(randomAccessArray80);
        org.junit.Assert.assertNotNull(composite82);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(composite87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        java.nio.ByteBuffer byteBuffer0 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite1 = new comparators.Composite(byteBuffer0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        int int48 = composite43.startOffset;
        int int49 = composite29.compareTo(composite43);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        java.util.RandomAccess[] randomAccessArray60 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray61 = composite59.toArray(randomAccessArray60);
        comparators.Composite composite63 = composite59.addLong((long) 67);
        byte[] byteArray64 = composite63.serialize();
        java.util.List<java.lang.Object> objList65 = comparators.Composite.deserialize(byteArray64);
        comparators.Composite composite66 = new comparators.Composite(byteArray64);
        boolean boolean67 = composite43.equals((java.lang.Object) byteArray64);
        java.util.List<java.lang.Object> objList68 = compositeListSerializer0.fromBytes(byteArray64);
        java.nio.ByteBuffer byteBuffer69 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList70 = compositeListSerializer0.fromByteBuffer(byteBuffer69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(randomAccessArray60);
        org.junit.Assert.assertNotNull(randomAccessArray61);
        org.junit.Assert.assertNotNull(composite63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objList68);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray28 = comparators.Composite.serialize(objList27);
        java.util.stream.Stream<java.lang.Object> objStream29 = objList27.parallelStream();
        comparators.Composite composite30 = new comparators.Composite(objList27);
        java.lang.Object[] objArray31 = composite30.toArray();
        int int32 = composite30.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream33 = composite30.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream34 = composite30.parallelStream();
        comparators.Composite composite36 = composite30.addBool(true);
        java.io.DataOutputStream dataOutputStream37 = composite30.out;
        composite9.out = dataOutputStream37;
        java.util.UUID uUID39 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite40 = composite9.addLexicalUUID(uUID39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(dataOutputStream37);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        java.lang.String str0 = comparators.Composite.ASCII_ENCODING;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "US-ASCII" + "'", str0, "US-ASCII");
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        composite9.startOffset = 4;
        java.util.Collection<java.lang.Object> objCollection25 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean26 = composite9.addAll(objCollection25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        int int10 = composite9.size();
        composite9.clear();
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        java.util.stream.Stream<java.lang.Object> objStream20 = objList18.parallelStream();
        comparators.Composite composite21 = new comparators.Composite(objList18);
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        boolean boolean30 = comparators.Composite.validate((int) ' ', byteArray27, true);
        boolean boolean31 = composite21.contains((java.lang.Object) boolean30);
        java.util.stream.Stream<java.lang.Object> objStream32 = composite21.parallelStream();
        composite21.startOffset = 8;
        comparators.Composite composite36 = composite21.addAscii("hi!");
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite21);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        java.util.List<java.lang.Object> objList44 = comparators.Composite.deserialize(byteArray42);
        byte[] byteArray45 = comparators.Composite.serialize(objList44);
        java.util.stream.Stream<java.lang.Object> objStream46 = objList44.parallelStream();
        comparators.Composite composite47 = new comparators.Composite(objList44);
        java.lang.Object[] objArray48 = composite47.toArray();
        int int49 = composite47.startOffset;
        int int50 = composite47.startOffset;
        java.lang.Object[] objArray51 = composite47.toArray();
        int int52 = composite47.startOffset;
        composite47.startOffset = (byte) 10;
        java.util.stream.Stream<java.lang.Object> objStream55 = composite47.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = composite21.retainAll((java.util.Collection<java.lang.Object>) composite47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(objList44);
        org.junit.Assert.assertNull(byteArray45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(objStream55);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        comparators.Composite composite38 = composite11.addBytes(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = composite38.serializeToByteBuffer();
        compositeType1.validate(byteBuffer39);
        boolean boolean41 = comparators.Composite.validate(byteBuffer39);
        comparators.Composite composite42 = new comparators.Composite(byteBuffer39);
        java.nio.ByteBuffer byteBuffer43 = null;
        int int44 = compositeType0.compare(byteBuffer39, byteBuffer43);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator45 = compositeType0.indexReverseComparator;
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(indexInfoComparator45);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        comparators.CompositeType compositeType11 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray12 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList13 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13, byteBufferArray12);
        java.lang.String str15 = compositeType11.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator16 = compositeType11.indexComparator;
        comparators.CompositeType compositeType17 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray18 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList19 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19, byteBufferArray18);
        java.lang.String str21 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType11.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType17);
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.lang.String str28 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator34 = compositeType29.indexComparator;
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator40 = compositeType29.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType35);
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray42 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList43 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43, byteBufferArray42);
        java.lang.String str45 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.lang.String str46 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.util.AbstractList[] abstractListArray48 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray49 = (java.util.AbstractList<java.nio.ByteBuffer>[]) abstractListArray48;
        byteBufferListArray49[0] = byteBufferList25;
        byteBufferListArray49[1] = byteBufferList43;
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray54 = composite9.toArray(byteBufferListArray49);
        java.lang.Class<?> wildcardClass55 = byteBufferListArray54.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(compositeType11);
        org.junit.Assert.assertNotNull(byteBufferArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(indexInfoComparator16);
        org.junit.Assert.assertNotNull(compositeType17);
        org.junit.Assert.assertNotNull(byteBufferArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(indexInfoComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteBufferComparator40);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteBufferArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(abstractListArray48);
        org.junit.Assert.assertNotNull(byteBufferListArray49);
        org.junit.Assert.assertNotNull(byteBufferListArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite65.startOffset;
        int int72 = composite17.compareTo(composite65);
        comparators.Composite composite74 = composite17.addLong((long) 80);
        int int75 = composite17.size();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        byte[] byteArray82 = compositeTypeIterator80.bytes;
        int int83 = compositeTypeIterator80.type;
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray88 = new byte[] {};
        int int89 = comparators.Composite.compare(byteArray87, byteArray88);
        byte[] byteArray93 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray94 = new byte[] {};
        int int95 = comparators.Composite.compare(byteArray93, byteArray94);
        int int96 = comparators.Composite.compare(byteArray87, byteArray94);
        compositeTypeIterator80.bytes = byteArray87;
        int int98 = compositeTypeIterator80.type;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray32 = new byte[] {};
        int int33 = comparators.Composite.compare(byteArray31, byteArray32);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray32);
        byte[] byteArray35 = comparators.Composite.serialize(objList34);
        java.util.stream.Stream<java.lang.Object> objStream36 = objList34.parallelStream();
        comparators.Composite composite37 = new comparators.Composite(objList34);
        java.lang.Object[] objArray38 = composite37.toArray();
        int int39 = composite37.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream40 = composite37.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream41 = composite37.parallelStream();
        int int42 = composite37.startOffset;
        int int43 = composite23.compareTo(composite37);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        comparators.Composite composite50 = composite23.addBytes(byteArray48);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean51 = composite13.remove((java.lang.Object) byteArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(composite50);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray38 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray39 = composite9.toArray(compositeListSerializerArray38);
        comparators.Composite composite40 = new comparators.Composite((java.lang.Object[]) compositeListSerializerArray38);
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.nio.ByteBuffer byteBuffer79 = composite78.serializeToByteBuffer();
        compositeType41.validate(byteBuffer79);
        boolean boolean81 = comparators.Composite.validate(byteBuffer79);
        comparators.Composite composite82 = new comparators.Composite(byteBuffer79);
        comparators.Composite composite83 = new comparators.Composite(byteBuffer79);
        int int84 = comparators.Composite.compare(composite40, composite83);
        java.lang.Class<?> wildcardClass85 = composite83.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray38);
        org.junit.Assert.assertNotNull(compositeListSerializerArray39);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        byte[] byteArray21 = composite9.bytes;
        comparators.Composite composite23 = composite9.addUTF8("Placeholder(1)");
        java.lang.Class[] classArray25 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray26 = (java.lang.Class<?>[]) classArray25;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?>[] wildcardClassArray27 = composite23.toArray(wildcardClassArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(composite23);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(wildcardClassArray26);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        comparators.Composite composite37 = composite9.addLong((long) (short) 1);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        java.util.List<java.lang.Object> objList44 = comparators.Composite.deserialize(byteArray42);
        byte[] byteArray45 = comparators.Composite.serialize(objList44);
        java.util.stream.Stream<java.lang.Object> objStream46 = objList44.parallelStream();
        comparators.Composite composite47 = new comparators.Composite(objList44);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        boolean boolean56 = comparators.Composite.validate((int) ' ', byteArray53, true);
        boolean boolean57 = composite47.contains((java.lang.Object) boolean56);
        java.util.stream.Stream<java.lang.Object> objStream58 = composite47.parallelStream();
        composite47.startOffset = 8;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean61 = composite37.removeAll((java.util.Collection<java.lang.Object>) composite47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(objList44);
        org.junit.Assert.assertNull(byteArray45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objStream58);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        comparators.Composite composite38 = composite11.addBytes(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = composite38.serializeToByteBuffer();
        compositeType1.validate(byteBuffer39);
        boolean boolean41 = comparators.Composite.validate(byteBuffer39);
        comparators.Composite composite42 = new comparators.Composite(byteBuffer39);
        java.nio.ByteBuffer byteBuffer43 = null;
        int int44 = compositeType0.compare(byteBuffer39, byteBuffer43);
        comparators.Composite composite45 = new comparators.Composite(byteBuffer39);
        comparators.Composite composite46 = new comparators.Composite(byteBuffer39);
        comparators.Composite composite47 = new comparators.Composite(byteBuffer39);
        java.util.logging.Logger logger48 = comparators.Composite.logger;
        boolean boolean49 = composite47.contains((java.lang.Object) logger48);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(logger48);
        org.junit.Assert.assertEquals(logger48.getName(), "comparators.Composite");
        org.junit.Assert.assertNull("logger48.getResourceBundleName() == null", logger48.getResourceBundleName());
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        boolean boolean6 = comparators.Composite.isValidType((java.lang.Object) compositeType0);
        comparators.CompositeType compositeType7 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator8 = compositeType7.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType10 = new comparators.CompositeType();
        comparators.CompositeType compositeType11 = comparators.CompositeType.instance;
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        java.util.stream.Stream<java.lang.Object> objStream20 = objList18.parallelStream();
        comparators.Composite composite21 = new comparators.Composite(objList18);
        java.lang.Object[] objArray22 = composite21.toArray();
        int int23 = composite21.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream24 = composite21.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream25 = composite21.parallelStream();
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray30);
        byte[] byteArray33 = comparators.Composite.serialize(objList32);
        java.util.stream.Stream<java.lang.Object> objStream34 = objList32.parallelStream();
        comparators.Composite composite35 = new comparators.Composite(objList32);
        java.lang.Object[] objArray36 = composite35.toArray();
        int int37 = composite35.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream38 = composite35.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream39 = composite35.parallelStream();
        int int40 = composite35.startOffset;
        int int41 = composite21.compareTo(composite35);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        comparators.Composite composite48 = composite21.addBytes(byteArray46);
        java.nio.ByteBuffer byteBuffer49 = composite48.serializeToByteBuffer();
        compositeType11.validate(byteBuffer49);
        boolean boolean51 = comparators.Composite.validate(byteBuffer49);
        comparators.Composite composite52 = new comparators.Composite(byteBuffer49);
        java.nio.ByteBuffer byteBuffer53 = null;
        int int54 = compositeType10.compare(byteBuffer49, byteBuffer53);
        comparators.Composite composite55 = new comparators.Composite(byteBuffer49);
        comparators.Composite composite56 = new comparators.Composite(byteBuffer49);
        java.lang.String str57 = compositeType0.getString(byteBuffer49);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer59 = compositeType0.fromString("US-ASCII");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexInfoComparator8);
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(compositeType11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(composite48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.lang.String str17 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.util.Collection<org.apache.cassandra.db.IColumn> iColumnCollection18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = compositeType6.getColumnsString(iColumnCollection18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        comparators.hector.CompositeListSerializer compositeListSerializer1 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType2 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray3 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList4 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList4, byteBufferArray3);
        java.lang.String str6 = compositeType2.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList4);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator7 = compositeType2.indexComparator;
        comparators.CompositeType compositeType8 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray9 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList10 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList10, byteBufferArray9);
        java.lang.String str12 = compositeType8.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList10);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = compositeType2.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType8);
        comparators.CompositeType compositeType14 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray15 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList16 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16, byteBufferArray15);
        java.lang.String str18 = compositeType14.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16);
        java.lang.String str19 = compositeType8.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16);
        java.util.List<java.util.List<java.lang.Object>> objListList20 = compositeListSerializer1.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList16);
        int int22 = compositeListSerializer1.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer23 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType24 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray25 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList26 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList26, byteBufferArray25);
        java.lang.String str28 = compositeType24.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList26);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator29 = compositeType24.indexComparator;
        comparators.CompositeType compositeType30 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray31 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList32 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32, byteBufferArray31);
        java.lang.String str34 = compositeType30.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator35 = compositeType24.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType30);
        comparators.CompositeType compositeType36 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray37 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList38 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38, byteBufferArray37);
        java.lang.String str40 = compositeType36.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38);
        java.lang.String str41 = compositeType30.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38);
        java.util.List<java.util.List<java.lang.Object>> objListList42 = compositeListSerializer23.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList38);
        java.util.List<java.nio.ByteBuffer> byteBufferList43 = compositeListSerializer1.toBytesList(objListList42);
        java.lang.String str44 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer46 = compositeType0.fromString("Placeholder(1)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(compositeType2);
        org.junit.Assert.assertNotNull(byteBufferArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(indexInfoComparator7);
        org.junit.Assert.assertNotNull(compositeType8);
        org.junit.Assert.assertNotNull(byteBufferArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteBufferComparator13);
        org.junit.Assert.assertNotNull(compositeType14);
        org.junit.Assert.assertNotNull(byteBufferArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(objListList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertNotNull(compositeType24);
        org.junit.Assert.assertNotNull(byteBufferArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(indexInfoComparator29);
        org.junit.Assert.assertNotNull(compositeType30);
        org.junit.Assert.assertNotNull(byteBufferArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteBufferComparator35);
        org.junit.Assert.assertNotNull(compositeType36);
        org.junit.Assert.assertNotNull(byteBufferArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(objListList42);
        org.junit.Assert.assertNotNull(byteBufferList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        comparators.CompositeType compositeType1 = new comparators.CompositeType();
        comparators.CompositeType compositeType2 = comparators.CompositeType.instance;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        java.util.List<java.lang.Object> objList9 = comparators.Composite.deserialize(byteArray7);
        byte[] byteArray10 = comparators.Composite.serialize(objList9);
        java.util.stream.Stream<java.lang.Object> objStream11 = objList9.parallelStream();
        comparators.Composite composite12 = new comparators.Composite(objList9);
        java.lang.Object[] objArray13 = composite12.toArray();
        int int14 = composite12.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream15 = composite12.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream16 = composite12.parallelStream();
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        int int31 = composite26.startOffset;
        int int32 = composite12.compareTo(composite26);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        comparators.Composite composite39 = composite12.addBytes(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = composite39.serializeToByteBuffer();
        compositeType2.validate(byteBuffer40);
        boolean boolean42 = comparators.Composite.validate(byteBuffer40);
        comparators.Composite composite43 = new comparators.Composite(byteBuffer40);
        java.nio.ByteBuffer byteBuffer44 = null;
        int int45 = compositeType1.compare(byteBuffer40, byteBuffer44);
        compositeType0.validate(byteBuffer40);
        comparators.CompositeType compositeType47 = new comparators.CompositeType();
        comparators.CompositeType compositeType48 = comparators.CompositeType.instance;
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteArray53);
        byte[] byteArray56 = comparators.Composite.serialize(objList55);
        java.util.stream.Stream<java.lang.Object> objStream57 = objList55.parallelStream();
        comparators.Composite composite58 = new comparators.Composite(objList55);
        java.lang.Object[] objArray59 = composite58.toArray();
        int int60 = composite58.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream61 = composite58.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream62 = composite58.parallelStream();
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray67 = new byte[] {};
        int int68 = comparators.Composite.compare(byteArray66, byteArray67);
        java.util.List<java.lang.Object> objList69 = comparators.Composite.deserialize(byteArray67);
        byte[] byteArray70 = comparators.Composite.serialize(objList69);
        java.util.stream.Stream<java.lang.Object> objStream71 = objList69.parallelStream();
        comparators.Composite composite72 = new comparators.Composite(objList69);
        java.lang.Object[] objArray73 = composite72.toArray();
        int int74 = composite72.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream75 = composite72.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream76 = composite72.parallelStream();
        int int77 = composite72.startOffset;
        int int78 = composite58.compareTo(composite72);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray83 = new byte[] {};
        int int84 = comparators.Composite.compare(byteArray82, byteArray83);
        comparators.Composite composite85 = composite58.addBytes(byteArray83);
        java.nio.ByteBuffer byteBuffer86 = composite85.serializeToByteBuffer();
        compositeType48.validate(byteBuffer86);
        boolean boolean88 = comparators.Composite.validate(byteBuffer86);
        comparators.Composite composite89 = new comparators.Composite(byteBuffer86);
        java.nio.ByteBuffer byteBuffer90 = null;
        int int91 = compositeType47.compare(byteBuffer86, byteBuffer90);
        comparators.Composite composite92 = new comparators.Composite(byteBuffer86);
        compositeType0.validate(byteBuffer86);
        boolean boolean95 = comparators.Composite.validate(byteBuffer86, false);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(compositeType2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(compositeType48);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(objList69);
        org.junit.Assert.assertNull(byteArray70);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(objStream75);
        org.junit.Assert.assertNotNull(objStream76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(composite85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        comparators.Composite composite36 = composite9.addBytes(byteArray34);
        java.util.List<java.lang.Object> objList37 = comparators.Composite.deserialize(byteArray34);
        java.util.Spliterator<java.lang.Object> objSpliterator38 = objList37.spliterator();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(objList37);
        org.junit.Assert.assertNotNull(objSpliterator38);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.stream();
        comparators.hector.CompositeSerializer compositeSerializer13 = new comparators.hector.CompositeSerializer();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.util.RandomAccess[] randomAccessArray24 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray25 = composite23.toArray(randomAccessArray24);
        comparators.Composite composite27 = composite23.addLong((long) 67);
        byte[] byteArray28 = composite27.serialize();
        java.util.List<java.lang.Object> objList29 = comparators.Composite.deserialize(byteArray28);
        comparators.Composite composite30 = new comparators.Composite(byteArray28);
        comparators.Composite composite31 = compositeSerializer13.fromBytes(byteArray28);
        comparators.Composite composite32 = new comparators.Composite(byteArray28);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = composite9.retainAll((java.util.Collection<java.lang.Object>) composite32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(randomAccessArray24);
        org.junit.Assert.assertNotNull(randomAccessArray25);
        org.junit.Assert.assertNotNull(composite27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList29);
        org.junit.Assert.assertNotNull(composite31);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray38 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray39 = composite9.toArray(compositeListSerializerArray38);
        comparators.Composite composite40 = new comparators.Composite((java.lang.Object[]) compositeListSerializerArray38);
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.nio.ByteBuffer byteBuffer79 = composite78.serializeToByteBuffer();
        compositeType41.validate(byteBuffer79);
        boolean boolean81 = comparators.Composite.validate(byteBuffer79);
        comparators.Composite composite82 = new comparators.Composite(byteBuffer79);
        comparators.Composite composite83 = new comparators.Composite(byteBuffer79);
        int int84 = comparators.Composite.compare(composite40, composite83);
        java.util.UUID uUID85 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite86 = composite83.addTimeUUID(uUID85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray38);
        org.junit.Assert.assertNotNull(compositeListSerializerArray39);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        java.util.List<java.lang.Object> objList0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray1 = comparators.Composite.serialize(objList0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray12 = new byte[] {};
        int int13 = comparators.Composite.compare(byteArray11, byteArray12);
        int int14 = comparators.Composite.compare(byteArray5, byteArray12);
        boolean boolean16 = comparators.Composite.validate((int) (byte) 0, byteArray12, true);
        byte[] byteArray19 = null;
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        int int33 = comparators.Composite.compare(byteArray24, byteArray31);
        int int34 = comparators.Composite.compare((int) (byte) 1, byteArray19, 10, byteArray24);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(byteArray40);
        boolean boolean43 = comparators.Composite.validate(0, byteArray40);
        byte[] byteArray44 = null;
        int int45 = comparators.Composite.compare(byteArray40, byteArray44);
        int int46 = comparators.Composite.compare(byteArray24, byteArray40);
        // The following exception was thrown during execution in test generation
        try {
            int int47 = comparators.Composite.compare(32, byteArray12, 90, byteArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(objList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        int int33 = composite28.startOffset;
        composite28.clear();
        boolean boolean35 = composite18.containsAll((java.util.Collection<java.lang.Object>) composite28);
        comparators.CompositeType compositeType36 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray37 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList38 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38, byteBufferArray37);
        java.lang.String str40 = compositeType36.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator41 = compositeType36.indexComparator;
        boolean boolean42 = comparators.Composite.isValidType((java.lang.Object) compositeType36);
        comparators.CompositeType compositeType43 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator44 = compositeType43.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator45 = compositeType36.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType43);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator46 = compositeType36.indexReverseComparator;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean47 = composite28.add((java.lang.Object) indexInfoComparator46);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(compositeType36);
        org.junit.Assert.assertNotNull(byteBufferArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(indexInfoComparator41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(indexInfoComparator44);
        org.junit.Assert.assertNotNull(byteBufferComparator45);
        org.junit.Assert.assertNotNull(indexInfoComparator46);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        byte[] byteArray21 = composite9.bytes;
        comparators.Composite composite23 = composite9.addUTF8("Placeholder(1)");
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.lang.Object[] objArray34 = composite33.toArray();
        int int35 = composite33.startOffset;
        byte[] byteArray36 = composite33.bytes;
        java.io.DataOutputStream dataOutputStream37 = null;
        composite33.out = dataOutputStream37;
        java.io.ByteArrayOutputStream byteArrayOutputStream39 = null;
        composite33.byteStream = byteArrayOutputStream39;
        java.util.Iterator<java.lang.Object> objItor41 = composite33.iterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = composite9.add((java.lang.Object) objItor41);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(composite23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objItor41);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.lang.Class<?> wildcardClass5 = byteBufferList2.getClass();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        int int21 = composite9.startOffset;
        java.lang.Object[] objArray22 = composite9.toArray();
        java.util.UUID uUID23 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite24 = composite9.addTimeUUID(uUID23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        comparators.Composite composite17 = composite15.addLong((long) 6);
        byte[] byteArray18 = composite17.bytes;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        comparators.Composite composite34 = composite28.addBool(true);
        comparators.Composite composite36 = composite34.addLong((long) 6);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray41 = new byte[] {};
        int int42 = comparators.Composite.compare(byteArray40, byteArray41);
        java.util.List<java.lang.Object> objList43 = comparators.Composite.deserialize(byteArray41);
        byte[] byteArray44 = comparators.Composite.serialize(objList43);
        java.util.stream.Stream<java.lang.Object> objStream45 = objList43.parallelStream();
        comparators.Composite composite46 = new comparators.Composite(objList43);
        java.util.RandomAccess[] randomAccessArray47 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray48 = composite46.toArray(randomAccessArray47);
        comparators.Composite composite50 = composite46.addLong((long) 67);
        byte[] byteArray51 = composite50.serialize();
        comparators.Composite composite52 = composite34.addBytes(byteArray51);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean53 = composite17.remove((java.lang.Object) composite52);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNull(byteArray18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(objList43);
        org.junit.Assert.assertNull(byteArray44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(randomAccessArray47);
        org.junit.Assert.assertNotNull(randomAccessArray48);
        org.junit.Assert.assertNotNull(composite50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(composite52);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        composite9.clear();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream28 = null;
        composite25.byteStream = byteArrayOutputStream28;
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        int int41 = composite39.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream42 = composite39.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream43 = composite39.parallelStream();
        comparators.Composite composite45 = composite39.addBool(true);
        java.util.Iterator<java.lang.Object> objItor46 = composite39.iterator();
        int int47 = composite25.compareTo(composite39);
        boolean boolean48 = composite9.addAll((java.util.Collection<java.lang.Object>) composite25);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer49 = composite25.serializeToByteBuffer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(composite45);
        org.junit.Assert.assertNotNull(objItor46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        java.util.UUID uUID27 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite28 = composite9.addTimeUUID(uUID27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        comparators.Composite composite34 = composite28.addBool(true);
        comparators.Composite composite36 = composite34.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream37 = composite34.byteStream;
        java.nio.ByteBuffer byteBuffer38 = compositeSerializer0.toByteBuffer(composite34);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        java.lang.Object[] objArray49 = composite48.toArray();
        int int50 = composite48.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream51 = composite48.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream52 = composite48.parallelStream();
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        java.util.List<java.lang.Object> objList59 = comparators.Composite.deserialize(byteArray57);
        byte[] byteArray60 = comparators.Composite.serialize(objList59);
        java.util.stream.Stream<java.lang.Object> objStream61 = objList59.parallelStream();
        comparators.Composite composite62 = new comparators.Composite(objList59);
        java.lang.Object[] objArray63 = composite62.toArray();
        int int64 = composite62.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream65 = composite62.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream66 = composite62.parallelStream();
        int int67 = composite62.startOffset;
        int int68 = composite48.compareTo(composite62);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        java.util.List<java.lang.Object> objList75 = comparators.Composite.deserialize(byteArray73);
        byte[] byteArray76 = comparators.Composite.serialize(objList75);
        java.util.stream.Stream<java.lang.Object> objStream77 = objList75.parallelStream();
        comparators.Composite composite78 = new comparators.Composite(objList75);
        java.util.RandomAccess[] randomAccessArray79 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray80 = composite78.toArray(randomAccessArray79);
        comparators.Composite composite82 = composite78.addLong((long) 67);
        byte[] byteArray83 = composite82.serialize();
        java.util.List<java.lang.Object> objList84 = comparators.Composite.deserialize(byteArray83);
        comparators.Composite composite85 = new comparators.Composite(byteArray83);
        boolean boolean86 = composite62.equals((java.lang.Object) byteArray83);
        comparators.Composite composite87 = compositeSerializer0.fromBytes(byteArray83);
        comparators.CompositeType compositeType88 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray89 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList90 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList90, byteBufferArray89);
        java.lang.String str92 = compositeType88.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList90);
        java.util.List<comparators.Composite> compositeList93 = compositeSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList90);
        java.util.List<comparators.Composite> compositeList94 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.nio.ByteBuffer> byteBufferList95 = compositeSerializer0.toBytesList(compositeList94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArrayOutputStream37);
        org.junit.Assert.assertEquals(byteArrayOutputStream37.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(objList75);
        org.junit.Assert.assertNull(byteArray76);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(randomAccessArray79);
        org.junit.Assert.assertNotNull(randomAccessArray80);
        org.junit.Assert.assertNotNull(composite82);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(composite87);
        org.junit.Assert.assertNotNull(compositeType88);
        org.junit.Assert.assertNotNull(byteBufferArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(compositeList93);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite65.startOffset;
        int int72 = composite17.compareTo(composite65);
        comparators.Composite composite74 = composite17.addLong((long) 80);
        comparators.Composite composite76 = composite17.addLong((long) 6);
        byte[] byteArray77 = composite76.serialize();
        java.lang.Class<?> wildcardClass78 = composite76.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(composite76);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 80, 3, 0, 0, 0, 0, 0, 0, 0, 6, 0]");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        java.util.List<comparators.Composite> compositeList1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.nio.ByteBuffer> byteBufferList2 = compositeSerializer0.toBytesList(compositeList1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite23 = new comparators.Composite();
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.lang.Object[] objArray34 = composite33.toArray();
        int int35 = composite33.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream36 = composite33.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream37 = composite33.parallelStream();
        int int38 = composite23.compareTo(composite33);
        java.io.DataOutputStream dataOutputStream39 = composite33.out;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = composite9.retainAll((java.util.Collection<java.lang.Object>) composite33);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(dataOutputStream39);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        java.util.Spliterator<java.lang.Object> objSpliterator23 = composite9.spliterator();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(objSpliterator23);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        comparators.Composite composite17 = composite15.addLong((long) 6);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.util.RandomAccess[] randomAccessArray28 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray29 = composite27.toArray(randomAccessArray28);
        comparators.Composite composite31 = composite27.addLong((long) 67);
        byte[] byteArray32 = composite31.serialize();
        comparators.Composite composite33 = composite15.addBytes(byteArray32);
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        int int46 = composite43.startOffset;
        java.lang.Object[] objArray47 = composite43.toArray();
        int int48 = composite43.startOffset;
        composite43.startOffset = (byte) 10;
        java.util.stream.Stream<java.lang.Object> objStream51 = composite43.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = composite15.add((java.lang.Object) objStream51);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(randomAccessArray28);
        org.junit.Assert.assertNotNull(randomAccessArray29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(objStream51);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        int int82 = compositeTypeIterator80.offset;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 67 + "'", int82 == 67);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        java.util.stream.Stream<java.lang.Object> objStream20 = objList18.parallelStream();
        comparators.Composite composite21 = new comparators.Composite(objList18);
        java.lang.Object[] objArray22 = composite21.toArray();
        int int23 = composite21.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream24 = composite21.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream25 = composite21.parallelStream();
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray30);
        byte[] byteArray33 = comparators.Composite.serialize(objList32);
        java.util.stream.Stream<java.lang.Object> objStream34 = objList32.parallelStream();
        comparators.Composite composite35 = new comparators.Composite(objList32);
        java.lang.Object[] objArray36 = composite35.toArray();
        int int37 = composite35.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream38 = composite35.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream39 = composite35.parallelStream();
        int int40 = composite35.startOffset;
        int int41 = composite21.compareTo(composite35);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        comparators.Composite composite48 = composite21.addBytes(byteArray46);
        java.nio.ByteBuffer byteBuffer49 = composite48.serializeToByteBuffer();
        compositeType6.validate(byteBuffer49);
        comparators.Composite composite51 = new comparators.Composite(byteBuffer49);
        java.util.UUID uUID52 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite53 = composite51.addTimeUUID(uUID52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(composite48);
        org.junit.Assert.assertNotNull(byteBuffer49);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        byte[] byteArray82 = compositeTypeIterator80.bytes;
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray87 = new byte[] {};
        int int88 = comparators.Composite.compare(byteArray86, byteArray87);
        byte[] byteArray92 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray93 = new byte[] {};
        int int94 = comparators.Composite.compare(byteArray92, byteArray93);
        int int95 = comparators.Composite.compare(byteArray86, byteArray93);
        boolean boolean96 = comparators.Composite.isValidType((java.lang.Object) byteArray86);
        compositeTypeIterator80.bytes = byteArray86;
        int int98 = compositeTypeIterator80.len;
        boolean boolean99 = compositeTypeIterator80.hasNext();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        byte[] byteArray82 = compositeTypeIterator80.bytes;
        int int83 = compositeTypeIterator80.type;
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray88 = new byte[] {};
        int int89 = comparators.Composite.compare(byteArray87, byteArray88);
        byte[] byteArray93 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray94 = new byte[] {};
        int int95 = comparators.Composite.compare(byteArray93, byteArray94);
        int int96 = comparators.Composite.compare(byteArray87, byteArray94);
        compositeTypeIterator80.bytes = byteArray87;
        byte[] byteArray98 = compositeTypeIterator80.bytes;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList99 = comparators.Composite.deserialize(byteArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertNotNull(byteArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray98), "[10, 10, -1]");
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        java.lang.Class<?> wildcardClass10 = byteBufferComparator9.getClass();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        comparators.Composite composite16 = new comparators.Composite();
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        int int31 = composite16.compareTo(composite26);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean32 = composite9.removeAll((java.util.Collection<java.lang.Object>) composite16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        byte[] byteArray1 = null;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray13 = new byte[] {};
        int int14 = comparators.Composite.compare(byteArray12, byteArray13);
        int int15 = comparators.Composite.compare(byteArray6, byteArray13);
        int int16 = comparators.Composite.compare((int) (byte) 1, byteArray1, 10, byteArray6);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        int int29 = comparators.Composite.compare(byteArray20, byteArray27);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray27);
        int int31 = comparators.Composite.compare(byteArray6, byteArray27);
        comparators.Composite composite32 = new comparators.Composite(byteArray27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.util.RandomAccess[] randomAccessArray43 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray44 = composite42.toArray(randomAccessArray43);
        comparators.Composite composite46 = composite42.addLong((long) 67);
        byte[] byteArray47 = composite46.serialize();
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray47);
        comparators.Composite composite49 = new comparators.Composite(byteArray47);
        boolean boolean50 = composite32.containsAll((java.util.Collection<java.lang.Object>) composite49);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        java.util.List<java.lang.Object> objList57 = comparators.Composite.deserialize(byteArray55);
        byte[] byteArray58 = comparators.Composite.serialize(objList57);
        java.util.stream.Stream<java.lang.Object> objStream59 = objList57.parallelStream();
        comparators.Composite composite60 = new comparators.Composite(objList57);
        java.lang.Object[] objArray61 = composite60.toArray();
        int int62 = composite60.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream63 = composite60.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream64 = composite60.parallelStream();
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        java.util.List<java.lang.Object> objList71 = comparators.Composite.deserialize(byteArray69);
        byte[] byteArray72 = comparators.Composite.serialize(objList71);
        java.util.stream.Stream<java.lang.Object> objStream73 = objList71.parallelStream();
        comparators.Composite composite74 = new comparators.Composite(objList71);
        java.lang.Object[] objArray75 = composite74.toArray();
        int int76 = composite74.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream77 = composite74.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream78 = composite74.parallelStream();
        int int79 = composite74.startOffset;
        int int80 = composite60.compareTo(composite74);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean81 = composite49.retainAll((java.util.Collection<java.lang.Object>) composite74);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(randomAccessArray43);
        org.junit.Assert.assertNotNull(randomAccessArray44);
        org.junit.Assert.assertNotNull(composite46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(objList57);
        org.junit.Assert.assertNull(byteArray58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(objList71);
        org.junit.Assert.assertNull(byteArray72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(7, byteArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 11");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        comparators.Composite composite37 = composite10.addBytes(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = composite37.serializeToByteBuffer();
        compositeType0.validate(byteBuffer38);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer41 = compositeType0.fromString("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteBuffer38);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray11 = new byte[] {};
        int int12 = comparators.Composite.compare(byteArray10, byteArray11);
        int int13 = comparators.Composite.compare(byteArray4, byteArray11);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray11);
        comparators.Composite composite15 = compositeSerializer0.fromBytes(byteArray11);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        comparators.Composite composite31 = composite25.addBool(true);
        java.util.Iterator<java.lang.Object> objItor32 = composite25.iterator();
        comparators.Composite composite34 = composite25.addReal((java.lang.Double) 100.0d);
        java.nio.ByteBuffer byteBuffer35 = compositeSerializer0.toByteBuffer(composite34);
        java.util.List<comparators.Composite> compositeList36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<java.nio.ByteBuffer> byteBufferSet37 = compositeSerializer0.toBytesSet(compositeList36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(objItor32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(byteBuffer35);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        comparators.hector.CompositeListSerializer compositeListSerializer20 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType21 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray22 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList23 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23, byteBufferArray22);
        java.lang.String str25 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator26 = compositeType21.indexComparator;
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray28 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList29 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29, byteBufferArray28);
        java.lang.String str31 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator32 = compositeType21.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType27);
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.lang.String str38 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.List<java.util.List<java.lang.Object>> objListList39 = compositeListSerializer20.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList35);
        int int41 = compositeListSerializer20.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer42 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray44 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList45 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45, byteBufferArray44);
        java.lang.String str47 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator48 = compositeType43.indexComparator;
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray50 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList51 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51, byteBufferArray50);
        java.lang.String str53 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator54 = compositeType43.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType49);
        comparators.CompositeType compositeType55 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray56 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList57 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57, byteBufferArray56);
        java.lang.String str59 = compositeType55.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        java.lang.String str60 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        java.util.List<java.util.List<java.lang.Object>> objListList61 = compositeListSerializer42.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList57);
        java.util.List<java.nio.ByteBuffer> byteBufferList62 = compositeListSerializer20.toBytesList(objListList61);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet63 = compositeListSerializer0.toBytesSet(objListList61);
        comparators.hector.CompositeListSerializer compositeListSerializer64 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType65 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray66 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList67 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList67, byteBufferArray66);
        java.lang.String str69 = compositeType65.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList67);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator70 = compositeType65.indexComparator;
        comparators.CompositeType compositeType71 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray72 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList73 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList73, byteBufferArray72);
        java.lang.String str75 = compositeType71.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList73);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator76 = compositeType65.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType71);
        comparators.CompositeType compositeType77 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray78 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList79 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList79, byteBufferArray78);
        java.lang.String str81 = compositeType77.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList79);
        java.lang.String str82 = compositeType71.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList79);
        java.util.List<java.util.List<java.lang.Object>> objListList83 = compositeListSerializer64.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList79);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet84 = compositeListSerializer0.toBytesSet(objListList83);
        int int86 = compositeListSerializer0.computeInitialHashSize(67);
        int int88 = compositeListSerializer0.computeInitialHashSize(3);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertNotNull(compositeType21);
        org.junit.Assert.assertNotNull(byteBufferArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(indexInfoComparator26);
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteBufferArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteBufferComparator32);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(objListList39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(byteBufferArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(indexInfoComparator48);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteBufferComparator54);
        org.junit.Assert.assertNotNull(compositeType55);
        org.junit.Assert.assertNotNull(byteBufferArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(objListList61);
        org.junit.Assert.assertNotNull(byteBufferList62);
        org.junit.Assert.assertNotNull(byteBufferSet63);
        org.junit.Assert.assertNotNull(compositeType65);
        org.junit.Assert.assertNotNull(byteBufferArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(indexInfoComparator70);
        org.junit.Assert.assertNotNull(compositeType71);
        org.junit.Assert.assertNotNull(byteBufferArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(byteBufferComparator76);
        org.junit.Assert.assertNotNull(compositeType77);
        org.junit.Assert.assertNotNull(byteBufferArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(objListList83);
        org.junit.Assert.assertNotNull(byteBufferSet84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 90 + "'", int86 == 90);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 5 + "'", int88 == 5);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        comparators.Composite composite34 = composite28.addBool(true);
        comparators.Composite composite36 = composite34.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream37 = composite34.byteStream;
        java.nio.ByteBuffer byteBuffer38 = compositeSerializer0.toByteBuffer(composite34);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        java.lang.Object[] objArray49 = composite48.toArray();
        int int50 = composite48.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream51 = composite48.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream52 = composite48.parallelStream();
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        java.util.List<java.lang.Object> objList59 = comparators.Composite.deserialize(byteArray57);
        byte[] byteArray60 = comparators.Composite.serialize(objList59);
        java.util.stream.Stream<java.lang.Object> objStream61 = objList59.parallelStream();
        comparators.Composite composite62 = new comparators.Composite(objList59);
        java.lang.Object[] objArray63 = composite62.toArray();
        int int64 = composite62.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream65 = composite62.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream66 = composite62.parallelStream();
        int int67 = composite62.startOffset;
        int int68 = composite48.compareTo(composite62);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        java.util.List<java.lang.Object> objList75 = comparators.Composite.deserialize(byteArray73);
        byte[] byteArray76 = comparators.Composite.serialize(objList75);
        java.util.stream.Stream<java.lang.Object> objStream77 = objList75.parallelStream();
        comparators.Composite composite78 = new comparators.Composite(objList75);
        java.util.RandomAccess[] randomAccessArray79 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray80 = composite78.toArray(randomAccessArray79);
        comparators.Composite composite82 = composite78.addLong((long) 67);
        byte[] byteArray83 = composite82.serialize();
        java.util.List<java.lang.Object> objList84 = comparators.Composite.deserialize(byteArray83);
        comparators.Composite composite85 = new comparators.Composite(byteArray83);
        boolean boolean86 = composite62.equals((java.lang.Object) byteArray83);
        comparators.Composite composite87 = compositeSerializer0.fromBytes(byteArray83);
        byte[] byteArray91 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray92 = new byte[] {};
        int int93 = comparators.Composite.compare(byteArray91, byteArray92);
        java.util.List<java.lang.Object> objList94 = comparators.Composite.deserialize(byteArray92);
        byte[] byteArray95 = comparators.Composite.serialize(objList94);
        java.util.stream.Stream<java.lang.Object> objStream96 = objList94.parallelStream();
        comparators.Composite composite97 = new comparators.Composite(objList94);
        byte[] byteArray98 = compositeSerializer0.toBytes(composite97);
        int int99 = composite97.startOffset;
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArrayOutputStream37);
        org.junit.Assert.assertEquals(byteArrayOutputStream37.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(objList75);
        org.junit.Assert.assertNull(byteArray76);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(randomAccessArray79);
        org.junit.Assert.assertNotNull(randomAccessArray80);
        org.junit.Assert.assertNotNull(composite82);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(composite87);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(objList94);
        org.junit.Assert.assertNull(byteArray95);
        org.junit.Assert.assertNotNull(objStream96);
        org.junit.Assert.assertNull(byteArray98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        comparators.CompositeType compositeType19 = comparators.CompositeType.instance;
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        int int48 = composite43.startOffset;
        int int49 = composite29.compareTo(composite43);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        comparators.Composite composite56 = composite29.addBytes(byteArray54);
        java.nio.ByteBuffer byteBuffer57 = composite56.serializeToByteBuffer();
        compositeType19.validate(byteBuffer57);
        boolean boolean59 = comparators.Composite.validate(byteBuffer57);
        boolean boolean60 = comparators.Composite.validate(byteBuffer57);
        comparators.Composite composite61 = compositeSerializer0.fromByteBuffer(byteBuffer57);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        java.util.List<java.lang.Object> objList68 = comparators.Composite.deserialize(byteArray66);
        byte[] byteArray69 = comparators.Composite.serialize(objList68);
        java.util.stream.Stream<java.lang.Object> objStream70 = objList68.parallelStream();
        comparators.Composite composite71 = new comparators.Composite(objList68);
        java.util.RandomAccess[] randomAccessArray72 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray73 = composite71.toArray(randomAccessArray72);
        comparators.Composite composite75 = composite71.addLong((long) 67);
        byte[] byteArray76 = composite75.serialize();
        java.util.List<java.lang.Object> objList77 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite composite78 = new comparators.Composite(byteArray76);
        comparators.Composite composite79 = compositeSerializer0.fromBytes(byteArray76);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray84 = new byte[] {};
        int int85 = comparators.Composite.compare(byteArray83, byteArray84);
        comparators.Composite composite86 = compositeSerializer0.fromBytes(byteArray84);
        java.lang.Object obj87 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = composite86.remove(obj87);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(composite56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(objList68);
        org.junit.Assert.assertNull(byteArray69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(randomAccessArray72);
        org.junit.Assert.assertNotNull(randomAccessArray73);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList77);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(composite86);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        int int41 = composite39.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream42 = composite39.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream43 = composite39.parallelStream();
        int int44 = composite39.startOffset;
        int int45 = composite25.compareTo(composite39);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        comparators.Composite composite52 = composite25.addBytes(byteArray50);
        java.nio.ByteBuffer byteBuffer53 = composite52.serializeToByteBuffer();
        compositeType15.validate(byteBuffer53);
        boolean boolean55 = comparators.Composite.validate(byteBuffer53);
        comparators.Composite composite56 = new comparators.Composite(byteBuffer53);
        comparators.Composite composite57 = new comparators.Composite(byteBuffer53);
        boolean boolean58 = composite9.addAll((java.util.Collection<java.lang.Object>) composite57);
        comparators.Composite composite60 = composite9.addAscii("Placeholder(100)");
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray65 = new byte[] {};
        int int66 = comparators.Composite.compare(byteArray64, byteArray65);
        java.util.List<java.lang.Object> objList67 = comparators.Composite.deserialize(byteArray65);
        byte[] byteArray68 = comparators.Composite.serialize(objList67);
        java.util.stream.Stream<java.lang.Object> objStream69 = objList67.parallelStream();
        comparators.Composite composite70 = new comparators.Composite(objList67);
        java.lang.Object[] objArray71 = composite70.toArray();
        int int72 = composite70.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream73 = composite70.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream74 = composite70.parallelStream();
        comparators.Composite composite76 = composite70.addBool(true);
        java.util.Iterator<java.lang.Object> objItor77 = composite70.iterator();
        comparators.Composite composite79 = composite70.addReal((java.lang.Double) 100.0d);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray84 = new byte[] {};
        int int85 = comparators.Composite.compare(byteArray83, byteArray84);
        java.util.List<java.lang.Object> objList86 = comparators.Composite.deserialize(byteArray84);
        byte[] byteArray87 = comparators.Composite.serialize(objList86);
        java.util.stream.Stream<java.lang.Object> objStream88 = objList86.parallelStream();
        comparators.Composite composite89 = new comparators.Composite(objList86);
        java.lang.Object[] objArray90 = composite89.toArray();
        int int91 = composite89.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream92 = composite89.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream93 = composite89.parallelStream();
        int int94 = composite89.startOffset;
        composite89.clear();
        boolean boolean96 = composite79.containsAll((java.util.Collection<java.lang.Object>) composite89);
        java.util.Iterator<java.lang.Object> objItor97 = composite79.iterator();
        java.lang.String str98 = composite79.toString();
        int int99 = comparators.Composite.compare(composite60, composite79);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(composite52);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(composite60);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(objList67);
        org.junit.Assert.assertNull(byteArray68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertNotNull(objStream74);
        org.junit.Assert.assertNotNull(composite76);
        org.junit.Assert.assertNotNull(objItor77);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(objList86);
        org.junit.Assert.assertNull(byteArray87);
        org.junit.Assert.assertNotNull(objStream88);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(objStream92);
        org.junit.Assert.assertNotNull(objStream93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(objItor97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "true" + "'", str98, "true");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 80;
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        byte[] byteArray1 = null;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray13 = new byte[] {};
        int int14 = comparators.Composite.compare(byteArray12, byteArray13);
        int int15 = comparators.Composite.compare(byteArray6, byteArray13);
        int int16 = comparators.Composite.compare((int) (byte) 1, byteArray1, 10, byteArray6);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        boolean boolean25 = comparators.Composite.validate(0, byteArray22);
        byte[] byteArray26 = null;
        int int27 = comparators.Composite.compare(byteArray22, byteArray26);
        int int28 = comparators.Composite.compare(byteArray6, byteArray22);
        comparators.Composite composite29 = new comparators.Composite(byteArray22);
        java.lang.Class<?> wildcardClass30 = composite29.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.len = 58;
        byte[] byteArray88 = compositeTypeIterator80.bytes;
        boolean boolean89 = compositeTypeIterator80.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        comparators.Composite composite34 = composite28.addBool(true);
        comparators.Composite composite36 = composite34.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream37 = composite34.byteStream;
        java.nio.ByteBuffer byteBuffer38 = compositeSerializer0.toByteBuffer(composite34);
        java.util.UUID uUID39 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite40 = composite34.addLexicalUUID(uUID39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArrayOutputStream37);
        org.junit.Assert.assertEquals(byteArrayOutputStream37.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer38);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        byte[] byteArray2 = null;
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray8 = new byte[] {};
        int int9 = comparators.Composite.compare(byteArray7, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        int int16 = comparators.Composite.compare(byteArray7, byteArray14);
        int int17 = comparators.Composite.compare((int) (byte) 1, byteArray2, 10, byteArray7);
        comparators.hector.CompositeSerializer compositeSerializer19 = new comparators.hector.CompositeSerializer();
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.util.RandomAccess[] randomAccessArray30 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray31 = composite29.toArray(randomAccessArray30);
        comparators.Composite composite33 = composite29.addLong((long) 67);
        byte[] byteArray34 = composite33.serialize();
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray34);
        comparators.Composite composite36 = new comparators.Composite(byteArray34);
        comparators.Composite composite37 = compositeSerializer19.fromBytes(byteArray34);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(0, byteArray34);
        int int39 = comparators.Composite.compare(byteArray2, byteArray34);
        boolean boolean40 = comparators.Composite.validate((int) '#', byteArray2);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(randomAccessArray30);
        org.junit.Assert.assertNotNull(randomAccessArray31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        int int10 = composite9.size();
        composite9.clear();
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        java.util.stream.Stream<java.lang.Object> objStream20 = objList18.parallelStream();
        comparators.Composite composite21 = new comparators.Composite(objList18);
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        boolean boolean30 = comparators.Composite.validate((int) ' ', byteArray27, true);
        boolean boolean31 = composite21.contains((java.lang.Object) boolean30);
        java.util.stream.Stream<java.lang.Object> objStream32 = composite21.parallelStream();
        composite21.startOffset = 8;
        comparators.Composite composite36 = composite21.addAscii("hi!");
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite21);
        java.util.UUID uUID38 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite39 = composite9.addLexicalUUID(uUID38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        java.lang.Object[] objArray13 = composite9.toArray();
        java.util.UUID uUID14 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite15 = composite9.addTimeUUID(uUID14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        byte[] byteArray82 = compositeTypeIterator80.bytes;
        int int83 = compositeTypeIterator80.offset;
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 67 + "'", int83 == 67);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        int int1 = placeholder0.type;
        placeholder0.type = ' ';
        int int4 = placeholder0.type;
        placeholder0.type = 6;
        org.junit.Assert.assertNotNull(placeholder0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 6 + "'", int1 == 6);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 32 + "'", int4 == 32);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        boolean boolean7 = comparators.Composite.isValidType((java.lang.Object) compositeType1);
        comparators.CompositeType compositeType8 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator9 = compositeType8.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator10 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType8);
        comparators.CompositeType compositeType11 = new comparators.CompositeType();
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType12.validate(byteBuffer50);
        boolean boolean52 = comparators.Composite.validate(byteBuffer50);
        comparators.Composite composite53 = new comparators.Composite(byteBuffer50);
        java.nio.ByteBuffer byteBuffer54 = null;
        int int55 = compositeType11.compare(byteBuffer50, byteBuffer54);
        comparators.Composite composite56 = new comparators.Composite(byteBuffer50);
        comparators.Composite composite57 = new comparators.Composite(byteBuffer50);
        java.lang.String str58 = compositeType1.getString(byteBuffer50);
        compositeType0.validate(byteBuffer50);
        boolean boolean60 = comparators.Composite.validate(byteBuffer50);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(indexInfoComparator9);
        org.junit.Assert.assertNotNull(byteBufferComparator10);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray14);
        byte[] byteArray17 = comparators.Composite.serialize(objList16);
        java.util.stream.Stream<java.lang.Object> objStream18 = objList16.parallelStream();
        comparators.Composite composite19 = new comparators.Composite(objList16);
        java.lang.Object[] objArray20 = composite19.toArray();
        int int21 = composite19.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream22 = composite19.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream23 = composite19.parallelStream();
        int int24 = composite19.startOffset;
        int int25 = comparators.Composite.compare(composite9, composite19);
        java.util.UUID uUID26 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite27 = composite19.addTimeUUID(uUID26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        byte[] byteArray82 = compositeTypeIterator80.bytes;
        int int83 = compositeTypeIterator80.type;
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray88 = new byte[] {};
        int int89 = comparators.Composite.compare(byteArray87, byteArray88);
        byte[] byteArray93 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray94 = new byte[] {};
        int int95 = comparators.Composite.compare(byteArray93, byteArray94);
        int int96 = comparators.Composite.compare(byteArray87, byteArray94);
        compositeTypeIterator80.bytes = byteArray87;
        compositeTypeIterator80.len = (short) 100;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        java.lang.Object[] objArray13 = composite9.toArray();
        int int14 = composite9.startOffset;
        composite9.startOffset = (byte) 10;
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = composite9.removeAll((java.util.Collection<java.lang.Object>) objList23);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        comparators.CompositeType compositeType9 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray10 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList11 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11, byteBufferArray10);
        java.lang.String str13 = compositeType9.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType9.indexComparator;
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator20 = compositeType9.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType15);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator21 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType9);
        comparators.CompositeType compositeType22 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray23 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList24 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24, byteBufferArray23);
        java.lang.String str26 = compositeType22.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator27 = compositeType22.indexComparator;
        boolean boolean28 = comparators.Composite.isValidType((java.lang.Object) compositeType22);
        comparators.CompositeType compositeType29 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator30 = compositeType29.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType22.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        comparators.CompositeType compositeType32 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray33 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList34 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34, byteBufferArray33);
        java.lang.String str36 = compositeType32.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator37 = compositeType32.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator38 = compositeType29.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType32);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator39 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        java.nio.ByteBuffer byteBuffer40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = compositeType0.getString(byteBuffer40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(compositeType9);
        org.junit.Assert.assertNotNull(byteBufferArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteBufferComparator20);
        org.junit.Assert.assertNotNull(byteBufferComparator21);
        org.junit.Assert.assertNotNull(compositeType22);
        org.junit.Assert.assertNotNull(byteBufferArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(indexInfoComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(indexInfoComparator30);
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(compositeType32);
        org.junit.Assert.assertNotNull(byteBufferArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(indexInfoComparator37);
        org.junit.Assert.assertNotNull(byteBufferComparator38);
        org.junit.Assert.assertNotNull(byteBufferComparator39);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        comparators.hector.CompositeListSerializer compositeListSerializer15 = new comparators.hector.CompositeListSerializer();
        boolean boolean16 = composite9.contains((java.lang.Object) compositeListSerializer15);
        java.util.UUID uUID17 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite18 = composite9.addLexicalUUID(uUID17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        java.util.List<java.lang.Object> objList9 = comparators.Composite.deserialize(byteArray7);
        boolean boolean10 = comparators.Composite.validate(0, byteArray7);
        boolean boolean12 = comparators.Composite.validate((int) 'a', byteArray7, true);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList13 = comparators.Composite.deserialize(134, byteArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 138");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.offset;
        int int85 = compositeTypeIterator80.offset;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj86 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 67 + "'", int84 == 67);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer22 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator28 = compositeType23.indexComparator;
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator34 = compositeType23.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.lang.String str40 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.List<java.util.List<java.lang.Object>> objListList41 = compositeListSerializer22.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList37);
        java.util.List<java.nio.ByteBuffer> byteBufferList42 = compositeListSerializer0.toBytesList(objListList41);
        comparators.hector.CompositeListSerializer compositeListSerializer43 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType44 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray45 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList46 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList46, byteBufferArray45);
        java.lang.String str48 = compositeType44.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList46);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator49 = compositeType44.indexComparator;
        comparators.CompositeType compositeType50 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray51 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList52 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52, byteBufferArray51);
        java.lang.String str54 = compositeType50.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator55 = compositeType44.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType50);
        comparators.CompositeType compositeType56 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray57 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList58 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58, byteBufferArray57);
        java.lang.String str60 = compositeType56.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58);
        java.lang.String str61 = compositeType50.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58);
        java.util.List<java.util.List<java.lang.Object>> objListList62 = compositeListSerializer43.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList58);
        int int64 = compositeListSerializer43.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer65 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType66 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray67 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList68 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList68, byteBufferArray67);
        java.lang.String str70 = compositeType66.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList68);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator71 = compositeType66.indexComparator;
        comparators.CompositeType compositeType72 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray73 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList74 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList74, byteBufferArray73);
        java.lang.String str76 = compositeType72.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList74);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator77 = compositeType66.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType72);
        comparators.CompositeType compositeType78 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray79 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList80 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList80, byteBufferArray79);
        java.lang.String str82 = compositeType78.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList80);
        java.lang.String str83 = compositeType72.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList80);
        java.util.List<java.util.List<java.lang.Object>> objListList84 = compositeListSerializer65.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList80);
        java.util.List<java.nio.ByteBuffer> byteBufferList85 = compositeListSerializer43.toBytesList(objListList84);
        java.util.List<java.nio.ByteBuffer> byteBufferList86 = compositeListSerializer0.toBytesList(objListList84);
        java.lang.Class<?> wildcardClass87 = byteBufferList86.getClass();
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(indexInfoComparator28);
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteBufferComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(objListList41);
        org.junit.Assert.assertNotNull(byteBufferList42);
        org.junit.Assert.assertNotNull(compositeType44);
        org.junit.Assert.assertNotNull(byteBufferArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(indexInfoComparator49);
        org.junit.Assert.assertNotNull(compositeType50);
        org.junit.Assert.assertNotNull(byteBufferArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteBufferComparator55);
        org.junit.Assert.assertNotNull(compositeType56);
        org.junit.Assert.assertNotNull(byteBufferArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(objListList62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 6 + "'", int64 == 6);
        org.junit.Assert.assertNotNull(compositeType66);
        org.junit.Assert.assertNotNull(byteBufferArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(indexInfoComparator71);
        org.junit.Assert.assertNotNull(compositeType72);
        org.junit.Assert.assertNotNull(byteBufferArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(byteBufferComparator77);
        org.junit.Assert.assertNotNull(compositeType78);
        org.junit.Assert.assertNotNull(byteBufferArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(objListList84);
        org.junit.Assert.assertNotNull(byteBufferList85);
        org.junit.Assert.assertNotNull(byteBufferList86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        comparators.CompositeType compositeType30 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray31 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList32 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32, byteBufferArray31);
        java.lang.String str34 = compositeType30.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator35 = compositeType30.indexComparator;
        comparators.CompositeType compositeType36 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray37 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList38 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38, byteBufferArray37);
        java.lang.String str40 = compositeType36.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator41 = compositeType30.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType36);
        comparators.CompositeType compositeType42 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray43 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList44 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44, byteBufferArray43);
        java.lang.String str46 = compositeType42.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44);
        java.lang.String str47 = compositeType36.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44);
        comparators.CompositeType compositeType48 = comparators.CompositeType.instance;
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteArray53);
        byte[] byteArray56 = comparators.Composite.serialize(objList55);
        java.util.stream.Stream<java.lang.Object> objStream57 = objList55.parallelStream();
        comparators.Composite composite58 = new comparators.Composite(objList55);
        java.lang.Object[] objArray59 = composite58.toArray();
        int int60 = composite58.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream61 = composite58.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream62 = composite58.parallelStream();
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray67 = new byte[] {};
        int int68 = comparators.Composite.compare(byteArray66, byteArray67);
        java.util.List<java.lang.Object> objList69 = comparators.Composite.deserialize(byteArray67);
        byte[] byteArray70 = comparators.Composite.serialize(objList69);
        java.util.stream.Stream<java.lang.Object> objStream71 = objList69.parallelStream();
        comparators.Composite composite72 = new comparators.Composite(objList69);
        java.lang.Object[] objArray73 = composite72.toArray();
        int int74 = composite72.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream75 = composite72.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream76 = composite72.parallelStream();
        int int77 = composite72.startOffset;
        int int78 = composite58.compareTo(composite72);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray83 = new byte[] {};
        int int84 = comparators.Composite.compare(byteArray82, byteArray83);
        comparators.Composite composite85 = composite58.addBytes(byteArray83);
        java.nio.ByteBuffer byteBuffer86 = composite85.serializeToByteBuffer();
        compositeType48.validate(byteBuffer86);
        java.lang.String str88 = compositeType36.getString(byteBuffer86);
        comparators.Composite composite89 = new comparators.Composite(byteBuffer86);
        java.util.Iterator<java.lang.Object> objItor90 = composite89.iterator();
        comparators.Composite.Placeholder placeholder91 = comparators.Composite.MATCH_MAXIMUM;
        int int92 = placeholder91.type;
        placeholder91.type = 6;
        boolean boolean95 = composite89.contains((java.lang.Object) placeholder91);
        int int96 = composite23.compareTo(composite89);
        comparators.Composite composite97 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int98 = comparators.Composite.compare(composite89, composite97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(compositeType30);
        org.junit.Assert.assertNotNull(byteBufferArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(indexInfoComparator35);
        org.junit.Assert.assertNotNull(compositeType36);
        org.junit.Assert.assertNotNull(byteBufferArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteBufferComparator41);
        org.junit.Assert.assertNotNull(compositeType42);
        org.junit.Assert.assertNotNull(byteBufferArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(compositeType48);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(objList69);
        org.junit.Assert.assertNull(byteArray70);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(objStream75);
        org.junit.Assert.assertNotNull(objStream76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(composite85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(objItor90);
        org.junit.Assert.assertNotNull(placeholder91);
// flaky:         org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.lang.String str17 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite42.startOffset;
        int int48 = composite28.compareTo(composite42);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        comparators.Composite composite55 = composite28.addBytes(byteArray53);
        java.nio.ByteBuffer byteBuffer56 = composite55.serializeToByteBuffer();
        compositeType18.validate(byteBuffer56);
        java.lang.String str58 = compositeType6.getString(byteBuffer56);
        boolean boolean60 = comparators.Composite.validate(byteBuffer56, false);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        org.apache.cassandra.db.IColumn[] iColumnArray9 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList10 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList10, iColumnArray9);
        java.lang.String str12 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList10);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        org.apache.cassandra.db.IColumn[] iColumnArray18 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList19 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList19, iColumnArray18);
        java.lang.String str21 = compositeType13.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList19);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType13.getReverseComparator();
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        org.apache.cassandra.db.IColumn[] iColumnArray28 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList29 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList29, iColumnArray28);
        java.lang.String str31 = compositeType23.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList29);
        java.lang.String str32 = compositeType13.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList29);
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator38 = compositeType33.indexComparator;
        comparators.CompositeType compositeType39 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray40 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList41 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41, byteBufferArray40);
        java.lang.String str43 = compositeType39.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator44 = compositeType33.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType39);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator45 = compositeType13.thenComparing(byteBufferComparator44);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator46 = compositeType0.thenComparing(byteBufferComparator44);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator47 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator48 = byteBufferComparator44.thenComparing(byteBufferComparator47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(iColumnArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(iColumnArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(iColumnArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(indexInfoComparator38);
        org.junit.Assert.assertNotNull(compositeType39);
        org.junit.Assert.assertNotNull(byteBufferArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteBufferComparator44);
        org.junit.Assert.assertNotNull(byteBufferComparator45);
        org.junit.Assert.assertNotNull(byteBufferComparator46);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        comparators.hector.CompositeSerializer compositeSerializer1 = new comparators.hector.CompositeSerializer();
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        comparators.Composite composite17 = composite11.addBool(true);
        java.io.DataOutputStream dataOutputStream18 = composite11.out;
        byte[] byteArray19 = compositeSerializer1.toBytes(composite11);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        comparators.Composite composite35 = composite29.addBool(true);
        comparators.Composite composite37 = composite35.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream38 = composite35.byteStream;
        java.nio.ByteBuffer byteBuffer39 = compositeSerializer1.toByteBuffer(composite35);
        byte[] byteArray40 = composite35.serialize();
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteArray53);
        byte[] byteArray56 = comparators.Composite.serialize(objList55);
        java.util.stream.Stream<java.lang.Object> objStream57 = objList55.parallelStream();
        comparators.Composite composite58 = new comparators.Composite(objList55);
        java.util.RandomAccess[] randomAccessArray59 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray60 = composite58.toArray(randomAccessArray59);
        comparators.Composite composite62 = composite58.addLong((long) 67);
        byte[] byteArray63 = composite62.serialize();
        java.util.List<java.lang.Object> objList64 = comparators.Composite.deserialize(byteArray63);
        int int65 = comparators.Composite.compare(byteArray46, byteArray63);
        // The following exception was thrown during execution in test generation
        try {
            int int66 = comparators.Composite.compare(13, byteArray40, 70, byteArray46);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(dataOutputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteArrayOutputStream38);
        org.junit.Assert.assertEquals(byteArrayOutputStream38.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[67, 77, 80, 1, 2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 6, 0]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(randomAccessArray59);
        org.junit.Assert.assertNotNull(randomAccessArray60);
        org.junit.Assert.assertNotNull(composite62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        byte[] byteArray82 = compositeTypeIterator80.bytes;
        int int83 = compositeTypeIterator80.type;
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray88 = new byte[] {};
        int int89 = comparators.Composite.compare(byteArray87, byteArray88);
        byte[] byteArray93 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray94 = new byte[] {};
        int int95 = comparators.Composite.compare(byteArray93, byteArray94);
        int int96 = comparators.Composite.compare(byteArray87, byteArray94);
        compositeTypeIterator80.bytes = byteArray87;
        boolean boolean98 = compositeTypeIterator80.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        java.util.stream.Stream<java.lang.Object> objStream20 = objList18.parallelStream();
        comparators.Composite composite21 = new comparators.Composite(objList18);
        java.lang.Object[] objArray22 = composite21.toArray();
        int int23 = composite21.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream24 = composite21.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream25 = composite21.parallelStream();
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray30);
        byte[] byteArray33 = comparators.Composite.serialize(objList32);
        java.util.stream.Stream<java.lang.Object> objStream34 = objList32.parallelStream();
        comparators.Composite composite35 = new comparators.Composite(objList32);
        java.lang.Object[] objArray36 = composite35.toArray();
        int int37 = composite35.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream38 = composite35.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream39 = composite35.parallelStream();
        int int40 = composite35.startOffset;
        int int41 = composite21.compareTo(composite35);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        comparators.Composite composite48 = composite21.addBytes(byteArray46);
        java.nio.ByteBuffer byteBuffer49 = composite48.serializeToByteBuffer();
        compositeType6.validate(byteBuffer49);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer52 = compositeType6.fromString("Placeholder(1)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(composite48);
        org.junit.Assert.assertNotNull(byteBuffer49);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Collection<java.nio.ByteBuffer> byteBufferCollection5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = compositeType0.getString(byteBufferCollection5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        boolean boolean6 = comparators.Composite.isValidType((java.lang.Object) compositeType0);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer8 = compositeType0.fromString("Placeholder(100)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        composite9.clear();
        boolean boolean17 = composite9.equals((java.lang.Object) 1L);
        java.io.ByteArrayOutputStream byteArrayOutputStream18 = composite9.byteStream;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(byteArrayOutputStream18);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        comparators.Composite composite0 = new comparators.Composite();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        int int15 = composite0.compareTo(composite10);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.stream.Stream<java.lang.Object> objStream36 = composite25.parallelStream();
        boolean boolean37 = composite0.contains((java.lang.Object) composite25);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        java.util.List<java.lang.Object> objList44 = comparators.Composite.deserialize(byteArray42);
        byte[] byteArray45 = comparators.Composite.serialize(objList44);
        java.util.stream.Stream<java.lang.Object> objStream46 = objList44.parallelStream();
        comparators.Composite composite47 = new comparators.Composite(objList44);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        boolean boolean56 = comparators.Composite.validate((int) ' ', byteArray53, true);
        boolean boolean57 = composite47.contains((java.lang.Object) boolean56);
        java.util.stream.Stream<java.lang.Object> objStream58 = composite47.parallelStream();
        composite47.startOffset = 8;
        comparators.Composite composite62 = composite47.addAscii("hi!");
        comparators.Composite composite64 = composite47.addLong((long) 4);
        java.nio.ByteBuffer byteBuffer65 = composite64.serializeToByteBuffer();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = composite0.removeAll((java.util.Collection<java.lang.Object>) composite64);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(objList44);
        org.junit.Assert.assertNull(byteArray45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(composite62);
        org.junit.Assert.assertNotNull(composite64);
        org.junit.Assert.assertNotNull(byteBuffer65);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray8 = new byte[] {};
        int int9 = comparators.Composite.compare(byteArray7, byteArray8);
        boolean boolean11 = comparators.Composite.validate((int) ' ', byteArray8, true);
        boolean boolean12 = comparators.Composite.validate(100, byteArray8);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.util.RandomAccess[] randomAccessArray30 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray31 = composite29.toArray(randomAccessArray30);
        comparators.Composite composite33 = composite29.addLong((long) 67);
        byte[] byteArray34 = composite33.serialize();
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray34);
        int int36 = comparators.Composite.compare(byteArray17, byteArray34);
        int int37 = comparators.Composite.compare(byteArray8, byteArray34);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray45 = new byte[] {};
        int int46 = comparators.Composite.compare(byteArray44, byteArray45);
        boolean boolean48 = comparators.Composite.validate((int) ' ', byteArray45, true);
        boolean boolean49 = comparators.Composite.validate(100, byteArray45);
        int int50 = comparators.Composite.compare((int) (short) 100, byteArray8, 0, byteArray45);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList51 = comparators.Composite.deserialize(67, byteArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 71");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(randomAccessArray30);
        org.junit.Assert.assertNotNull(randomAccessArray31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        int int17 = composite9.startOffset;
        java.lang.Class<?> wildcardClass18 = composite9.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        byte[] byteArray82 = compositeTypeIterator80.bytes;
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray87 = new byte[] {};
        int int88 = comparators.Composite.compare(byteArray86, byteArray87);
        byte[] byteArray92 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray93 = new byte[] {};
        int int94 = comparators.Composite.compare(byteArray92, byteArray93);
        int int95 = comparators.Composite.compare(byteArray86, byteArray93);
        boolean boolean96 = comparators.Composite.isValidType((java.lang.Object) byteArray86);
        compositeTypeIterator80.bytes = byteArray86;
        int int98 = compositeTypeIterator80.offset;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 67 + "'", int98 == 67);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        comparators.Composite composite37 = composite9.addLong((long) (short) 1);
        comparators.Composite composite39 = composite37.addBool(true);
        java.util.UUID uUID40 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite41 = composite37.addLexicalUUID(uUID40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(composite39);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        comparators.CompositeType compositeType1 = new comparators.CompositeType();
        comparators.CompositeType compositeType2 = comparators.CompositeType.instance;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        java.util.List<java.lang.Object> objList9 = comparators.Composite.deserialize(byteArray7);
        byte[] byteArray10 = comparators.Composite.serialize(objList9);
        java.util.stream.Stream<java.lang.Object> objStream11 = objList9.parallelStream();
        comparators.Composite composite12 = new comparators.Composite(objList9);
        java.lang.Object[] objArray13 = composite12.toArray();
        int int14 = composite12.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream15 = composite12.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream16 = composite12.parallelStream();
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        int int31 = composite26.startOffset;
        int int32 = composite12.compareTo(composite26);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        comparators.Composite composite39 = composite12.addBytes(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = composite39.serializeToByteBuffer();
        compositeType2.validate(byteBuffer40);
        boolean boolean42 = comparators.Composite.validate(byteBuffer40);
        comparators.Composite composite43 = new comparators.Composite(byteBuffer40);
        java.nio.ByteBuffer byteBuffer44 = null;
        int int45 = compositeType1.compare(byteBuffer40, byteBuffer44);
        compositeType0.validate(byteBuffer40);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator47 = compositeType0.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator48 = compositeType0.getReverseComparator();
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray50 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList51 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51, byteBufferArray50);
        java.lang.String str53 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator54 = compositeType49.indexComparator;
        comparators.CompositeType compositeType55 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray56 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList57 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57, byteBufferArray56);
        java.lang.String str59 = compositeType55.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator60 = compositeType49.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType55);
        comparators.CompositeType compositeType61 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray62 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList63 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList63, byteBufferArray62);
        java.lang.String str65 = compositeType61.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList63);
        java.lang.String str66 = compositeType55.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList63);
        comparators.CompositeType compositeType67 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray68 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList69 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList69, byteBufferArray68);
        java.lang.String str71 = compositeType67.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList69);
        java.lang.String str72 = compositeType55.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList69);
        comparators.CompositeType compositeType73 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray74 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList75 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList75, byteBufferArray74);
        java.lang.String str77 = compositeType73.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList75);
        org.apache.cassandra.db.IColumn[] iColumnArray78 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList79 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList79, iColumnArray78);
        java.lang.String str81 = compositeType73.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList79);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator82 = compositeType73.getReverseComparator();
        comparators.CompositeType compositeType83 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray84 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList85 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList85, byteBufferArray84);
        java.lang.String str87 = compositeType83.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList85);
        org.apache.cassandra.db.IColumn[] iColumnArray88 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList89 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList89, iColumnArray88);
        java.lang.String str91 = compositeType83.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList89);
        java.lang.String str92 = compositeType73.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList89);
        java.lang.String str93 = compositeType55.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList89);
        java.lang.String str94 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList89);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer96 = compositeType0.fromString("Placeholder(100)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(compositeType2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(byteBufferComparator47);
        org.junit.Assert.assertNotNull(byteBufferComparator48);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(indexInfoComparator54);
        org.junit.Assert.assertNotNull(compositeType55);
        org.junit.Assert.assertNotNull(byteBufferArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteBufferComparator60);
        org.junit.Assert.assertNotNull(compositeType61);
        org.junit.Assert.assertNotNull(byteBufferArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(compositeType67);
        org.junit.Assert.assertNotNull(byteBufferArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(compositeType73);
        org.junit.Assert.assertNotNull(byteBufferArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(iColumnArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(byteBufferComparator82);
        org.junit.Assert.assertNotNull(compositeType83);
        org.junit.Assert.assertNotNull(byteBufferArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(iColumnArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.offset;
        int int85 = compositeTypeIterator80.start;
        int int86 = compositeTypeIterator80.type;
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 67 + "'", int84 == 67);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray36);
        byte[] byteArray39 = comparators.Composite.serialize(objList38);
        java.util.stream.Stream<java.lang.Object> objStream40 = objList38.parallelStream();
        comparators.Composite composite41 = new comparators.Composite(objList38);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        boolean boolean50 = comparators.Composite.validate((int) ' ', byteArray47, true);
        boolean boolean51 = composite41.contains((java.lang.Object) boolean50);
        java.util.Spliterator<java.lang.Object> objSpliterator52 = composite41.spliterator();
        byte[] byteArray53 = composite41.bytes;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = composite23.retainAll((java.util.Collection<java.lang.Object>) composite41);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objSpliterator52);
        org.junit.Assert.assertNull(byteArray53);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        comparators.Composite composite34 = composite28.addBool(true);
        comparators.Composite composite36 = composite34.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream37 = composite34.byteStream;
        java.nio.ByteBuffer byteBuffer38 = compositeSerializer0.toByteBuffer(composite34);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        java.lang.Object[] objArray49 = composite48.toArray();
        int int50 = composite48.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream51 = composite48.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream52 = composite48.parallelStream();
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        java.util.List<java.lang.Object> objList59 = comparators.Composite.deserialize(byteArray57);
        byte[] byteArray60 = comparators.Composite.serialize(objList59);
        java.util.stream.Stream<java.lang.Object> objStream61 = objList59.parallelStream();
        comparators.Composite composite62 = new comparators.Composite(objList59);
        java.lang.Object[] objArray63 = composite62.toArray();
        int int64 = composite62.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream65 = composite62.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream66 = composite62.parallelStream();
        int int67 = composite62.startOffset;
        int int68 = composite48.compareTo(composite62);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        java.util.List<java.lang.Object> objList75 = comparators.Composite.deserialize(byteArray73);
        byte[] byteArray76 = comparators.Composite.serialize(objList75);
        java.util.stream.Stream<java.lang.Object> objStream77 = objList75.parallelStream();
        comparators.Composite composite78 = new comparators.Composite(objList75);
        java.util.RandomAccess[] randomAccessArray79 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray80 = composite78.toArray(randomAccessArray79);
        comparators.Composite composite82 = composite78.addLong((long) 67);
        byte[] byteArray83 = composite82.serialize();
        java.util.List<java.lang.Object> objList84 = comparators.Composite.deserialize(byteArray83);
        comparators.Composite composite85 = new comparators.Composite(byteArray83);
        boolean boolean86 = composite62.equals((java.lang.Object) byteArray83);
        comparators.Composite composite87 = compositeSerializer0.fromBytes(byteArray83);
        byte[] byteArray91 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray92 = new byte[] {};
        int int93 = comparators.Composite.compare(byteArray91, byteArray92);
        java.util.List<java.lang.Object> objList94 = comparators.Composite.deserialize(byteArray92);
        byte[] byteArray95 = comparators.Composite.serialize(objList94);
        java.util.stream.Stream<java.lang.Object> objStream96 = objList94.parallelStream();
        comparators.Composite composite97 = new comparators.Composite(objList94);
        byte[] byteArray98 = compositeSerializer0.toBytes(composite97);
        java.lang.Class<?> wildcardClass99 = compositeSerializer0.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArrayOutputStream37);
        org.junit.Assert.assertEquals(byteArrayOutputStream37.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(objList75);
        org.junit.Assert.assertNull(byteArray76);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(randomAccessArray79);
        org.junit.Assert.assertNotNull(randomAccessArray80);
        org.junit.Assert.assertNotNull(composite82);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(composite87);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(objList94);
        org.junit.Assert.assertNull(byteArray95);
        org.junit.Assert.assertNotNull(objStream96);
        org.junit.Assert.assertNull(byteArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        comparators.Composite composite34 = composite28.addBool(true);
        comparators.Composite composite36 = composite34.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream37 = composite34.byteStream;
        java.nio.ByteBuffer byteBuffer38 = compositeSerializer0.toByteBuffer(composite34);
        comparators.Composite composite39 = composite34.addMatchMaximum();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArrayOutputStream37);
        org.junit.Assert.assertEquals(byteArrayOutputStream37.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(composite39);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator17 = compositeType12.indexComparator;
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray19 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList20 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList20, byteBufferArray19);
        java.lang.String str22 = compositeType18.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList20);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator23 = compositeType12.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType18);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.lang.Object[] objArray34 = composite33.toArray();
        int int35 = composite33.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream36 = composite33.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream37 = composite33.parallelStream();
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        java.util.List<java.lang.Object> objList44 = comparators.Composite.deserialize(byteArray42);
        byte[] byteArray45 = comparators.Composite.serialize(objList44);
        java.util.stream.Stream<java.lang.Object> objStream46 = objList44.parallelStream();
        comparators.Composite composite47 = new comparators.Composite(objList44);
        java.lang.Object[] objArray48 = composite47.toArray();
        int int49 = composite47.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream50 = composite47.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream51 = composite47.parallelStream();
        int int52 = composite47.startOffset;
        int int53 = composite33.compareTo(composite47);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray58 = new byte[] {};
        int int59 = comparators.Composite.compare(byteArray57, byteArray58);
        comparators.Composite composite60 = composite33.addBytes(byteArray58);
        java.nio.ByteBuffer byteBuffer61 = composite60.serializeToByteBuffer();
        compositeType18.validate(byteBuffer61);
        comparators.Composite composite63 = new comparators.Composite(byteBuffer61);
        java.nio.ByteBuffer byteBuffer64 = null;
        int int65 = compositeType6.compare(byteBuffer61, byteBuffer64);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator66 = compositeType6.getReverseComparator();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(indexInfoComparator17);
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteBufferArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteBufferComparator23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(objList44);
        org.junit.Assert.assertNull(byteArray45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(composite60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(byteBufferComparator66);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.len = 58;
        compositeTypeIterator80.offset = (byte) -1;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        comparators.Composite composite34 = composite28.addBool(true);
        comparators.Composite composite36 = composite34.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream37 = composite34.byteStream;
        java.nio.ByteBuffer byteBuffer38 = compositeSerializer0.toByteBuffer(composite34);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        java.lang.Object[] objArray49 = composite48.toArray();
        int int50 = composite48.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream51 = composite48.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream52 = composite48.parallelStream();
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        java.util.List<java.lang.Object> objList59 = comparators.Composite.deserialize(byteArray57);
        byte[] byteArray60 = comparators.Composite.serialize(objList59);
        java.util.stream.Stream<java.lang.Object> objStream61 = objList59.parallelStream();
        comparators.Composite composite62 = new comparators.Composite(objList59);
        java.lang.Object[] objArray63 = composite62.toArray();
        int int64 = composite62.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream65 = composite62.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream66 = composite62.parallelStream();
        int int67 = composite62.startOffset;
        int int68 = composite48.compareTo(composite62);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        comparators.Composite composite75 = composite48.addBytes(byteArray73);
        java.nio.ByteBuffer byteBuffer76 = composite75.serializeToByteBuffer();
        comparators.Composite composite77 = compositeSerializer0.fromByteBuffer(byteBuffer76);
        boolean boolean79 = comparators.Composite.validate(byteBuffer76, true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArrayOutputStream37);
        org.junit.Assert.assertEquals(byteArrayOutputStream37.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(composite77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        int int10 = composite9.size();
        composite9.clear();
        byte[] byteArray13 = null;
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        int int27 = comparators.Composite.compare(byteArray18, byteArray25);
        int int28 = comparators.Composite.compare((int) (byte) 1, byteArray13, 10, byteArray18);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        int int41 = comparators.Composite.compare(byteArray32, byteArray39);
        java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(byteArray39);
        int int43 = comparators.Composite.compare(byteArray18, byteArray39);
        java.util.List<java.lang.Object> objList44 = comparators.Composite.deserialize(byteArray39);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean45 = composite9.removeAll((java.util.Collection<java.lang.Object>) objList44);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(objList42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(objList44);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        comparators.Composite composite19 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray20 = compositeSerializer0.toBytes(composite19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        java.lang.Object[] objArray13 = composite9.toArray();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        int int26 = comparators.Composite.compare(byteArray17, byteArray24);
        composite9.bytes = byteArray24;
        java.util.Iterator<java.lang.Object> objItor28 = composite9.iterator();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objItor28);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (short) 1;
        java.lang.String str3 = placeholder0.toString();
        boolean boolean5 = placeholder0.equals((java.lang.Object) 10L);
        placeholder0.type = 58;
        java.lang.String str8 = placeholder0.toString();
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Placeholder(1)" + "'", str3, "Placeholder(1)");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Placeholder(58)" + "'", str8, "Placeholder(58)");
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        java.util.List<java.lang.Object> objList0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer1 = comparators.Composite.serializeToByteBuffer(objList0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        java.lang.Object[] objArray13 = composite9.toArray();
        java.util.Spliterator<java.lang.Object> objSpliterator14 = composite9.spliterator();
        byte[] byteArray15 = composite9.bytes;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objSpliterator14);
        org.junit.Assert.assertNull(byteArray15);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        boolean boolean6 = comparators.Composite.isValidType((java.lang.Object) compositeType0);
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator12 = compositeType7.indexComparator;
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator18 = compositeType7.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType13);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite42.startOffset;
        int int48 = composite28.compareTo(composite42);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        comparators.Composite composite55 = composite28.addBytes(byteArray53);
        java.nio.ByteBuffer byteBuffer56 = composite55.serializeToByteBuffer();
        compositeType13.validate(byteBuffer56);
        comparators.CompositeType compositeType58 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray59 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList60 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60, byteBufferArray59);
        java.lang.String str62 = compositeType58.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60);
        org.apache.cassandra.db.IColumn[] iColumnArray63 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList64 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList64, iColumnArray63);
        java.lang.String str66 = compositeType58.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList64);
        org.apache.cassandra.db.IColumn[] iColumnArray67 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList68 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68, iColumnArray67);
        java.lang.String str70 = compositeType58.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68);
        java.lang.String str71 = compositeType13.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68);
        java.lang.String str72 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68);
        org.apache.cassandra.db.IColumn[] iColumnArray73 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList74 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList74, iColumnArray73);
        java.lang.String str76 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList74);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(indexInfoComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteBufferComparator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(compositeType58);
        org.junit.Assert.assertNotNull(byteBufferArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(iColumnArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(iColumnArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(iColumnArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        java.lang.Object[] objArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer1 = comparators.Composite.serializeToByteBuffer(objArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        int int10 = composite9.size();
        composite9.clear();
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        java.util.stream.Stream<java.lang.Object> objStream20 = objList18.parallelStream();
        comparators.Composite composite21 = new comparators.Composite(objList18);
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        boolean boolean30 = comparators.Composite.validate((int) ' ', byteArray27, true);
        boolean boolean31 = composite21.contains((java.lang.Object) boolean30);
        java.util.stream.Stream<java.lang.Object> objStream32 = composite21.parallelStream();
        composite21.startOffset = 8;
        comparators.Composite composite36 = composite21.addAscii("hi!");
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite21);
        java.util.UUID uUID38 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite39 = composite21.addTimeUUID(uUID38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        comparators.Composite composite38 = composite11.addBytes(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = composite38.serializeToByteBuffer();
        compositeType1.validate(byteBuffer39);
        boolean boolean41 = comparators.Composite.validate(byteBuffer39);
        comparators.Composite composite42 = new comparators.Composite(byteBuffer39);
        java.nio.ByteBuffer byteBuffer43 = null;
        int int44 = compositeType0.compare(byteBuffer39, byteBuffer43);
        comparators.Composite composite45 = new comparators.Composite(byteBuffer39);
        comparators.Composite composite46 = new comparators.Composite(byteBuffer39);
        byte[] byteArray50 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray51 = new byte[] {};
        int int52 = comparators.Composite.compare(byteArray50, byteArray51);
        java.util.List<java.lang.Object> objList53 = comparators.Composite.deserialize(byteArray51);
        byte[] byteArray54 = comparators.Composite.serialize(objList53);
        java.util.stream.Stream<java.lang.Object> objStream55 = objList53.parallelStream();
        comparators.Composite composite56 = new comparators.Composite(objList53);
        java.lang.Object[] objArray57 = composite56.toArray();
        int int58 = composite56.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream59 = composite56.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream60 = composite56.parallelStream();
        comparators.Composite composite62 = composite56.addBool(true);
        java.util.Iterator<java.lang.Object> objItor63 = composite56.iterator();
        comparators.Composite composite65 = composite56.addReal((java.lang.Double) 100.0d);
        byte[] byteArray69 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray70 = new byte[] {};
        int int71 = comparators.Composite.compare(byteArray69, byteArray70);
        java.util.List<java.lang.Object> objList72 = comparators.Composite.deserialize(byteArray70);
        byte[] byteArray73 = comparators.Composite.serialize(objList72);
        java.util.stream.Stream<java.lang.Object> objStream74 = objList72.parallelStream();
        comparators.Composite composite75 = new comparators.Composite(objList72);
        java.lang.Object[] objArray76 = composite75.toArray();
        int int77 = composite75.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream78 = composite75.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream79 = composite75.parallelStream();
        int int80 = composite75.startOffset;
        composite75.clear();
        boolean boolean82 = composite65.containsAll((java.util.Collection<java.lang.Object>) composite75);
        int int83 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream84 = composite65.stream();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean85 = composite46.removeAll((java.util.Collection<java.lang.Object>) composite65);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(objList53);
        org.junit.Assert.assertNull(byteArray54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(composite62);
        org.junit.Assert.assertNotNull(objItor63);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objList72);
        org.junit.Assert.assertNull(byteArray73);
        org.junit.Assert.assertNotNull(objStream74);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(objStream79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(objStream84);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.lang.String str17 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer19 = compositeType6.fromString("Placeholder(100)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MINIMUM;
        placeholder0.type = '#';
        int int3 = placeholder0.type;
        placeholder0.type = 13;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        comparators.Composite composite0 = new comparators.Composite();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        int int15 = composite0.compareTo(composite10);
        java.io.DataOutputStream dataOutputStream16 = composite10.out;
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        java.lang.String str55 = composite17.toString();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = composite10.removeAll((java.util.Collection<java.lang.Object>) composite17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(dataOutputStream16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(9);
        comparators.hector.CompositeListSerializer compositeListSerializer22 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        java.util.List<java.lang.Object> objList29 = comparators.Composite.deserialize(byteArray27);
        byte[] byteArray30 = comparators.Composite.serialize(objList29);
        java.util.stream.Stream<java.lang.Object> objStream31 = objList29.parallelStream();
        comparators.Composite composite32 = new comparators.Composite(objList29);
        byte[] byteArray33 = compositeListSerializer22.toBytes(objList29);
        int int35 = compositeListSerializer22.computeInitialHashSize((int) ' ');
        comparators.hector.CompositeListSerializer compositeListSerializer36 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType37 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray38 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList39 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList39, byteBufferArray38);
        java.lang.String str41 = compositeType37.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList39);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator42 = compositeType37.indexComparator;
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray44 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList45 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45, byteBufferArray44);
        java.lang.String str47 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator48 = compositeType37.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType43);
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray50 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList51 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51, byteBufferArray50);
        java.lang.String str53 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        java.lang.String str54 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        java.util.List<java.util.List<java.lang.Object>> objListList55 = compositeListSerializer36.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList51);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet56 = compositeListSerializer22.toBytesSet(objListList55);
        java.util.List<java.nio.ByteBuffer> byteBufferList57 = compositeListSerializer0.toBytesList(objListList55);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray62 = new byte[] {};
        int int63 = comparators.Composite.compare(byteArray61, byteArray62);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray68 = new byte[] {};
        int int69 = comparators.Composite.compare(byteArray67, byteArray68);
        int int70 = comparators.Composite.compare(byteArray61, byteArray68);
        java.util.List<java.lang.Object> objList71 = compositeListSerializer0.fromBytes(byteArray68);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(objList29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 43 + "'", int35 == 43);
        org.junit.Assert.assertNotNull(compositeType37);
        org.junit.Assert.assertNotNull(byteBufferArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(indexInfoComparator42);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(byteBufferArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteBufferComparator48);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(objListList55);
        org.junit.Assert.assertNotNull(byteBufferSet56);
        org.junit.Assert.assertNotNull(byteBufferList57);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(objList71);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        java.lang.Object[][][] objArray32 = new java.lang.Object[][][] {};
        java.lang.Object[][][] objArray33 = composite9.toArray(objArray32);
        byte[] byteArray34 = comparators.Composite.serialize((java.lang.Object[]) objArray32);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNull(byteArray34);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        byte[] byteArray82 = compositeTypeIterator80.bytes;
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray87 = new byte[] {};
        int int88 = comparators.Composite.compare(byteArray86, byteArray87);
        byte[] byteArray92 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray93 = new byte[] {};
        int int94 = comparators.Composite.compare(byteArray92, byteArray93);
        int int95 = comparators.Composite.compare(byteArray86, byteArray93);
        boolean boolean96 = comparators.Composite.isValidType((java.lang.Object) byteArray86);
        compositeTypeIterator80.bytes = byteArray86;
        compositeTypeIterator80.start = (byte) 1;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        boolean boolean6 = comparators.Composite.isValidType((java.lang.Object) compositeType0);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator7 = compositeType0.reversed();
        java.lang.Class<?> wildcardClass8 = byteBufferComparator7.getClass();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBufferComparator7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        int int1 = placeholder0.type;
        placeholder0.type = 6;
        java.lang.String str4 = placeholder0.toString();
        java.lang.String str5 = placeholder0.toString();
        org.junit.Assert.assertNotNull(placeholder0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 13 + "'", int1 == 13);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Placeholder(6)" + "'", str4, "Placeholder(6)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Placeholder(6)" + "'", str5, "Placeholder(6)");
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        int int41 = composite39.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream42 = composite39.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream43 = composite39.parallelStream();
        int int44 = composite39.startOffset;
        int int45 = composite25.compareTo(composite39);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        comparators.Composite composite52 = composite25.addBytes(byteArray50);
        java.nio.ByteBuffer byteBuffer53 = composite52.serializeToByteBuffer();
        compositeType15.validate(byteBuffer53);
        boolean boolean55 = comparators.Composite.validate(byteBuffer53);
        comparators.Composite composite56 = new comparators.Composite(byteBuffer53);
        comparators.Composite composite57 = new comparators.Composite(byteBuffer53);
        boolean boolean58 = composite9.addAll((java.util.Collection<java.lang.Object>) composite57);
        comparators.Composite composite60 = composite9.addAscii("Placeholder(100)");
        java.lang.Object obj61 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = composite60.remove(obj61);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(composite52);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(composite60);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        byte[] byteArray82 = compositeTypeIterator80.bytes;
        int int83 = compositeTypeIterator80.type;
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray88 = new byte[] {};
        int int89 = comparators.Composite.compare(byteArray87, byteArray88);
        byte[] byteArray93 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray94 = new byte[] {};
        int int95 = comparators.Composite.compare(byteArray93, byteArray94);
        int int96 = comparators.Composite.compare(byteArray87, byteArray94);
        compositeTypeIterator80.bytes = byteArray87;
        boolean boolean98 = compositeTypeIterator80.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj99 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        composite9.startOffset = (byte) 1;
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer17 = composite9.serializeToByteBuffer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objItor16);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        comparators.CompositeType compositeType30 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray31 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList32 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32, byteBufferArray31);
        java.lang.String str34 = compositeType30.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator35 = compositeType30.indexComparator;
        comparators.CompositeType compositeType36 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray37 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList38 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38, byteBufferArray37);
        java.lang.String str40 = compositeType36.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator41 = compositeType30.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType36);
        comparators.CompositeType compositeType42 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray43 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList44 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44, byteBufferArray43);
        java.lang.String str46 = compositeType42.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44);
        java.lang.String str47 = compositeType36.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44);
        comparators.CompositeType compositeType48 = comparators.CompositeType.instance;
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteArray53);
        byte[] byteArray56 = comparators.Composite.serialize(objList55);
        java.util.stream.Stream<java.lang.Object> objStream57 = objList55.parallelStream();
        comparators.Composite composite58 = new comparators.Composite(objList55);
        java.lang.Object[] objArray59 = composite58.toArray();
        int int60 = composite58.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream61 = composite58.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream62 = composite58.parallelStream();
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray67 = new byte[] {};
        int int68 = comparators.Composite.compare(byteArray66, byteArray67);
        java.util.List<java.lang.Object> objList69 = comparators.Composite.deserialize(byteArray67);
        byte[] byteArray70 = comparators.Composite.serialize(objList69);
        java.util.stream.Stream<java.lang.Object> objStream71 = objList69.parallelStream();
        comparators.Composite composite72 = new comparators.Composite(objList69);
        java.lang.Object[] objArray73 = composite72.toArray();
        int int74 = composite72.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream75 = composite72.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream76 = composite72.parallelStream();
        int int77 = composite72.startOffset;
        int int78 = composite58.compareTo(composite72);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray83 = new byte[] {};
        int int84 = comparators.Composite.compare(byteArray82, byteArray83);
        comparators.Composite composite85 = composite58.addBytes(byteArray83);
        java.nio.ByteBuffer byteBuffer86 = composite85.serializeToByteBuffer();
        compositeType48.validate(byteBuffer86);
        java.lang.String str88 = compositeType36.getString(byteBuffer86);
        comparators.Composite composite89 = new comparators.Composite(byteBuffer86);
        java.util.Iterator<java.lang.Object> objItor90 = composite89.iterator();
        comparators.Composite.Placeholder placeholder91 = comparators.Composite.MATCH_MAXIMUM;
        int int92 = placeholder91.type;
        placeholder91.type = 6;
        boolean boolean95 = composite89.contains((java.lang.Object) placeholder91);
        int int96 = composite23.compareTo(composite89);
        boolean boolean97 = composite89.isEmpty();
        java.lang.Class<?> wildcardClass98 = composite89.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(compositeType30);
        org.junit.Assert.assertNotNull(byteBufferArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(indexInfoComparator35);
        org.junit.Assert.assertNotNull(compositeType36);
        org.junit.Assert.assertNotNull(byteBufferArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteBufferComparator41);
        org.junit.Assert.assertNotNull(compositeType42);
        org.junit.Assert.assertNotNull(byteBufferArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(compositeType48);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(objList69);
        org.junit.Assert.assertNull(byteArray70);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(objStream75);
        org.junit.Assert.assertNotNull(objStream76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(composite85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(objItor90);
        org.junit.Assert.assertNotNull(placeholder91);
// flaky:         org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.offset;
        int int85 = compositeTypeIterator80.start;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj86 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 67 + "'", int84 == 67);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        int int15 = composite10.startOffset;
        composite10.clear();
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.util.RandomAccess[] randomAccessArray27 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray28 = composite26.toArray(randomAccessArray27);
        comparators.Composite composite30 = composite26.addLong((long) 67);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray36);
        byte[] byteArray39 = comparators.Composite.serialize(objList38);
        java.util.stream.Stream<java.lang.Object> objStream40 = objList38.parallelStream();
        comparators.Composite composite41 = new comparators.Composite(objList38);
        java.lang.Object[] objArray42 = composite41.toArray();
        int int43 = composite41.startOffset;
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        java.util.List<java.lang.Object> objList50 = comparators.Composite.deserialize(byteArray48);
        byte[] byteArray51 = comparators.Composite.serialize(objList50);
        java.util.stream.Stream<java.lang.Object> objStream52 = objList50.parallelStream();
        comparators.Composite composite53 = new comparators.Composite(objList50);
        java.lang.Object[] objArray54 = composite53.toArray();
        comparators.Composite.Placeholder placeholder58 = comparators.Composite.MATCH_MAXIMUM;
        int int59 = placeholder58.type;
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(byteArray64);
        byte[] byteArray67 = comparators.Composite.serialize(objList66);
        comparators.Composite.Placeholder placeholder69 = comparators.Composite.MATCH_MAXIMUM;
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray75 = new byte[] {};
        int int76 = comparators.Composite.compare(byteArray74, byteArray75);
        java.util.List<java.lang.Object> objList77 = comparators.Composite.deserialize(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray82 = new byte[] {};
        int int83 = comparators.Composite.compare(byteArray81, byteArray82);
        java.util.List<java.lang.Object> objList84 = comparators.Composite.deserialize(byteArray82);
        comparators.CompositeType compositeType86 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray87 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList88 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList88, byteBufferArray87);
        java.lang.String str90 = compositeType86.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList88);
        java.lang.Object[] objArray91 = new java.lang.Object[] { 5, composite10, composite30, "", int43, composite53, 4, false, 10, int59, byteArray67, 100.0d, placeholder69, 0L, objList77, objList84, "hi!", compositeType86 };
        java.util.ArrayList<java.lang.Object> objList92 = new java.util.ArrayList<java.lang.Object>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<java.lang.Object>) objList92, objArray91);
        java.util.Spliterator<java.lang.Object> objSpliterator94 = objList92.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray95 = comparators.Composite.serialize((java.util.List<java.lang.Object>) objList92);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(randomAccessArray27);
        org.junit.Assert.assertNotNull(randomAccessArray28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(objList50);
        org.junit.Assert.assertNull(byteArray51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(placeholder58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 6 + "'", int59 == 6);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(objList66);
        org.junit.Assert.assertNull(byteArray67);
        org.junit.Assert.assertNotNull(placeholder69);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(objList77);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(objList84);
        org.junit.Assert.assertNotNull(compositeType86);
        org.junit.Assert.assertNotNull(byteBufferArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(objSpliterator94);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.offset;
        int int85 = compositeTypeIterator80.type;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj86 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 67 + "'", int84 == 67);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        comparators.Composite.Placeholder placeholder0 = null;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator1 = compositeType0.indexComparator;
        comparators.CompositeType compositeType2 = new comparators.CompositeType();
        comparators.CompositeType compositeType3 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray4 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList5 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList5, byteBufferArray4);
        java.lang.String str7 = compositeType3.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList5);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator8 = compositeType3.indexComparator;
        comparators.CompositeType compositeType9 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray10 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList11 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11, byteBufferArray10);
        java.lang.String str13 = compositeType9.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator14 = compositeType3.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType9);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        int int40 = composite38.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream41 = composite38.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream42 = composite38.parallelStream();
        int int43 = composite38.startOffset;
        int int44 = composite24.compareTo(composite38);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray49 = new byte[] {};
        int int50 = comparators.Composite.compare(byteArray48, byteArray49);
        comparators.Composite composite51 = composite24.addBytes(byteArray49);
        java.nio.ByteBuffer byteBuffer52 = composite51.serializeToByteBuffer();
        compositeType9.validate(byteBuffer52);
        java.lang.String str54 = compositeType2.getString(byteBuffer52);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteBuffer52);
        compositeType0.validate(byteBuffer52);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer58 = compositeType0.fromString("UTF-8");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexInfoComparator1);
        org.junit.Assert.assertNotNull(compositeType3);
        org.junit.Assert.assertNotNull(byteBufferArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(indexInfoComparator8);
        org.junit.Assert.assertNotNull(compositeType9);
        org.junit.Assert.assertNotNull(byteBufferArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteBufferComparator14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(composite51);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(objList55);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        comparators.hector.CompositeListSerializer compositeListSerializer12 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator18 = compositeType13.indexComparator;
        comparators.CompositeType compositeType19 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray20 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList21 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList21, byteBufferArray20);
        java.lang.String str23 = compositeType19.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList21);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator24 = compositeType13.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType19);
        comparators.CompositeType compositeType25 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray26 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList27 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList27, byteBufferArray26);
        java.lang.String str29 = compositeType25.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList27);
        java.lang.String str30 = compositeType19.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList27);
        java.util.List<java.util.List<java.lang.Object>> objListList31 = compositeListSerializer12.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList27);
        int int33 = compositeListSerializer12.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer34 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator40 = compositeType35.indexComparator;
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray42 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList43 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43, byteBufferArray42);
        java.lang.String str45 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator46 = compositeType35.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType41);
        comparators.CompositeType compositeType47 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray48 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList49 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList49, byteBufferArray48);
        java.lang.String str51 = compositeType47.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList49);
        java.lang.String str52 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList49);
        java.util.List<java.util.List<java.lang.Object>> objListList53 = compositeListSerializer34.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList49);
        java.util.List<java.nio.ByteBuffer> byteBufferList54 = compositeListSerializer12.toBytesList(objListList53);
        comparators.hector.CompositeListSerializer compositeListSerializer55 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType56 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray57 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList58 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58, byteBufferArray57);
        java.lang.String str60 = compositeType56.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator61 = compositeType56.indexComparator;
        comparators.CompositeType compositeType62 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray63 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList64 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64, byteBufferArray63);
        java.lang.String str66 = compositeType62.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator67 = compositeType56.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType62);
        comparators.CompositeType compositeType68 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray69 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList70 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList70, byteBufferArray69);
        java.lang.String str72 = compositeType68.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList70);
        java.lang.String str73 = compositeType62.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList70);
        java.util.List<java.util.List<java.lang.Object>> objListList74 = compositeListSerializer55.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList70);
        int int76 = compositeListSerializer55.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer77 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType78 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray79 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList80 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList80, byteBufferArray79);
        java.lang.String str82 = compositeType78.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList80);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator83 = compositeType78.indexComparator;
        comparators.CompositeType compositeType84 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray85 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList86 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList86, byteBufferArray85);
        java.lang.String str88 = compositeType84.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList86);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator89 = compositeType78.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType84);
        comparators.CompositeType compositeType90 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray91 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList92 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList92, byteBufferArray91);
        java.lang.String str94 = compositeType90.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList92);
        java.lang.String str95 = compositeType84.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList92);
        java.util.List<java.util.List<java.lang.Object>> objListList96 = compositeListSerializer77.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList92);
        java.util.List<java.nio.ByteBuffer> byteBufferList97 = compositeListSerializer55.toBytesList(objListList96);
        java.util.List<java.nio.ByteBuffer> byteBufferList98 = compositeListSerializer12.toBytesList(objListList96);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet99 = compositeListSerializer0.toBytesSet(objListList96);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(indexInfoComparator18);
        org.junit.Assert.assertNotNull(compositeType19);
        org.junit.Assert.assertNotNull(byteBufferArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteBufferComparator24);
        org.junit.Assert.assertNotNull(compositeType25);
        org.junit.Assert.assertNotNull(byteBufferArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(objListList31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(indexInfoComparator40);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteBufferArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteBufferComparator46);
        org.junit.Assert.assertNotNull(compositeType47);
        org.junit.Assert.assertNotNull(byteBufferArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(objListList53);
        org.junit.Assert.assertNotNull(byteBufferList54);
        org.junit.Assert.assertNotNull(compositeType56);
        org.junit.Assert.assertNotNull(byteBufferArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(indexInfoComparator61);
        org.junit.Assert.assertNotNull(compositeType62);
        org.junit.Assert.assertNotNull(byteBufferArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(byteBufferComparator67);
        org.junit.Assert.assertNotNull(compositeType68);
        org.junit.Assert.assertNotNull(byteBufferArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(objListList74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 6 + "'", int76 == 6);
        org.junit.Assert.assertNotNull(compositeType78);
        org.junit.Assert.assertNotNull(byteBufferArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(indexInfoComparator83);
        org.junit.Assert.assertNotNull(compositeType84);
        org.junit.Assert.assertNotNull(byteBufferArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(byteBufferComparator89);
        org.junit.Assert.assertNotNull(compositeType90);
        org.junit.Assert.assertNotNull(byteBufferArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertNotNull(objListList96);
        org.junit.Assert.assertNotNull(byteBufferList97);
        org.junit.Assert.assertNotNull(byteBufferList98);
        org.junit.Assert.assertNotNull(byteBufferSet99);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        comparators.CompositeType compositeType19 = comparators.CompositeType.instance;
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        int int48 = composite43.startOffset;
        int int49 = composite29.compareTo(composite43);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        comparators.Composite composite56 = composite29.addBytes(byteArray54);
        java.nio.ByteBuffer byteBuffer57 = composite56.serializeToByteBuffer();
        compositeType19.validate(byteBuffer57);
        boolean boolean59 = comparators.Composite.validate(byteBuffer57);
        boolean boolean60 = comparators.Composite.validate(byteBuffer57);
        comparators.Composite composite61 = compositeSerializer0.fromByteBuffer(byteBuffer57);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        java.util.List<java.lang.Object> objList68 = comparators.Composite.deserialize(byteArray66);
        byte[] byteArray69 = comparators.Composite.serialize(objList68);
        java.util.stream.Stream<java.lang.Object> objStream70 = objList68.parallelStream();
        comparators.Composite composite71 = new comparators.Composite(objList68);
        java.util.RandomAccess[] randomAccessArray72 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray73 = composite71.toArray(randomAccessArray72);
        comparators.Composite composite75 = composite71.addLong((long) 67);
        byte[] byteArray76 = composite75.serialize();
        java.util.List<java.lang.Object> objList77 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite composite78 = new comparators.Composite(byteArray76);
        comparators.Composite composite79 = compositeSerializer0.fromBytes(byteArray76);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray84 = new byte[] {};
        int int85 = comparators.Composite.compare(byteArray83, byteArray84);
        comparators.Composite composite86 = compositeSerializer0.fromBytes(byteArray84);
        java.nio.ByteBuffer byteBuffer87 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite88 = compositeSerializer0.fromByteBuffer(byteBuffer87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(composite56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(objList68);
        org.junit.Assert.assertNull(byteArray69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(randomAccessArray72);
        org.junit.Assert.assertNotNull(randomAccessArray73);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList77);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(composite86);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        boolean boolean6 = comparators.Composite.isValidType((java.lang.Object) indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        boolean boolean6 = comparators.Composite.isValidType((java.lang.Object) compositeType0);
        org.apache.cassandra.db.IColumn[] iColumnArray7 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList8 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList8, iColumnArray7);
        java.lang.String str10 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList8);
        comparators.CompositeType compositeType11 = new comparators.CompositeType();
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType12.validate(byteBuffer50);
        boolean boolean52 = comparators.Composite.validate(byteBuffer50);
        comparators.Composite composite53 = new comparators.Composite(byteBuffer50);
        java.nio.ByteBuffer byteBuffer54 = null;
        int int55 = compositeType11.compare(byteBuffer50, byteBuffer54);
        comparators.Composite composite56 = new comparators.Composite(byteBuffer50);
        comparators.Composite composite57 = new comparators.Composite(byteBuffer50);
        java.lang.String str58 = compositeType0.getString(byteBuffer50);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer60 = compositeType0.fromString("true");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(iColumnArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType6.reversed();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = byteBufferComparator12.reversed();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(byteBufferComparator13);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        byte[] byteArray82 = compositeTypeIterator80.bytes;
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray87 = new byte[] {};
        int int88 = comparators.Composite.compare(byteArray86, byteArray87);
        byte[] byteArray92 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray93 = new byte[] {};
        int int94 = comparators.Composite.compare(byteArray92, byteArray93);
        int int95 = comparators.Composite.compare(byteArray86, byteArray93);
        boolean boolean96 = comparators.Composite.isValidType((java.lang.Object) byteArray86);
        compositeTypeIterator80.bytes = byteArray86;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj98 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        comparators.Composite composite34 = composite28.addBool(true);
        comparators.Composite composite36 = composite34.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream37 = composite34.byteStream;
        java.nio.ByteBuffer byteBuffer38 = compositeSerializer0.toByteBuffer(composite34);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        java.lang.Object[] objArray49 = composite48.toArray();
        int int50 = composite48.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream51 = composite48.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream52 = composite48.parallelStream();
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        java.util.List<java.lang.Object> objList59 = comparators.Composite.deserialize(byteArray57);
        byte[] byteArray60 = comparators.Composite.serialize(objList59);
        java.util.stream.Stream<java.lang.Object> objStream61 = objList59.parallelStream();
        comparators.Composite composite62 = new comparators.Composite(objList59);
        java.lang.Object[] objArray63 = composite62.toArray();
        int int64 = composite62.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream65 = composite62.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream66 = composite62.parallelStream();
        int int67 = composite62.startOffset;
        int int68 = composite48.compareTo(composite62);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        java.util.List<java.lang.Object> objList75 = comparators.Composite.deserialize(byteArray73);
        byte[] byteArray76 = comparators.Composite.serialize(objList75);
        java.util.stream.Stream<java.lang.Object> objStream77 = objList75.parallelStream();
        comparators.Composite composite78 = new comparators.Composite(objList75);
        java.util.RandomAccess[] randomAccessArray79 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray80 = composite78.toArray(randomAccessArray79);
        comparators.Composite composite82 = composite78.addLong((long) 67);
        byte[] byteArray83 = composite82.serialize();
        java.util.List<java.lang.Object> objList84 = comparators.Composite.deserialize(byteArray83);
        comparators.Composite composite85 = new comparators.Composite(byteArray83);
        boolean boolean86 = composite62.equals((java.lang.Object) byteArray83);
        comparators.Composite composite87 = compositeSerializer0.fromBytes(byteArray83);
        byte[] byteArray91 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray92 = new byte[] {};
        int int93 = comparators.Composite.compare(byteArray91, byteArray92);
        java.util.List<java.lang.Object> objList94 = comparators.Composite.deserialize(byteArray92);
        byte[] byteArray95 = comparators.Composite.serialize(objList94);
        java.util.stream.Stream<java.lang.Object> objStream96 = objList94.parallelStream();
        comparators.Composite composite97 = new comparators.Composite(objList94);
        byte[] byteArray98 = compositeSerializer0.toBytes(composite97);
        java.util.stream.Stream<java.lang.Object> objStream99 = composite97.parallelStream();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArrayOutputStream37);
        org.junit.Assert.assertEquals(byteArrayOutputStream37.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(objList75);
        org.junit.Assert.assertNull(byteArray76);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(randomAccessArray79);
        org.junit.Assert.assertNotNull(randomAccessArray80);
        org.junit.Assert.assertNotNull(composite82);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(composite87);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(objList94);
        org.junit.Assert.assertNull(byteArray95);
        org.junit.Assert.assertNotNull(objStream96);
        org.junit.Assert.assertNull(byteArray98);
        org.junit.Assert.assertNotNull(objStream99);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        org.apache.cassandra.db.IColumn[] iColumnArray9 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList10 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList10, iColumnArray9);
        java.lang.String str12 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList10);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        org.apache.cassandra.db.IColumn[] iColumnArray18 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList19 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList19, iColumnArray18);
        java.lang.String str21 = compositeType13.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList19);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType13.getReverseComparator();
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        org.apache.cassandra.db.IColumn[] iColumnArray28 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList29 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList29, iColumnArray28);
        java.lang.String str31 = compositeType23.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList29);
        java.lang.String str32 = compositeType13.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList29);
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator38 = compositeType33.indexComparator;
        comparators.CompositeType compositeType39 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray40 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList41 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41, byteBufferArray40);
        java.lang.String str43 = compositeType39.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator44 = compositeType33.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType39);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator45 = compositeType13.thenComparing(byteBufferComparator44);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator46 = compositeType0.thenComparing(byteBufferComparator44);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer48 = compositeType0.fromString("Placeholder(6)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(iColumnArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(iColumnArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(iColumnArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(indexInfoComparator38);
        org.junit.Assert.assertNotNull(compositeType39);
        org.junit.Assert.assertNotNull(byteBufferArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteBufferComparator44);
        org.junit.Assert.assertNotNull(byteBufferComparator45);
        org.junit.Assert.assertNotNull(byteBufferComparator46);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(9);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        byte[] byteArray30 = comparators.Composite.serialize(objList28);
        byte[] byteArray31 = compositeListSerializer0.toBytes(objList28);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray36);
        byte[] byteArray39 = comparators.Composite.serialize(objList38);
        java.util.stream.Stream<java.lang.Object> objStream40 = objList38.parallelStream();
        comparators.Composite composite41 = new comparators.Composite(objList38);
        java.lang.Object[] objArray42 = composite41.toArray();
        int int43 = composite41.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream44 = composite41.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream45 = composite41.parallelStream();
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        java.util.List<java.lang.Object> objList52 = comparators.Composite.deserialize(byteArray50);
        byte[] byteArray53 = comparators.Composite.serialize(objList52);
        java.util.stream.Stream<java.lang.Object> objStream54 = objList52.parallelStream();
        comparators.Composite composite55 = new comparators.Composite(objList52);
        java.lang.Object[] objArray56 = composite55.toArray();
        int int57 = composite55.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream58 = composite55.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream59 = composite55.parallelStream();
        int int60 = composite55.startOffset;
        int int61 = composite41.compareTo(composite55);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        comparators.Composite composite68 = composite41.addBytes(byteArray66);
        java.util.List<java.lang.Object> objList69 = comparators.Composite.deserialize(byteArray66);
        byte[] byteArray70 = compositeListSerializer0.toBytes(objList69);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(objList52);
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(composite68);
        org.junit.Assert.assertNotNull(objList69);
        org.junit.Assert.assertNull(byteArray70);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        comparators.CompositeType compositeType1 = new comparators.CompositeType();
        comparators.CompositeType compositeType2 = comparators.CompositeType.instance;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        java.util.List<java.lang.Object> objList9 = comparators.Composite.deserialize(byteArray7);
        byte[] byteArray10 = comparators.Composite.serialize(objList9);
        java.util.stream.Stream<java.lang.Object> objStream11 = objList9.parallelStream();
        comparators.Composite composite12 = new comparators.Composite(objList9);
        java.lang.Object[] objArray13 = composite12.toArray();
        int int14 = composite12.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream15 = composite12.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream16 = composite12.parallelStream();
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        int int31 = composite26.startOffset;
        int int32 = composite12.compareTo(composite26);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        comparators.Composite composite39 = composite12.addBytes(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = composite39.serializeToByteBuffer();
        compositeType2.validate(byteBuffer40);
        boolean boolean42 = comparators.Composite.validate(byteBuffer40);
        comparators.Composite composite43 = new comparators.Composite(byteBuffer40);
        java.nio.ByteBuffer byteBuffer44 = null;
        int int45 = compositeType1.compare(byteBuffer40, byteBuffer44);
        compositeType0.validate(byteBuffer40);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator47 = compositeType0.indexComparator;
        comparators.CompositeType compositeType48 = new comparators.CompositeType();
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        java.lang.Object[] objArray60 = composite59.toArray();
        int int61 = composite59.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream62 = composite59.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream63 = composite59.parallelStream();
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray68 = new byte[] {};
        int int69 = comparators.Composite.compare(byteArray67, byteArray68);
        java.util.List<java.lang.Object> objList70 = comparators.Composite.deserialize(byteArray68);
        byte[] byteArray71 = comparators.Composite.serialize(objList70);
        java.util.stream.Stream<java.lang.Object> objStream72 = objList70.parallelStream();
        comparators.Composite composite73 = new comparators.Composite(objList70);
        java.lang.Object[] objArray74 = composite73.toArray();
        int int75 = composite73.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream76 = composite73.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream77 = composite73.parallelStream();
        int int78 = composite73.startOffset;
        int int79 = composite59.compareTo(composite73);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray84 = new byte[] {};
        int int85 = comparators.Composite.compare(byteArray83, byteArray84);
        comparators.Composite composite86 = composite59.addBytes(byteArray84);
        java.nio.ByteBuffer byteBuffer87 = composite86.serializeToByteBuffer();
        compositeType49.validate(byteBuffer87);
        boolean boolean89 = comparators.Composite.validate(byteBuffer87);
        comparators.Composite composite90 = new comparators.Composite(byteBuffer87);
        java.nio.ByteBuffer byteBuffer91 = null;
        int int92 = compositeType48.compare(byteBuffer87, byteBuffer91);
        comparators.Composite composite93 = new comparators.Composite(byteBuffer87);
        comparators.Composite composite94 = new comparators.Composite(byteBuffer87);
        comparators.Composite composite95 = new comparators.Composite(byteBuffer87);
        compositeType0.validate(byteBuffer87);
        boolean boolean97 = comparators.Composite.validate(byteBuffer87);
        java.lang.Class<?> wildcardClass98 = byteBuffer87.getClass();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(compositeType2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(indexInfoComparator47);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(objList70);
        org.junit.Assert.assertNull(byteArray71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(objStream76);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite12 = new comparators.Composite((java.lang.Object[]) randomAccessArray11);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator18 = compositeType13.indexComparator;
        comparators.CompositeType compositeType19 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray20 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList21 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList21, byteBufferArray20);
        java.lang.String str23 = compositeType19.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList21);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator24 = compositeType13.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType19);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator25 = compositeType19.reversed();
        boolean boolean26 = composite12.contains((java.lang.Object) byteBufferComparator25);
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray32 = new byte[] {};
        int int33 = comparators.Composite.compare(byteArray31, byteArray32);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray32);
        byte[] byteArray35 = comparators.Composite.serialize(objList34);
        java.util.stream.Stream<java.lang.Object> objStream36 = objList34.parallelStream();
        comparators.Composite composite37 = new comparators.Composite(objList34);
        java.lang.Object[] objArray38 = composite37.toArray();
        int int39 = composite37.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream40 = composite37.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream41 = composite37.parallelStream();
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        int int56 = composite51.startOffset;
        int int57 = composite37.compareTo(composite51);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray62 = new byte[] {};
        int int63 = comparators.Composite.compare(byteArray61, byteArray62);
        comparators.Composite composite64 = composite37.addBytes(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = composite64.serializeToByteBuffer();
        compositeType27.validate(byteBuffer65);
        boolean boolean67 = comparators.Composite.validate(byteBuffer65);
        comparators.Composite composite68 = new comparators.Composite(byteBuffer65);
        comparators.Composite composite69 = new comparators.Composite(byteBuffer65);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = composite12.removeAll((java.util.Collection<java.lang.Object>) composite69);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(indexInfoComparator18);
        org.junit.Assert.assertNotNull(compositeType19);
        org.junit.Assert.assertNotNull(byteBufferArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteBufferComparator24);
        org.junit.Assert.assertNotNull(byteBufferComparator25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(composite64);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        java.lang.Class<?> wildcardClass23 = composite9.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.lang.String str17 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        comparators.hector.CompositeSerializer compositeSerializer18 = new comparators.hector.CompositeSerializer();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray29 = new byte[] {};
        int int30 = comparators.Composite.compare(byteArray28, byteArray29);
        int int31 = comparators.Composite.compare(byteArray22, byteArray29);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray29);
        comparators.Composite composite33 = compositeSerializer18.fromBytes(byteArray29);
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        comparators.Composite composite49 = composite43.addBool(true);
        java.util.Iterator<java.lang.Object> objItor50 = composite43.iterator();
        comparators.Composite composite52 = composite43.addReal((java.lang.Double) 100.0d);
        java.nio.ByteBuffer byteBuffer53 = compositeSerializer18.toByteBuffer(composite52);
        java.lang.String str54 = compositeType6.getString(byteBuffer53);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer56 = compositeType6.fromString("US-ASCII");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(objItor50);
        org.junit.Assert.assertNotNull(composite52);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "true" + "'", str54, "true");
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        boolean boolean39 = composite9.contains((java.lang.Object) (-1));
        comparators.CompositeType[] compositeTypeArray40 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.CompositeType[] compositeTypeArray41 = composite9.toArray(compositeTypeArray40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.util.RandomAccess[] randomAccessArray11 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray12 = composite10.toArray(randomAccessArray11);
        comparators.Composite composite14 = composite10.addLong((long) 67);
        comparators.Composite composite16 = composite14.addBool(true);
        comparators.Composite composite18 = composite14.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator19 = composite14.spliterator();
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        boolean boolean38 = comparators.Composite.validate((int) ' ', byteArray35, true);
        boolean boolean39 = composite29.contains((java.lang.Object) boolean38);
        java.util.Spliterator<java.lang.Object> objSpliterator40 = composite29.spliterator();
        java.io.DataOutputStream dataOutputStream41 = composite29.out;
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.lang.Object[] objArray53 = composite52.toArray();
        int int54 = composite52.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream55 = composite52.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream56 = composite52.parallelStream();
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        java.util.List<java.lang.Object> objList63 = comparators.Composite.deserialize(byteArray61);
        byte[] byteArray64 = comparators.Composite.serialize(objList63);
        java.util.stream.Stream<java.lang.Object> objStream65 = objList63.parallelStream();
        comparators.Composite composite66 = new comparators.Composite(objList63);
        java.lang.Object[] objArray67 = composite66.toArray();
        int int68 = composite66.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream69 = composite66.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream70 = composite66.parallelStream();
        int int71 = composite66.startOffset;
        int int72 = composite52.compareTo(composite66);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        comparators.Composite composite79 = composite52.addBytes(byteArray77);
        java.util.List<java.lang.Object> objList80 = comparators.Composite.deserialize(byteArray77);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator81 = composite14.new CompositeTypeIterator(composite29, 67, byteArray77);
        comparators.Composite composite82 = compositeTypeIterator81.collection;
        byte[] byteArray83 = compositeTypeIterator81.bytes;
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray89 = new byte[] {};
        int int90 = comparators.Composite.compare(byteArray88, byteArray89);
        java.util.List<java.lang.Object> objList91 = comparators.Composite.deserialize(byteArray89);
        boolean boolean93 = comparators.Composite.validate((int) (short) 100, byteArray89, false);
        compositeTypeIterator81.bytes = byteArray89;
        boolean boolean96 = comparators.Composite.validate(9, byteArray89, true);
        comparators.Composite composite97 = new comparators.Composite(byteArray89);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(randomAccessArray12);
        org.junit.Assert.assertNotNull(composite14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(objSpliterator19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objSpliterator40);
        org.junit.Assert.assertNull(dataOutputStream41);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(objList63);
        org.junit.Assert.assertNull(byteArray64);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertNotNull(objList80);
        org.junit.Assert.assertNotNull(composite82);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(objList91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        comparators.hector.CompositeListSerializer compositeListSerializer1 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType2 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray3 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList4 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList4, byteBufferArray3);
        java.lang.String str6 = compositeType2.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList4);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator7 = compositeType2.indexComparator;
        comparators.CompositeType compositeType8 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray9 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList10 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList10, byteBufferArray9);
        java.lang.String str12 = compositeType8.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList10);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = compositeType2.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType8);
        comparators.CompositeType compositeType14 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray15 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList16 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16, byteBufferArray15);
        java.lang.String str18 = compositeType14.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16);
        java.lang.String str19 = compositeType8.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16);
        java.util.List<java.util.List<java.lang.Object>> objListList20 = compositeListSerializer1.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList16);
        int int22 = compositeListSerializer1.computeInitialHashSize(9);
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        java.util.List<java.lang.Object> objList29 = comparators.Composite.deserialize(byteArray27);
        byte[] byteArray30 = comparators.Composite.serialize(objList29);
        java.util.stream.Stream<java.lang.Object> objStream31 = objList29.parallelStream();
        comparators.Composite composite32 = new comparators.Composite(objList29);
        byte[] byteArray33 = compositeListSerializer1.toBytes(objList29);
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.util.RandomAccess[] randomAccessArray44 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray45 = composite43.toArray(randomAccessArray44);
        comparators.Composite composite47 = composite43.addLong((long) 67);
        byte[] byteArray48 = composite47.serialize();
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray48);
        java.nio.ByteBuffer byteBuffer50 = compositeListSerializer1.toByteBuffer(objList49);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        java.util.List<java.lang.Object> objList57 = comparators.Composite.deserialize(byteArray55);
        byte[] byteArray58 = comparators.Composite.serialize(objList57);
        java.util.stream.Stream<java.lang.Object> objStream59 = objList57.parallelStream();
        comparators.Composite composite60 = new comparators.Composite(objList57);
        java.lang.Object[] objArray61 = composite60.toArray();
        int int62 = composite60.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream63 = composite60.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream64 = composite60.parallelStream();
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        java.util.List<java.lang.Object> objList71 = comparators.Composite.deserialize(byteArray69);
        byte[] byteArray72 = comparators.Composite.serialize(objList71);
        java.util.stream.Stream<java.lang.Object> objStream73 = objList71.parallelStream();
        comparators.Composite composite74 = new comparators.Composite(objList71);
        java.lang.Object[] objArray75 = composite74.toArray();
        int int76 = composite74.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream77 = composite74.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream78 = composite74.parallelStream();
        int int79 = composite74.startOffset;
        int int80 = composite60.compareTo(composite74);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray85 = new byte[] {};
        int int86 = comparators.Composite.compare(byteArray84, byteArray85);
        comparators.Composite composite87 = composite60.addBytes(byteArray85);
        java.nio.ByteBuffer byteBuffer88 = composite87.serializeToByteBuffer();
        java.util.List<java.lang.Object> objList89 = comparators.Composite.deserialize(byteBuffer88);
        byte[] byteArray90 = compositeListSerializer1.toBytes(objList89);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = comparators.Composite.validate((int) (byte) -1, byteArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType2);
        org.junit.Assert.assertNotNull(byteBufferArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(indexInfoComparator7);
        org.junit.Assert.assertNotNull(compositeType8);
        org.junit.Assert.assertNotNull(byteBufferArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteBufferComparator13);
        org.junit.Assert.assertNotNull(compositeType14);
        org.junit.Assert.assertNotNull(byteBufferArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(objListList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 13 + "'", int22 == 13);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(objList29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(randomAccessArray44);
        org.junit.Assert.assertNotNull(randomAccessArray45);
        org.junit.Assert.assertNotNull(composite47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(objList57);
        org.junit.Assert.assertNull(byteArray58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(objList71);
        org.junit.Assert.assertNull(byteArray72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(composite87);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertNotNull(objList89);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[67, 77, 80, 1, 9, 0, 0, 0]");
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray38 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray39 = composite9.toArray(compositeListSerializerArray38);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray45 = new byte[] {};
        int int46 = comparators.Composite.compare(byteArray44, byteArray45);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray45);
        boolean boolean48 = comparators.Composite.validate(0, byteArray45);
        byte[] byteArray49 = null;
        int int50 = comparators.Composite.compare(byteArray45, byteArray49);
        comparators.Composite composite51 = new comparators.Composite(byteArray49);
        byte[] byteArray53 = null;
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        boolean boolean63 = comparators.Composite.validate((int) ' ', byteArray60, true);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        java.util.List<java.lang.Object> objList71 = comparators.Composite.deserialize(byteArray69);
        boolean boolean73 = comparators.Composite.validate((int) (short) 100, byteArray69, false);
        int int74 = comparators.Composite.compare(byteArray60, byteArray69);
        int int75 = comparators.Composite.compare((int) (short) 1, byteArray53, (int) (byte) 10, byteArray69);
        comparators.Composite composite76 = composite51.addBytes(byteArray69);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean77 = composite9.removeAll((java.util.Collection<java.lang.Object>) composite76);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray38);
        org.junit.Assert.assertNotNull(compositeListSerializerArray39);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(objList71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(composite76);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray14);
        byte[] byteArray17 = comparators.Composite.serialize(objList16);
        java.util.stream.Stream<java.lang.Object> objStream18 = objList16.parallelStream();
        comparators.Composite composite19 = new comparators.Composite(objList16);
        java.lang.Object[] objArray20 = composite19.toArray();
        int int21 = composite19.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream22 = composite19.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream23 = composite19.parallelStream();
        int int24 = composite19.startOffset;
        int int25 = comparators.Composite.compare(composite9, composite19);
        comparators.CompositeType compositeType26 = comparators.CompositeType.instance;
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray45 = new byte[] {};
        int int46 = comparators.Composite.compare(byteArray44, byteArray45);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray45);
        byte[] byteArray48 = comparators.Composite.serialize(objList47);
        java.util.stream.Stream<java.lang.Object> objStream49 = objList47.parallelStream();
        comparators.Composite composite50 = new comparators.Composite(objList47);
        java.lang.Object[] objArray51 = composite50.toArray();
        int int52 = composite50.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream53 = composite50.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream54 = composite50.parallelStream();
        int int55 = composite50.startOffset;
        int int56 = composite36.compareTo(composite50);
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        comparators.Composite composite63 = composite36.addBytes(byteArray61);
        java.nio.ByteBuffer byteBuffer64 = composite63.serializeToByteBuffer();
        compositeType26.validate(byteBuffer64);
        comparators.CompositeType compositeType66 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray67 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList68 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList68, byteBufferArray67);
        java.lang.String str70 = compositeType66.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList68);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator71 = compositeType66.indexComparator;
        boolean boolean72 = comparators.Composite.isValidType((java.lang.Object) compositeType66);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator73 = compositeType26.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType66);
        java.lang.Class<?> wildcardClass74 = compositeType66.getClass();
        java.lang.reflect.Type[] typeArray75 = new java.lang.reflect.Type[] { wildcardClass74 };
        java.lang.reflect.Type[] typeArray76 = composite19.toArray(typeArray75);
        int int77 = composite19.startOffset;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(compositeType26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNull(byteArray48);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(composite63);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertNotNull(compositeType66);
        org.junit.Assert.assertNotNull(byteBufferArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(indexInfoComparator71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteBufferComparator73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        comparators.Composite composite34 = composite28.addBool(true);
        comparators.Composite composite36 = composite34.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream37 = composite34.byteStream;
        java.nio.ByteBuffer byteBuffer38 = compositeSerializer0.toByteBuffer(composite34);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        java.lang.Object[] objArray49 = composite48.toArray();
        int int50 = composite48.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream51 = composite48.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream52 = composite48.parallelStream();
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        java.util.List<java.lang.Object> objList59 = comparators.Composite.deserialize(byteArray57);
        byte[] byteArray60 = comparators.Composite.serialize(objList59);
        java.util.stream.Stream<java.lang.Object> objStream61 = objList59.parallelStream();
        comparators.Composite composite62 = new comparators.Composite(objList59);
        java.lang.Object[] objArray63 = composite62.toArray();
        int int64 = composite62.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream65 = composite62.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream66 = composite62.parallelStream();
        int int67 = composite62.startOffset;
        int int68 = composite48.compareTo(composite62);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        java.util.List<java.lang.Object> objList75 = comparators.Composite.deserialize(byteArray73);
        byte[] byteArray76 = comparators.Composite.serialize(objList75);
        java.util.stream.Stream<java.lang.Object> objStream77 = objList75.parallelStream();
        comparators.Composite composite78 = new comparators.Composite(objList75);
        java.util.RandomAccess[] randomAccessArray79 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray80 = composite78.toArray(randomAccessArray79);
        comparators.Composite composite82 = composite78.addLong((long) 67);
        byte[] byteArray83 = composite82.serialize();
        java.util.List<java.lang.Object> objList84 = comparators.Composite.deserialize(byteArray83);
        comparators.Composite composite85 = new comparators.Composite(byteArray83);
        boolean boolean86 = composite62.equals((java.lang.Object) byteArray83);
        comparators.Composite composite87 = compositeSerializer0.fromBytes(byteArray83);
        comparators.CompositeType compositeType88 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray89 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList90 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList90, byteBufferArray89);
        java.lang.String str92 = compositeType88.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList90);
        java.util.List<comparators.Composite> compositeList93 = compositeSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList90);
        comparators.CompositeType compositeType94 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray95 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList96 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean97 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList96, byteBufferArray95);
        java.lang.String str98 = compositeType94.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList96);
        java.util.List<comparators.Composite> compositeList99 = compositeSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList96);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArrayOutputStream37);
        org.junit.Assert.assertEquals(byteArrayOutputStream37.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(objList75);
        org.junit.Assert.assertNull(byteArray76);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(randomAccessArray79);
        org.junit.Assert.assertNotNull(randomAccessArray80);
        org.junit.Assert.assertNotNull(composite82);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(composite87);
        org.junit.Assert.assertNotNull(compositeType88);
        org.junit.Assert.assertNotNull(byteBufferArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(compositeList93);
        org.junit.Assert.assertNotNull(compositeType94);
        org.junit.Assert.assertNotNull(byteBufferArray95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
        org.junit.Assert.assertNotNull(compositeList99);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        byte[] byteArray1 = null;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray13 = new byte[] {};
        int int14 = comparators.Composite.compare(byteArray12, byteArray13);
        int int15 = comparators.Composite.compare(byteArray6, byteArray13);
        int int16 = comparators.Composite.compare((int) (byte) 1, byteArray1, 10, byteArray6);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        boolean boolean25 = comparators.Composite.validate(0, byteArray22);
        byte[] byteArray26 = null;
        int int27 = comparators.Composite.compare(byteArray22, byteArray26);
        int int28 = comparators.Composite.compare(byteArray6, byteArray22);
        comparators.Composite composite29 = new comparators.Composite(byteArray22);
        comparators.CompositeType compositeType30 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray31 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList32 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32, byteBufferArray31);
        java.lang.String str34 = compositeType30.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator35 = compositeType30.indexComparator;
        boolean boolean36 = comparators.Composite.isValidType((java.lang.Object) compositeType30);
        comparators.CompositeType compositeType37 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator38 = compositeType37.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator39 = compositeType30.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType37);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator40 = compositeType30.indexReverseComparator;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean41 = composite29.add((java.lang.Object) compositeType30);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(compositeType30);
        org.junit.Assert.assertNotNull(byteBufferArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(indexInfoComparator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(indexInfoComparator38);
        org.junit.Assert.assertNotNull(byteBufferComparator39);
        org.junit.Assert.assertNotNull(indexInfoComparator40);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        composite9.clear();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream28 = null;
        composite25.byteStream = byteArrayOutputStream28;
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        int int41 = composite39.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream42 = composite39.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream43 = composite39.parallelStream();
        comparators.Composite composite45 = composite39.addBool(true);
        java.util.Iterator<java.lang.Object> objItor46 = composite39.iterator();
        int int47 = composite25.compareTo(composite39);
        boolean boolean48 = composite9.addAll((java.util.Collection<java.lang.Object>) composite25);
        java.util.UUID uUID49 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite50 = composite9.addLexicalUUID(uUID49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(composite45);
        org.junit.Assert.assertNotNull(objItor46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(9);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        byte[] byteArray32 = compositeListSerializer0.toBytes(objList28);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.util.RandomAccess[] randomAccessArray43 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray44 = composite42.toArray(randomAccessArray43);
        comparators.Composite composite46 = composite42.addLong((long) 67);
        byte[] byteArray47 = composite46.serialize();
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray47);
        java.nio.ByteBuffer byteBuffer49 = compositeListSerializer0.toByteBuffer(objList48);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet50 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.List<java.lang.Object>> objListList51 = compositeListSerializer0.fromBytesSet(byteBufferSet50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNull(byteArray32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(randomAccessArray43);
        org.junit.Assert.assertNotNull(randomAccessArray44);
        org.junit.Assert.assertNotNull(composite46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNotNull(byteBuffer49);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        comparators.Composite composite0 = null;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.util.Iterator<java.lang.Object> objItor17 = composite10.iterator();
        comparators.Composite composite18 = new comparators.Composite();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        int int33 = composite18.compareTo(composite28);
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray49 = new byte[] {};
        int int50 = comparators.Composite.compare(byteArray48, byteArray49);
        boolean boolean52 = comparators.Composite.validate((int) ' ', byteArray49, true);
        boolean boolean53 = composite43.contains((java.lang.Object) boolean52);
        java.util.stream.Stream<java.lang.Object> objStream54 = composite43.parallelStream();
        boolean boolean55 = composite18.contains((java.lang.Object) composite43);
        boolean boolean56 = composite10.addAll((java.util.Collection<java.lang.Object>) composite18);
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        java.util.List<java.lang.Object> objList63 = comparators.Composite.deserialize(byteArray61);
        byte[] byteArray64 = comparators.Composite.serialize(objList63);
        java.util.stream.Stream<java.lang.Object> objStream65 = objList63.parallelStream();
        comparators.Composite composite66 = new comparators.Composite(objList63);
        java.lang.Object[] objArray67 = composite66.toArray();
        int int68 = composite66.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream69 = composite66.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream70 = composite66.parallelStream();
        int int71 = composite66.startOffset;
        int int72 = composite66.startOffset;
        int int73 = composite18.compareTo(composite66);
        comparators.Composite composite75 = composite18.addLong((long) 80);
        java.util.Spliterator<java.lang.Object> objSpliterator76 = composite75.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            int int77 = comparators.Composite.compare(composite0, composite75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(objItor17);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(objList63);
        org.junit.Assert.assertNull(byteArray64);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertNotNull(objSpliterator76);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray14);
        byte[] byteArray17 = comparators.Composite.serialize(objList16);
        java.util.stream.Stream<java.lang.Object> objStream18 = objList16.parallelStream();
        comparators.Composite composite19 = new comparators.Composite(objList16);
        java.lang.Object[] objArray20 = composite19.toArray();
        int int21 = composite19.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream22 = composite19.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream23 = composite19.parallelStream();
        int int24 = composite19.startOffset;
        int int25 = comparators.Composite.compare(composite9, composite19);
        composite9.clear();
        java.util.Iterator<java.lang.Object> objItor27 = composite9.iterator();
        java.io.DataOutputStream dataOutputStream28 = composite9.out;
        composite9.startOffset = 255;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objItor27);
        org.junit.Assert.assertNull(dataOutputStream28);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        java.util.stream.Stream<java.lang.Object> objStream20 = objList18.parallelStream();
        comparators.Composite composite21 = new comparators.Composite(objList18);
        java.lang.Object[] objArray22 = composite21.toArray();
        int int23 = composite21.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream24 = composite21.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream25 = composite21.parallelStream();
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray30);
        byte[] byteArray33 = comparators.Composite.serialize(objList32);
        java.util.stream.Stream<java.lang.Object> objStream34 = objList32.parallelStream();
        comparators.Composite composite35 = new comparators.Composite(objList32);
        java.lang.Object[] objArray36 = composite35.toArray();
        int int37 = composite35.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream38 = composite35.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream39 = composite35.parallelStream();
        int int40 = composite35.startOffset;
        int int41 = composite21.compareTo(composite35);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        comparators.Composite composite48 = composite21.addBytes(byteArray46);
        java.nio.ByteBuffer byteBuffer49 = composite48.serializeToByteBuffer();
        compositeType6.validate(byteBuffer49);
        comparators.Composite composite51 = new comparators.Composite(byteBuffer49);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray56 = new byte[] {};
        int int57 = comparators.Composite.compare(byteArray55, byteArray56);
        java.util.List<java.lang.Object> objList58 = comparators.Composite.deserialize(byteArray56);
        byte[] byteArray59 = comparators.Composite.serialize(objList58);
        java.util.stream.Stream<java.lang.Object> objStream60 = objList58.parallelStream();
        comparators.Composite composite61 = new comparators.Composite(objList58);
        java.lang.Object[] objArray62 = composite61.toArray();
        int int63 = composite61.startOffset;
        comparators.Composite composite65 = composite61.addBool(true);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = composite51.removeAll((java.util.Collection<java.lang.Object>) composite65);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(composite48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(objList58);
        org.junit.Assert.assertNull(byteArray59);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(composite65);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        java.lang.Object[] objArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite1 = new comparators.Composite(objArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        comparators.Composite composite38 = composite11.addBytes(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = composite38.serializeToByteBuffer();
        compositeType1.validate(byteBuffer39);
        boolean boolean41 = comparators.Composite.validate(byteBuffer39);
        comparators.Composite composite42 = new comparators.Composite(byteBuffer39);
        java.nio.ByteBuffer byteBuffer43 = null;
        int int44 = compositeType0.compare(byteBuffer39, byteBuffer43);
        comparators.Composite composite45 = new comparators.Composite(byteBuffer39);
        java.util.Spliterator<java.lang.Object> objSpliterator46 = composite45.spliterator();
        int int47 = composite45.startOffset;
        int int48 = composite45.size();
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteArray53);
        byte[] byteArray56 = comparators.Composite.serialize(objList55);
        java.util.stream.Stream<java.lang.Object> objStream57 = objList55.parallelStream();
        comparators.Composite composite58 = new comparators.Composite(objList55);
        java.lang.Object[] objArray59 = composite58.toArray();
        int int60 = composite58.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream61 = composite58.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream62 = composite58.parallelStream();
        int int63 = composite58.startOffset;
        int int64 = composite58.startOffset;
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        java.util.List<java.lang.Object> objList71 = comparators.Composite.deserialize(byteArray69);
        byte[] byteArray72 = comparators.Composite.serialize(objList71);
        java.util.stream.Stream<java.lang.Object> objStream73 = objList71.parallelStream();
        comparators.Composite composite74 = new comparators.Composite(objList71);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        boolean boolean83 = comparators.Composite.validate((int) ' ', byteArray80, true);
        boolean boolean84 = composite74.contains((java.lang.Object) boolean83);
        java.util.Spliterator<java.lang.Object> objSpliterator85 = composite74.spliterator();
        boolean boolean86 = composite58.containsAll((java.util.Collection<java.lang.Object>) composite74);
        boolean boolean88 = composite58.contains((java.lang.Object) (-1));
        int int89 = composite45.compareTo(composite58);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objSpliterator46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(objList71);
        org.junit.Assert.assertNull(byteArray72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objSpliterator85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer6 = compositeType0.fromString("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer13 = compositeType0.fromString("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        java.lang.Object[] objArray13 = composite9.toArray();
        comparators.Composite composite15 = composite9.addAscii("");
        int int16 = composite15.size();
        comparators.Composite composite17 = composite15.addMatchMaximum();
        java.util.UUID uUID18 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite19 = composite15.addLexicalUUID(uUID18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(composite17);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite65.startOffset;
        int int72 = composite17.compareTo(composite65);
        comparators.Composite composite74 = composite17.addLong((long) 80);
        comparators.Composite composite76 = composite17.addLong((long) 6);
        java.util.Iterator<java.lang.Object> objItor77 = composite17.iterator();
        comparators.Composite composite78 = composite17.addMatchMaximum();
        java.util.UUID uUID79 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite80 = composite78.addLexicalUUID(uUID79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(composite76);
        org.junit.Assert.assertNotNull(objItor77);
        org.junit.Assert.assertNotNull(composite78);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.type;
        int int84 = compositeTypeIterator80.offset;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj85 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 67 + "'", int84 == 67);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        byte[] byteArray1 = null;
        boolean boolean3 = comparators.Composite.validate((int) (short) 0, byteArray1, true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite65.startOffset;
        int int72 = composite17.compareTo(composite65);
        comparators.Composite composite74 = composite17.addLong((long) 80);
        comparators.Composite composite76 = composite17.addLong((long) 6);
        byte[] byteArray77 = composite76.serialize();
        comparators.Composite composite78 = new comparators.Composite(byteArray77);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray83 = new byte[] {};
        int int84 = comparators.Composite.compare(byteArray82, byteArray83);
        java.util.List<java.lang.Object> objList85 = comparators.Composite.deserialize(byteArray83);
        byte[] byteArray86 = comparators.Composite.serialize(objList85);
        java.util.stream.Stream<java.lang.Object> objStream87 = objList85.parallelStream();
        comparators.Composite composite88 = new comparators.Composite(objList85);
        java.util.RandomAccess[] randomAccessArray89 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray90 = composite88.toArray(randomAccessArray89);
        comparators.Composite composite92 = composite88.addLong((long) 67);
        byte[] byteArray93 = composite92.serialize();
        java.util.List<java.lang.Object> objList94 = comparators.Composite.deserialize(byteArray93);
        comparators.Composite composite95 = new comparators.Composite(byteArray93);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = composite78.remove((java.lang.Object) byteArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(composite76);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 80, 3, 0, 0, 0, 0, 0, 0, 0, 6, 0]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(objList85);
        org.junit.Assert.assertNull(byteArray86);
        org.junit.Assert.assertNotNull(objStream87);
        org.junit.Assert.assertNotNull(randomAccessArray89);
        org.junit.Assert.assertNotNull(randomAccessArray90);
        org.junit.Assert.assertNotNull(composite92);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList94);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        byte[] byteArray1 = null;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray13 = new byte[] {};
        int int14 = comparators.Composite.compare(byteArray12, byteArray13);
        int int15 = comparators.Composite.compare(byteArray6, byteArray13);
        int int16 = comparators.Composite.compare((int) (byte) 1, byteArray1, 10, byteArray6);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        int int29 = comparators.Composite.compare(byteArray20, byteArray27);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray27);
        int int31 = comparators.Composite.compare(byteArray6, byteArray27);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 4");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.type;
        compositeTypeIterator80.type = (short) 100;
        int int86 = compositeTypeIterator80.offset;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj87 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 67 + "'", int86 == 67);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite13.iterator();
        comparators.CompositeType compositeType17 = new comparators.CompositeType();
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite42.startOffset;
        int int48 = composite28.compareTo(composite42);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        comparators.Composite composite55 = composite28.addBytes(byteArray53);
        java.nio.ByteBuffer byteBuffer56 = composite55.serializeToByteBuffer();
        compositeType18.validate(byteBuffer56);
        boolean boolean58 = comparators.Composite.validate(byteBuffer56);
        comparators.Composite composite59 = new comparators.Composite(byteBuffer56);
        java.nio.ByteBuffer byteBuffer60 = null;
        int int61 = compositeType17.compare(byteBuffer56, byteBuffer60);
        comparators.Composite composite62 = new comparators.Composite(byteBuffer56);
        java.util.Spliterator<java.lang.Object> objSpliterator63 = composite62.spliterator();
        java.util.Iterator<java.lang.Object> objItor64 = composite62.iterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean65 = composite13.retainAll((java.util.Collection<java.lang.Object>) composite62);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objSpliterator63);
        org.junit.Assert.assertNotNull(objItor64);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MINIMUM;
        int int1 = placeholder0.type;
        int int2 = placeholder0.type;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        java.util.List<java.lang.Object> objList9 = comparators.Composite.deserialize(byteArray7);
        byte[] byteArray10 = comparators.Composite.serialize(objList9);
        java.util.stream.Stream<java.lang.Object> objStream11 = objList9.parallelStream();
        comparators.Composite composite12 = new comparators.Composite(objList9);
        java.lang.Object[] objArray13 = composite12.toArray();
        int int14 = composite12.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream15 = composite12.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream16 = composite12.parallelStream();
        int int17 = composite12.startOffset;
        int int18 = composite12.startOffset;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        boolean boolean40 = composite12.containsAll((java.util.Collection<java.lang.Object>) composite28);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray41 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray42 = composite12.toArray(compositeListSerializerArray41);
        comparators.Composite composite43 = new comparators.Composite((java.lang.Object[]) compositeListSerializerArray41);
        comparators.CompositeType compositeType44 = comparators.CompositeType.instance;
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray49 = new byte[] {};
        int int50 = comparators.Composite.compare(byteArray48, byteArray49);
        java.util.List<java.lang.Object> objList51 = comparators.Composite.deserialize(byteArray49);
        byte[] byteArray52 = comparators.Composite.serialize(objList51);
        java.util.stream.Stream<java.lang.Object> objStream53 = objList51.parallelStream();
        comparators.Composite composite54 = new comparators.Composite(objList51);
        java.lang.Object[] objArray55 = composite54.toArray();
        int int56 = composite54.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream57 = composite54.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream58 = composite54.parallelStream();
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        java.util.List<java.lang.Object> objList65 = comparators.Composite.deserialize(byteArray63);
        byte[] byteArray66 = comparators.Composite.serialize(objList65);
        java.util.stream.Stream<java.lang.Object> objStream67 = objList65.parallelStream();
        comparators.Composite composite68 = new comparators.Composite(objList65);
        java.lang.Object[] objArray69 = composite68.toArray();
        int int70 = composite68.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream71 = composite68.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream72 = composite68.parallelStream();
        int int73 = composite68.startOffset;
        int int74 = composite54.compareTo(composite68);
        byte[] byteArray78 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray79 = new byte[] {};
        int int80 = comparators.Composite.compare(byteArray78, byteArray79);
        comparators.Composite composite81 = composite54.addBytes(byteArray79);
        java.nio.ByteBuffer byteBuffer82 = composite81.serializeToByteBuffer();
        compositeType44.validate(byteBuffer82);
        boolean boolean84 = comparators.Composite.validate(byteBuffer82);
        comparators.Composite composite85 = new comparators.Composite(byteBuffer82);
        comparators.Composite composite86 = new comparators.Composite(byteBuffer82);
        int int87 = comparators.Composite.compare(composite43, composite86);
        boolean boolean88 = placeholder0.equals((java.lang.Object) composite86);
        org.junit.Assert.assertNotNull(placeholder0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 6 + "'", int1 == 6);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray41);
        org.junit.Assert.assertNotNull(compositeListSerializerArray42);
        org.junit.Assert.assertNotNull(compositeType44);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(objList51);
        org.junit.Assert.assertNull(byteArray52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(objList65);
        org.junit.Assert.assertNull(byteArray66);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(byteBuffer82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        int int56 = composite17.startOffset;
        comparators.Composite composite58 = composite17.addAscii("hi!");
        int int59 = composite17.startOffset;
        java.util.UUID uUID60 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite61 = composite17.addTimeUUID(uUID60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(composite58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        int int13 = composite10.startOffset;
        byte[] byteArray14 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.util.RandomAccess[] randomAccessArray32 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray33 = composite31.toArray(randomAccessArray32);
        comparators.Composite composite35 = composite31.addLong((long) 67);
        byte[] byteArray36 = composite35.serialize();
        java.util.List<java.lang.Object> objList37 = comparators.Composite.deserialize(byteArray36);
        int int38 = comparators.Composite.compare(byteArray19, byteArray36);
        comparators.Composite composite39 = compositeSerializer0.fromBytes(byteArray19);
        java.util.List<java.nio.ByteBuffer> byteBufferList40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<comparators.Composite> compositeList41 = compositeSerializer0.fromBytesList(byteBufferList40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(randomAccessArray32);
        org.junit.Assert.assertNotNull(randomAccessArray33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(composite39);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        java.util.List<java.lang.Object> objList0 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite1 = new comparators.Composite(objList0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        java.util.stream.Stream<java.lang.Object> objStream27 = composite9.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = composite9.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.cassandra.db.marshal.MarshalException; message: Not a composite type (ID byte 0 incorrect)");
        } catch (org.apache.cassandra.db.marshal.MarshalException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertNotNull(objStream27);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        byte[] byteArray1 = null;
        boolean boolean2 = comparators.Composite.validate(11, byteArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        composite9.clear();
        boolean boolean17 = composite9.equals((java.lang.Object) 1L);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.util.RandomAccess[] randomAccessArray28 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray29 = composite27.toArray(randomAccessArray28);
        comparators.Composite composite30 = new comparators.Composite((java.lang.Object[]) randomAccessArray29);
        int int31 = comparators.Composite.compare(composite9, composite30);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray36);
        byte[] byteArray39 = comparators.Composite.serialize(objList38);
        java.util.stream.Stream<java.lang.Object> objStream40 = objList38.parallelStream();
        comparators.Composite composite41 = new comparators.Composite(objList38);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        boolean boolean50 = comparators.Composite.validate((int) ' ', byteArray47, true);
        boolean boolean51 = composite41.contains((java.lang.Object) boolean50);
        java.util.Spliterator<java.lang.Object> objSpliterator52 = composite41.spliterator();
        composite41.startOffset = 1;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        java.util.List<java.lang.Object> objList61 = comparators.Composite.deserialize(byteArray59);
        byte[] byteArray62 = comparators.Composite.serialize(objList61);
        java.util.stream.Stream<java.lang.Object> objStream63 = objList61.parallelStream();
        comparators.Composite composite64 = new comparators.Composite(objList61);
        java.lang.Object[] objArray65 = composite64.toArray();
        int int66 = composite64.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream67 = composite64.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream68 = composite64.parallelStream();
        comparators.Composite composite70 = composite64.addBool(true);
        java.io.DataOutputStream dataOutputStream71 = composite64.out;
        composite41.out = dataOutputStream71;
        composite9.out = dataOutputStream71;
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray78 = new byte[] {};
        int int79 = comparators.Composite.compare(byteArray77, byteArray78);
        java.util.List<java.lang.Object> objList80 = comparators.Composite.deserialize(byteArray78);
        byte[] byteArray81 = comparators.Composite.serialize(objList80);
        java.util.stream.Stream<java.lang.Object> objStream82 = objList80.parallelStream();
        comparators.Composite composite83 = new comparators.Composite(objList80);
        java.util.RandomAccess[] randomAccessArray84 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray85 = composite83.toArray(randomAccessArray84);
        comparators.Composite composite87 = composite83.addLong((long) 67);
        comparators.Composite composite89 = composite87.addBool(true);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = composite9.retainAll((java.util.Collection<java.lang.Object>) composite87);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(randomAccessArray28);
        org.junit.Assert.assertNotNull(randomAccessArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objSpliterator52);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(objList61);
        org.junit.Assert.assertNull(byteArray62);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(composite70);
        org.junit.Assert.assertNotNull(dataOutputStream71);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(objList80);
        org.junit.Assert.assertNull(byteArray81);
        org.junit.Assert.assertNotNull(objStream82);
        org.junit.Assert.assertNotNull(randomAccessArray84);
        org.junit.Assert.assertNotNull(randomAccessArray85);
        org.junit.Assert.assertNotNull(composite87);
        org.junit.Assert.assertNotNull(composite89);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        java.lang.Object[] objArray36 = composite31.toArray();
        byte[] byteArray37 = comparators.Composite.serialize(objArray36);
        comparators.Composite composite38 = new comparators.Composite(objArray36);
        java.util.UUID uUID39 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite40 = composite38.addTimeUUID(uUID39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNull(byteArray37);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        boolean boolean20 = comparators.Composite.isValidType((java.lang.Object) boolean19);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        boolean boolean1 = comparators.Composite.isValidType((java.lang.Object) (short) 10);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.type;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj85 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        java.lang.String str1 = null; // flaky: placeholder0.toString();
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
// flaky:         org.junit.Assert.assertNotNull(placeholder0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Placeholder(0)" + "'", str1, "Placeholder(0)");
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        comparators.CompositeType compositeType9 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray10 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList11 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11, byteBufferArray10);
        java.lang.String str13 = compositeType9.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType9.indexComparator;
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator20 = compositeType9.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType15);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator21 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType0.reversed();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer24 = compositeType0.fromString("Placeholder(1)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(compositeType9);
        org.junit.Assert.assertNotNull(byteBufferArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteBufferComparator20);
        org.junit.Assert.assertNotNull(byteBufferComparator21);
        org.junit.Assert.assertNotNull(byteBufferComparator22);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
// flaky:         placeholder0.type = (short) 1;
        java.lang.String str3 = null; // flaky: placeholder0.toString();
        boolean boolean5 = false; // flaky: placeholder0.equals((java.lang.Object) 10L);
        java.lang.String str6 = null; // flaky: placeholder0.toString();
        boolean boolean8 = false; // flaky: placeholder0.equals((java.lang.Object) (short) -1);
        java.lang.String str9 = null; // flaky: placeholder0.toString();
// flaky:         org.junit.Assert.assertNotNull(placeholder0);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Placeholder(1)" + "'", str3, "Placeholder(1)");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Placeholder(1)" + "'", str6, "Placeholder(1)");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Placeholder(1)" + "'", str9, "Placeholder(1)");
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        comparators.CompositeType compositeType30 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray31 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList32 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32, byteBufferArray31);
        java.lang.String str34 = compositeType30.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator35 = compositeType30.indexComparator;
        comparators.CompositeType compositeType36 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray37 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList38 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38, byteBufferArray37);
        java.lang.String str40 = compositeType36.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator41 = compositeType30.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType36);
        comparators.CompositeType compositeType42 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray43 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList44 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44, byteBufferArray43);
        java.lang.String str46 = compositeType42.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44);
        java.lang.String str47 = compositeType36.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44);
        comparators.CompositeType compositeType48 = comparators.CompositeType.instance;
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteArray53);
        byte[] byteArray56 = comparators.Composite.serialize(objList55);
        java.util.stream.Stream<java.lang.Object> objStream57 = objList55.parallelStream();
        comparators.Composite composite58 = new comparators.Composite(objList55);
        java.lang.Object[] objArray59 = composite58.toArray();
        int int60 = composite58.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream61 = composite58.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream62 = composite58.parallelStream();
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray67 = new byte[] {};
        int int68 = comparators.Composite.compare(byteArray66, byteArray67);
        java.util.List<java.lang.Object> objList69 = comparators.Composite.deserialize(byteArray67);
        byte[] byteArray70 = comparators.Composite.serialize(objList69);
        java.util.stream.Stream<java.lang.Object> objStream71 = objList69.parallelStream();
        comparators.Composite composite72 = new comparators.Composite(objList69);
        java.lang.Object[] objArray73 = composite72.toArray();
        int int74 = composite72.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream75 = composite72.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream76 = composite72.parallelStream();
        int int77 = composite72.startOffset;
        int int78 = composite58.compareTo(composite72);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray83 = new byte[] {};
        int int84 = comparators.Composite.compare(byteArray82, byteArray83);
        comparators.Composite composite85 = composite58.addBytes(byteArray83);
        java.nio.ByteBuffer byteBuffer86 = composite85.serializeToByteBuffer();
        compositeType48.validate(byteBuffer86);
        java.lang.String str88 = compositeType36.getString(byteBuffer86);
        comparators.Composite composite89 = new comparators.Composite(byteBuffer86);
        java.util.Iterator<java.lang.Object> objItor90 = composite89.iterator();
        comparators.Composite.Placeholder placeholder91 = comparators.Composite.MATCH_MAXIMUM;
        int int92 = 0; // flaky: placeholder91.type;
// flaky:         placeholder91.type = 6;
        boolean boolean95 = composite89.contains((java.lang.Object) placeholder91);
        int int96 = composite23.compareTo(composite89);
        java.util.UUID uUID97 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite98 = composite23.addTimeUUID(uUID97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(compositeType30);
        org.junit.Assert.assertNotNull(byteBufferArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(indexInfoComparator35);
        org.junit.Assert.assertNotNull(compositeType36);
        org.junit.Assert.assertNotNull(byteBufferArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteBufferComparator41);
        org.junit.Assert.assertNotNull(compositeType42);
        org.junit.Assert.assertNotNull(byteBufferArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(compositeType48);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(objList69);
        org.junit.Assert.assertNull(byteArray70);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(objStream75);
        org.junit.Assert.assertNotNull(objStream76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(composite85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(objItor90);
// flaky:         org.junit.Assert.assertNotNull(placeholder91);
// flaky:         org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        comparators.hector.CompositeSerializer compositeSerializer2 = new comparators.hector.CompositeSerializer();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        java.util.List<java.lang.Object> objList9 = comparators.Composite.deserialize(byteArray7);
        byte[] byteArray10 = comparators.Composite.serialize(objList9);
        java.util.stream.Stream<java.lang.Object> objStream11 = objList9.parallelStream();
        comparators.Composite composite12 = new comparators.Composite(objList9);
        java.lang.Object[] objArray13 = composite12.toArray();
        int int14 = composite12.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream15 = composite12.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream16 = composite12.parallelStream();
        comparators.Composite composite18 = composite12.addBool(true);
        java.io.DataOutputStream dataOutputStream19 = composite12.out;
        byte[] byteArray20 = compositeSerializer2.toBytes(composite12);
        comparators.CompositeType compositeType21 = comparators.CompositeType.instance;
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream35 = composite31.parallelStream();
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(byteArray40);
        byte[] byteArray43 = comparators.Composite.serialize(objList42);
        java.util.stream.Stream<java.lang.Object> objStream44 = objList42.parallelStream();
        comparators.Composite composite45 = new comparators.Composite(objList42);
        java.lang.Object[] objArray46 = composite45.toArray();
        int int47 = composite45.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream48 = composite45.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream49 = composite45.parallelStream();
        int int50 = composite45.startOffset;
        int int51 = composite31.compareTo(composite45);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray56 = new byte[] {};
        int int57 = comparators.Composite.compare(byteArray55, byteArray56);
        comparators.Composite composite58 = composite31.addBytes(byteArray56);
        java.nio.ByteBuffer byteBuffer59 = composite58.serializeToByteBuffer();
        compositeType21.validate(byteBuffer59);
        boolean boolean61 = comparators.Composite.validate(byteBuffer59);
        boolean boolean62 = comparators.Composite.validate(byteBuffer59);
        comparators.Composite composite63 = compositeSerializer2.fromByteBuffer(byteBuffer59);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray68 = new byte[] {};
        int int69 = comparators.Composite.compare(byteArray67, byteArray68);
        java.util.List<java.lang.Object> objList70 = comparators.Composite.deserialize(byteArray68);
        byte[] byteArray71 = comparators.Composite.serialize(objList70);
        java.util.stream.Stream<java.lang.Object> objStream72 = objList70.parallelStream();
        comparators.Composite composite73 = new comparators.Composite(objList70);
        java.util.RandomAccess[] randomAccessArray74 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray75 = composite73.toArray(randomAccessArray74);
        comparators.Composite composite77 = composite73.addLong((long) 67);
        byte[] byteArray78 = composite77.serialize();
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray78);
        comparators.Composite composite80 = new comparators.Composite(byteArray78);
        comparators.Composite composite81 = compositeSerializer2.fromBytes(byteArray78);
        boolean boolean82 = comparators.Composite.validate(77, byteArray78);
        boolean boolean84 = comparators.Composite.validate(341, byteArray78, false);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(dataOutputStream19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType21);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(objList42);
        org.junit.Assert.assertNull(byteArray43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(composite58);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(composite63);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(objList70);
        org.junit.Assert.assertNull(byteArray71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(randomAccessArray74);
        org.junit.Assert.assertNotNull(randomAccessArray75);
        org.junit.Assert.assertNotNull(composite77);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.offset;
        int int85 = compositeTypeIterator80.offset;
        comparators.Composite composite86 = compositeTypeIterator80.collection;
        int int87 = compositeTypeIterator80.offset;
        int int88 = compositeTypeIterator80.len;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj89 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 67 + "'", int84 == 67);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 67 + "'", int87 == 67);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer7 = compositeType0.fromString("Placeholder(1)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator1 = compositeType0.indexComparator;
        comparators.CompositeType compositeType2 = new comparators.CompositeType();
        comparators.CompositeType compositeType3 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray4 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList5 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList5, byteBufferArray4);
        java.lang.String str7 = compositeType3.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList5);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator8 = compositeType3.indexComparator;
        comparators.CompositeType compositeType9 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray10 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList11 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11, byteBufferArray10);
        java.lang.String str13 = compositeType9.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator14 = compositeType3.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType9);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        int int40 = composite38.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream41 = composite38.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream42 = composite38.parallelStream();
        int int43 = composite38.startOffset;
        int int44 = composite24.compareTo(composite38);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray49 = new byte[] {};
        int int50 = comparators.Composite.compare(byteArray48, byteArray49);
        comparators.Composite composite51 = composite24.addBytes(byteArray49);
        java.nio.ByteBuffer byteBuffer52 = composite51.serializeToByteBuffer();
        compositeType9.validate(byteBuffer52);
        java.lang.String str54 = compositeType2.getString(byteBuffer52);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteBuffer52);
        compositeType0.validate(byteBuffer52);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer58 = compositeType0.fromString("Placeholder(58)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexInfoComparator1);
        org.junit.Assert.assertNotNull(compositeType3);
        org.junit.Assert.assertNotNull(byteBufferArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(indexInfoComparator8);
        org.junit.Assert.assertNotNull(compositeType9);
        org.junit.Assert.assertNotNull(byteBufferArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteBufferComparator14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(composite51);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(objList55);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        int int15 = composite10.startOffset;
        composite10.clear();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        int int44 = comparators.Composite.compare(byteArray35, byteArray42);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray42);
        composite27.bytes = byteArray42;
        boolean boolean47 = comparators.Composite.validate(1, byteArray42);
        composite10.bytes = byteArray42;
        comparators.Composite composite49 = compositeSerializer0.fromBytes(byteArray42);
        boolean boolean50 = comparators.Composite.isValidType((java.lang.Object) composite49);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        boolean boolean81 = composite13.isEmpty();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        composite9.clear();
        boolean boolean17 = composite9.equals((java.lang.Object) 1L);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.util.RandomAccess[] randomAccessArray28 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray29 = composite27.toArray(randomAccessArray28);
        comparators.Composite composite30 = new comparators.Composite((java.lang.Object[]) randomAccessArray29);
        int int31 = comparators.Composite.compare(composite9, composite30);
        java.util.Spliterator<java.lang.Object> objSpliterator32 = composite9.spliterator();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream45 = null;
        composite42.byteStream = byteArrayOutputStream45;
        byte[] byteArray50 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray51 = new byte[] {};
        int int52 = comparators.Composite.compare(byteArray50, byteArray51);
        java.util.List<java.lang.Object> objList53 = comparators.Composite.deserialize(byteArray51);
        byte[] byteArray54 = comparators.Composite.serialize(objList53);
        java.util.stream.Stream<java.lang.Object> objStream55 = objList53.parallelStream();
        comparators.Composite composite56 = new comparators.Composite(objList53);
        java.lang.Object[] objArray57 = composite56.toArray();
        int int58 = composite56.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream59 = composite56.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream60 = composite56.parallelStream();
        comparators.Composite composite62 = composite56.addBool(true);
        java.util.Iterator<java.lang.Object> objItor63 = composite56.iterator();
        int int64 = composite42.compareTo(composite56);
        java.lang.Object[][][] objArray65 = new java.lang.Object[][][] {};
        java.lang.Object[][][] objArray66 = composite42.toArray(objArray65);
        comparators.Composite composite67 = new comparators.Composite((java.lang.Object[]) objArray65);
        java.lang.Object[][][] objArray68 = composite9.toArray(objArray65);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer69 = comparators.Composite.serializeToByteBuffer((java.lang.Object[]) objArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(randomAccessArray28);
        org.junit.Assert.assertNotNull(randomAccessArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objSpliterator32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(objList53);
        org.junit.Assert.assertNull(byteArray54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(composite62);
        org.junit.Assert.assertNotNull(objItor63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertNotNull(objArray68);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        java.util.stream.Stream<java.lang.Object> objStream36 = composite9.parallelStream();
        boolean boolean37 = composite9.isEmpty();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj86 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        boolean boolean9 = comparators.Composite.validate(0, byteArray6);
        byte[] byteArray10 = null;
        int int11 = comparators.Composite.compare(byteArray6, byteArray10);
        boolean boolean13 = comparators.Composite.validate(6, byteArray10, true);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        int int33 = composite28.startOffset;
        composite28.clear();
        boolean boolean35 = composite18.containsAll((java.util.Collection<java.lang.Object>) composite28);
        comparators.Composite composite37 = composite28.addAscii("hi!");
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        java.util.List<java.lang.Object> objList44 = comparators.Composite.deserialize(byteArray42);
        byte[] byteArray45 = comparators.Composite.serialize(objList44);
        java.util.stream.Stream<java.lang.Object> objStream46 = objList44.parallelStream();
        comparators.Composite composite47 = new comparators.Composite(objList44);
        java.lang.Object[] objArray48 = composite47.toArray();
        int int49 = composite47.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream50 = composite47.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream51 = composite47.parallelStream();
        comparators.Composite composite53 = composite47.addBool(true);
        comparators.Composite composite55 = composite53.addLong((long) 6);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        comparators.Composite composite71 = composite65.addBool(true);
        comparators.Composite composite73 = composite71.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream74 = composite71.byteStream;
        composite55.byteStream = byteArrayOutputStream74;
        composite28.byteStream = byteArrayOutputStream74;
        comparators.Composite composite78 = composite28.addUTF8("US-ASCII");
        java.util.UUID uUID79 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite80 = composite28.addTimeUUID(uUID79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(objList44);
        org.junit.Assert.assertNull(byteArray45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(composite53);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(composite71);
        org.junit.Assert.assertNotNull(composite73);
        org.junit.Assert.assertNotNull(byteArrayOutputStream74);
        org.junit.Assert.assertEquals(byteArrayOutputStream74.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006");
        org.junit.Assert.assertNotNull(composite78);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        int int13 = composite10.startOffset;
        byte[] byteArray14 = compositeSerializer0.toBytes(composite10);
        java.util.List<java.nio.ByteBuffer> byteBufferList15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<comparators.Composite> compositeList16 = compositeSerializer0.fromBytesList(byteBufferList15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(byteArray14);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        java.util.UUID uUID16 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite17 = composite9.addLexicalUUID(uUID16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.offset;
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 67 + "'", int84 == 67);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        byte[] byteArray21 = composite9.bytes;
        comparators.hector.CompositeListSerializer compositeListSerializer22 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        java.util.List<java.lang.Object> objList29 = comparators.Composite.deserialize(byteArray27);
        byte[] byteArray30 = comparators.Composite.serialize(objList29);
        java.util.stream.Stream<java.lang.Object> objStream31 = objList29.parallelStream();
        comparators.Composite composite32 = new comparators.Composite(objList29);
        byte[] byteArray33 = compositeListSerializer22.toBytes(objList29);
        comparators.CompositeType compositeType34 = new comparators.CompositeType();
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(byteArray40);
        byte[] byteArray43 = comparators.Composite.serialize(objList42);
        java.util.stream.Stream<java.lang.Object> objStream44 = objList42.parallelStream();
        comparators.Composite composite45 = new comparators.Composite(objList42);
        java.lang.Object[] objArray46 = composite45.toArray();
        int int47 = composite45.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream48 = composite45.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream49 = composite45.parallelStream();
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        java.lang.Object[] objArray60 = composite59.toArray();
        int int61 = composite59.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream62 = composite59.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream63 = composite59.parallelStream();
        int int64 = composite59.startOffset;
        int int65 = composite45.compareTo(composite59);
        byte[] byteArray69 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray70 = new byte[] {};
        int int71 = comparators.Composite.compare(byteArray69, byteArray70);
        comparators.Composite composite72 = composite45.addBytes(byteArray70);
        java.nio.ByteBuffer byteBuffer73 = composite72.serializeToByteBuffer();
        compositeType35.validate(byteBuffer73);
        boolean boolean75 = comparators.Composite.validate(byteBuffer73);
        comparators.Composite composite76 = new comparators.Composite(byteBuffer73);
        java.nio.ByteBuffer byteBuffer77 = null;
        int int78 = compositeType34.compare(byteBuffer73, byteBuffer77);
        comparators.Composite composite79 = new comparators.Composite(byteBuffer73);
        java.util.List<java.lang.Object> objList80 = compositeListSerializer22.fromByteBuffer(byteBuffer73);
        boolean boolean81 = composite9.containsAll((java.util.Collection<java.lang.Object>) objList80);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray86 = new byte[] {};
        int int87 = comparators.Composite.compare(byteArray85, byteArray86);
        java.util.List<java.lang.Object> objList88 = comparators.Composite.deserialize(byteArray86);
        byte[] byteArray89 = comparators.Composite.serialize(objList88);
        java.util.stream.Stream<java.lang.Object> objStream90 = objList88.parallelStream();
        comparators.Composite composite91 = new comparators.Composite(objList88);
        java.lang.Object[] objArray92 = composite91.toArray();
        int int93 = composite91.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream94 = composite91.parallelStream();
        java.io.ByteArrayOutputStream byteArrayOutputStream95 = composite91.byteStream;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = composite9.retainAll((java.util.Collection<java.lang.Object>) composite91);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(objList29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(objList42);
        org.junit.Assert.assertNull(byteArray43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(composite72);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(objList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(objList88);
        org.junit.Assert.assertNull(byteArray89);
        org.junit.Assert.assertNotNull(objStream90);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray92), "[]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(objStream94);
        org.junit.Assert.assertNull(byteArrayOutputStream95);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite65.startOffset;
        int int72 = composite17.compareTo(composite65);
        comparators.Composite composite74 = composite17.addLong((long) 80);
        java.io.DataOutputStream dataOutputStream75 = composite17.out;
        java.util.stream.Stream<java.lang.Object> objStream76 = composite17.parallelStream();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(dataOutputStream75);
        org.junit.Assert.assertNotNull(objStream76);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        composite9.startOffset = (byte) 1;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        comparators.Composite composite31 = composite25.addBool(true);
        java.util.Iterator<java.lang.Object> objItor32 = composite25.iterator();
        comparators.Composite composite33 = new comparators.Composite();
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        int int48 = composite33.compareTo(composite43);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteArray53);
        byte[] byteArray56 = comparators.Composite.serialize(objList55);
        java.util.stream.Stream<java.lang.Object> objStream57 = objList55.parallelStream();
        comparators.Composite composite58 = new comparators.Composite(objList55);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        boolean boolean67 = comparators.Composite.validate((int) ' ', byteArray64, true);
        boolean boolean68 = composite58.contains((java.lang.Object) boolean67);
        java.util.stream.Stream<java.lang.Object> objStream69 = composite58.parallelStream();
        boolean boolean70 = composite33.contains((java.lang.Object) composite58);
        boolean boolean71 = composite25.addAll((java.util.Collection<java.lang.Object>) composite33);
        int int72 = composite33.startOffset;
        comparators.Composite composite74 = composite33.addAscii("hi!");
        boolean boolean75 = composite9.add((java.lang.Object) composite33);
        java.util.stream.Stream<java.lang.Object> objStream76 = composite33.parallelStream();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(objItor32);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objStream76);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        byte[] byteArray20 = comparators.Composite.serialize(objList18);
        byte[] byteArray21 = compositeListSerializer0.toBytes(objList18);
        java.util.List<java.util.List<java.lang.Object>> objListList22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.nio.ByteBuffer> byteBufferList23 = compositeListSerializer0.toBytesList(objListList22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNull(byteArray21);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        comparators.hector.CompositeListSerializer compositeListSerializer15 = new comparators.hector.CompositeListSerializer();
        boolean boolean16 = composite9.contains((java.lang.Object) compositeListSerializer15);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        comparators.Composite composite32 = composite26.addBool(true);
        java.util.Iterator<java.lang.Object> objItor33 = composite26.iterator();
        comparators.Composite composite34 = new comparators.Composite();
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.lang.Object[] objArray45 = composite44.toArray();
        int int46 = composite44.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream47 = composite44.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream48 = composite44.parallelStream();
        int int49 = composite34.compareTo(composite44);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray65 = new byte[] {};
        int int66 = comparators.Composite.compare(byteArray64, byteArray65);
        boolean boolean68 = comparators.Composite.validate((int) ' ', byteArray65, true);
        boolean boolean69 = composite59.contains((java.lang.Object) boolean68);
        java.util.stream.Stream<java.lang.Object> objStream70 = composite59.parallelStream();
        boolean boolean71 = composite34.contains((java.lang.Object) composite59);
        boolean boolean72 = composite26.addAll((java.util.Collection<java.lang.Object>) composite34);
        int int73 = comparators.Composite.compare(composite9, composite26);
        composite9.startOffset = 2;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(composite32);
        org.junit.Assert.assertNotNull(objItor33);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        comparators.Composite composite38 = composite11.addBytes(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = composite38.serializeToByteBuffer();
        compositeType1.validate(byteBuffer39);
        boolean boolean41 = comparators.Composite.validate(byteBuffer39);
        comparators.Composite composite42 = new comparators.Composite(byteBuffer39);
        java.nio.ByteBuffer byteBuffer43 = null;
        int int44 = compositeType0.compare(byteBuffer39, byteBuffer43);
        comparators.Composite composite45 = new comparators.Composite(byteBuffer39);
        comparators.Composite composite46 = new comparators.Composite(byteBuffer39);
        byte[] byteArray50 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray51 = new byte[] {};
        int int52 = comparators.Composite.compare(byteArray50, byteArray51);
        java.util.List<java.lang.Object> objList53 = comparators.Composite.deserialize(byteArray51);
        byte[] byteArray54 = comparators.Composite.serialize(objList53);
        java.util.stream.Stream<java.lang.Object> objStream55 = objList53.parallelStream();
        comparators.Composite composite56 = new comparators.Composite(objList53);
        java.lang.Object[] objArray57 = composite56.toArray();
        int int58 = composite56.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream59 = composite56.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream60 = composite56.parallelStream();
        int int61 = composite56.startOffset;
        int int62 = composite56.startOffset;
        int int63 = comparators.Composite.compare(composite46, composite56);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray68 = new byte[] {};
        int int69 = comparators.Composite.compare(byteArray67, byteArray68);
        java.util.List<java.lang.Object> objList70 = comparators.Composite.deserialize(byteArray68);
        byte[] byteArray71 = comparators.Composite.serialize(objList70);
        java.util.stream.Stream<java.lang.Object> objStream72 = objList70.parallelStream();
        comparators.Composite composite73 = new comparators.Composite(objList70);
        java.lang.Object[] objArray74 = composite73.toArray();
        int int75 = composite73.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream76 = composite73.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream77 = composite73.parallelStream();
        comparators.Composite composite79 = composite73.addBool(true);
        comparators.Composite composite81 = composite79.addLong((long) 6);
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray89 = new byte[] {};
        int int90 = comparators.Composite.compare(byteArray88, byteArray89);
        java.util.List<java.lang.Object> objList91 = comparators.Composite.deserialize(byteArray89);
        boolean boolean92 = comparators.Composite.validate(0, byteArray89);
        boolean boolean93 = comparators.Composite.validate(4, byteArray89);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator94 = composite46.new CompositeTypeIterator(composite81, 77, byteArray89);
        java.util.UUID uUID95 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite96 = composite46.addTimeUUID(uUID95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(objList53);
        org.junit.Assert.assertNull(byteArray54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(objList70);
        org.junit.Assert.assertNull(byteArray71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(objStream76);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(objList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray38 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray39 = composite9.toArray(compositeListSerializerArray38);
        comparators.Composite composite40 = new comparators.Composite((java.lang.Object[]) compositeListSerializerArray39);
        byte[] byteArray41 = comparators.Composite.serialize((java.lang.Object[]) compositeListSerializerArray39);
        byte[] byteArray42 = comparators.Composite.serialize((java.lang.Object[]) compositeListSerializerArray39);
        comparators.Composite composite43 = new comparators.Composite((java.lang.Object[]) compositeListSerializerArray39);
        comparators.Composite composite45 = composite43.addAscii("true");
        comparators.hector.CompositeSerializer compositeSerializer46 = new comparators.hector.CompositeSerializer();
        byte[] byteArray50 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray51 = new byte[] {};
        int int52 = comparators.Composite.compare(byteArray50, byteArray51);
        java.util.List<java.lang.Object> objList53 = comparators.Composite.deserialize(byteArray51);
        byte[] byteArray54 = comparators.Composite.serialize(objList53);
        java.util.stream.Stream<java.lang.Object> objStream55 = objList53.parallelStream();
        comparators.Composite composite56 = new comparators.Composite(objList53);
        java.lang.Object[] objArray57 = composite56.toArray();
        int int58 = composite56.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream59 = composite56.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream60 = composite56.parallelStream();
        int int61 = composite56.startOffset;
        composite56.clear();
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray68 = new byte[] {};
        int int69 = comparators.Composite.compare(byteArray67, byteArray68);
        java.util.List<java.lang.Object> objList70 = comparators.Composite.deserialize(byteArray68);
        byte[] byteArray71 = comparators.Composite.serialize(objList70);
        java.util.stream.Stream<java.lang.Object> objStream72 = objList70.parallelStream();
        comparators.Composite composite73 = new comparators.Composite(objList70);
        java.lang.Object[] objArray74 = composite73.toArray();
        int int75 = composite73.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream76 = composite73.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream77 = composite73.parallelStream();
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray82 = new byte[] {};
        int int83 = comparators.Composite.compare(byteArray81, byteArray82);
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray88 = new byte[] {};
        int int89 = comparators.Composite.compare(byteArray87, byteArray88);
        int int90 = comparators.Composite.compare(byteArray81, byteArray88);
        java.util.List<java.lang.Object> objList91 = comparators.Composite.deserialize(byteArray88);
        composite73.bytes = byteArray88;
        boolean boolean93 = comparators.Composite.validate(1, byteArray88);
        composite56.bytes = byteArray88;
        comparators.Composite composite95 = compositeSerializer46.fromBytes(byteArray88);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = composite45.removeAll((java.util.Collection<java.lang.Object>) composite95);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray38);
        org.junit.Assert.assertNotNull(compositeListSerializerArray39);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(composite45);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(objList53);
        org.junit.Assert.assertNull(byteArray54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(objList70);
        org.junit.Assert.assertNull(byteArray71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(objStream76);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(objList91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(composite95);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        comparators.Composite composite37 = composite10.addBytes(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = composite37.serializeToByteBuffer();
        compositeType0.validate(byteBuffer38);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator41 = compositeType0.thenComparing(byteBufferComparator40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteBuffer38);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        compositeTypeIterator80.offset = 1;
        int int84 = compositeTypeIterator80.type;
        byte[] byteArray85 = compositeTypeIterator80.bytes;
        compositeTypeIterator80.type = 10;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        boolean boolean6 = comparators.Composite.isValidType((java.lang.Object) compositeType0);
        comparators.CompositeType compositeType7 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator8 = compositeType7.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        java.nio.ByteBuffer byteBuffer10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = compositeType7.getString(byteBuffer10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexInfoComparator8);
        org.junit.Assert.assertNotNull(byteBufferComparator9);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        boolean boolean6 = comparators.Composite.isValidType((java.lang.Object) compositeType0);
        comparators.hector.CompositeListSerializer compositeListSerializer7 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType8 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray9 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList10 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList10, byteBufferArray9);
        java.lang.String str12 = compositeType8.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList10);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator13 = compositeType8.indexComparator;
        comparators.CompositeType compositeType14 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray15 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList16 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16, byteBufferArray15);
        java.lang.String str18 = compositeType14.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator19 = compositeType8.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType14);
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.lang.String str25 = compositeType14.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.util.List<java.util.List<java.lang.Object>> objListList26 = compositeListSerializer7.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList22);
        int int28 = compositeListSerializer7.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer29 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType30 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray31 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList32 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32, byteBufferArray31);
        java.lang.String str34 = compositeType30.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator35 = compositeType30.indexComparator;
        comparators.CompositeType compositeType36 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray37 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList38 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38, byteBufferArray37);
        java.lang.String str40 = compositeType36.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator41 = compositeType30.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType36);
        comparators.CompositeType compositeType42 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray43 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList44 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44, byteBufferArray43);
        java.lang.String str46 = compositeType42.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44);
        java.lang.String str47 = compositeType36.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44);
        java.util.List<java.util.List<java.lang.Object>> objListList48 = compositeListSerializer29.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList44);
        comparators.hector.CompositeListSerializer compositeListSerializer49 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType50 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray51 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList52 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52, byteBufferArray51);
        java.lang.String str54 = compositeType50.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator55 = compositeType50.indexComparator;
        comparators.CompositeType compositeType56 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray57 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList58 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58, byteBufferArray57);
        java.lang.String str60 = compositeType56.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator61 = compositeType50.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType56);
        comparators.CompositeType compositeType62 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray63 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList64 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64, byteBufferArray63);
        java.lang.String str66 = compositeType62.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64);
        java.lang.String str67 = compositeType56.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64);
        java.util.List<java.util.List<java.lang.Object>> objListList68 = compositeListSerializer49.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList64);
        int int70 = compositeListSerializer49.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer71 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType72 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray73 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList74 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList74, byteBufferArray73);
        java.lang.String str76 = compositeType72.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList74);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator77 = compositeType72.indexComparator;
        comparators.CompositeType compositeType78 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray79 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList80 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList80, byteBufferArray79);
        java.lang.String str82 = compositeType78.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList80);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator83 = compositeType72.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType78);
        comparators.CompositeType compositeType84 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray85 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList86 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList86, byteBufferArray85);
        java.lang.String str88 = compositeType84.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList86);
        java.lang.String str89 = compositeType78.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList86);
        java.util.List<java.util.List<java.lang.Object>> objListList90 = compositeListSerializer71.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList86);
        java.util.List<java.nio.ByteBuffer> byteBufferList91 = compositeListSerializer49.toBytesList(objListList90);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet92 = compositeListSerializer29.toBytesSet(objListList90);
        java.util.List<java.util.List<java.lang.Object>> objListList93 = compositeListSerializer7.fromBytesSet(byteBufferSet92);
        java.lang.String str94 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferSet92);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator95 = compositeType0.indexComparator;
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(compositeType8);
        org.junit.Assert.assertNotNull(byteBufferArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(indexInfoComparator13);
        org.junit.Assert.assertNotNull(compositeType14);
        org.junit.Assert.assertNotNull(byteBufferArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteBufferComparator19);
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(objListList26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(compositeType30);
        org.junit.Assert.assertNotNull(byteBufferArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(indexInfoComparator35);
        org.junit.Assert.assertNotNull(compositeType36);
        org.junit.Assert.assertNotNull(byteBufferArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteBufferComparator41);
        org.junit.Assert.assertNotNull(compositeType42);
        org.junit.Assert.assertNotNull(byteBufferArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(objListList48);
        org.junit.Assert.assertNotNull(compositeType50);
        org.junit.Assert.assertNotNull(byteBufferArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(indexInfoComparator55);
        org.junit.Assert.assertNotNull(compositeType56);
        org.junit.Assert.assertNotNull(byteBufferArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteBufferComparator61);
        org.junit.Assert.assertNotNull(compositeType62);
        org.junit.Assert.assertNotNull(byteBufferArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(objListList68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 6 + "'", int70 == 6);
        org.junit.Assert.assertNotNull(compositeType72);
        org.junit.Assert.assertNotNull(byteBufferArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(indexInfoComparator77);
        org.junit.Assert.assertNotNull(compositeType78);
        org.junit.Assert.assertNotNull(byteBufferArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(byteBufferComparator83);
        org.junit.Assert.assertNotNull(compositeType84);
        org.junit.Assert.assertNotNull(byteBufferArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(objListList90);
        org.junit.Assert.assertNotNull(byteBufferList91);
        org.junit.Assert.assertNotNull(byteBufferSet92);
        org.junit.Assert.assertNotNull(objListList93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNotNull(indexInfoComparator95);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        boolean boolean25 = comparators.Composite.isValidType((java.lang.Object) composite9);
        composite9.clear();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        byte[] byteArray1 = null;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray13 = new byte[] {};
        int int14 = comparators.Composite.compare(byteArray12, byteArray13);
        int int15 = comparators.Composite.compare(byteArray6, byteArray13);
        int int16 = comparators.Composite.compare((int) (byte) 1, byteArray1, 10, byteArray6);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        boolean boolean25 = comparators.Composite.validate(0, byteArray22);
        byte[] byteArray26 = null;
        int int27 = comparators.Composite.compare(byteArray22, byteArray26);
        int int28 = comparators.Composite.compare(byteArray6, byteArray22);
        comparators.Composite composite29 = new comparators.Composite(byteArray22);
        java.util.UUID uUID30 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite31 = composite29.addTimeUUID(uUID30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        comparators.Composite composite36 = composite9.addBytes(byteArray34);
        java.util.List<java.lang.Object> objList37 = comparators.Composite.deserialize(byteArray34);
        comparators.Composite composite38 = new comparators.Composite(objList37);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray45 = new byte[] {};
        int int46 = comparators.Composite.compare(byteArray44, byteArray45);
        boolean boolean48 = comparators.Composite.validate((int) ' ', byteArray45, true);
        boolean boolean49 = comparators.Composite.validate((int) (short) 0, byteArray45);
        boolean boolean50 = composite38.contains((java.lang.Object) boolean49);
        java.io.DataOutputStream dataOutputStream51 = composite38.out;
        comparators.Composite composite53 = composite38.addUTF8("Placeholder(100)");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean55 = composite38.remove((java.lang.Object) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(objList37);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(dataOutputStream51);
        org.junit.Assert.assertNotNull(composite53);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        comparators.hector.CompositeListSerializer compositeListSerializer19 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator25 = compositeType20.indexComparator;
        comparators.CompositeType compositeType26 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray27 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList28 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28, byteBufferArray27);
        java.lang.String str30 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType20.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType26);
        comparators.CompositeType compositeType32 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray33 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList34 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34, byteBufferArray33);
        java.lang.String str36 = compositeType32.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34);
        java.lang.String str37 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34);
        java.util.List<java.util.List<java.lang.Object>> objListList38 = compositeListSerializer19.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList34);
        comparators.hector.CompositeListSerializer compositeListSerializer39 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator45 = compositeType40.indexComparator;
        comparators.CompositeType compositeType46 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray47 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList48 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48, byteBufferArray47);
        java.lang.String str50 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator51 = compositeType40.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType46);
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray53 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList54 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54, byteBufferArray53);
        java.lang.String str56 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        java.lang.String str57 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        java.util.List<java.util.List<java.lang.Object>> objListList58 = compositeListSerializer39.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList54);
        int int60 = compositeListSerializer39.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer61 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType62 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray63 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList64 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64, byteBufferArray63);
        java.lang.String str66 = compositeType62.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator67 = compositeType62.indexComparator;
        comparators.CompositeType compositeType68 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray69 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList70 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList70, byteBufferArray69);
        java.lang.String str72 = compositeType68.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList70);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator73 = compositeType62.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType68);
        comparators.CompositeType compositeType74 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray75 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList76 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList76, byteBufferArray75);
        java.lang.String str78 = compositeType74.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList76);
        java.lang.String str79 = compositeType68.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList76);
        java.util.List<java.util.List<java.lang.Object>> objListList80 = compositeListSerializer61.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList76);
        java.util.List<java.nio.ByteBuffer> byteBufferList81 = compositeListSerializer39.toBytesList(objListList80);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet82 = compositeListSerializer19.toBytesSet(objListList80);
        java.util.List<comparators.Composite> compositeList83 = compositeSerializer0.fromBytesSet(byteBufferSet82);
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray89 = new byte[] {};
        int int90 = comparators.Composite.compare(byteArray88, byteArray89);
        java.util.List<java.lang.Object> objList91 = comparators.Composite.deserialize(byteArray89);
        boolean boolean92 = comparators.Composite.validate(0, byteArray89);
        comparators.Composite composite93 = compositeSerializer0.fromBytes(byteArray89);
        int int95 = compositeSerializer0.computeInitialHashSize((int) (short) 10);
        java.util.List<comparators.Composite> compositeList96 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<java.nio.ByteBuffer> byteBufferSet97 = compositeSerializer0.toBytesSet(compositeList96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexInfoComparator25);
        org.junit.Assert.assertNotNull(compositeType26);
        org.junit.Assert.assertNotNull(byteBufferArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(compositeType32);
        org.junit.Assert.assertNotNull(byteBufferArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(objListList38);
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(indexInfoComparator45);
        org.junit.Assert.assertNotNull(compositeType46);
        org.junit.Assert.assertNotNull(byteBufferArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteBufferComparator51);
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(objListList58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 6 + "'", int60 == 6);
        org.junit.Assert.assertNotNull(compositeType62);
        org.junit.Assert.assertNotNull(byteBufferArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(indexInfoComparator67);
        org.junit.Assert.assertNotNull(compositeType68);
        org.junit.Assert.assertNotNull(byteBufferArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(byteBufferComparator73);
        org.junit.Assert.assertNotNull(compositeType74);
        org.junit.Assert.assertNotNull(byteBufferArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(objListList80);
        org.junit.Assert.assertNotNull(byteBufferList81);
        org.junit.Assert.assertNotNull(byteBufferSet82);
        org.junit.Assert.assertNotNull(compositeList83);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(objList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(composite93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 14 + "'", int95 == 14);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.util.RandomAccess[] randomAccessArray11 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray12 = composite10.toArray(randomAccessArray11);
        comparators.Composite composite14 = composite10.addLong((long) 67);
        byte[] byteArray15 = composite14.serialize();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(80, byteArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 84");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(randomAccessArray12);
        org.junit.Assert.assertNotNull(composite14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        byte[] byteArray1 = null;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray13 = new byte[] {};
        int int14 = comparators.Composite.compare(byteArray12, byteArray13);
        int int15 = comparators.Composite.compare(byteArray6, byteArray13);
        int int16 = comparators.Composite.compare((int) (byte) 1, byteArray1, 10, byteArray6);
        java.util.List<java.lang.Object> objList17 = comparators.Composite.deserialize(byteArray1);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(objList17);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        comparators.Composite composite11 = new comparators.Composite();
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        java.util.stream.Stream<java.lang.Object> objStream20 = objList18.parallelStream();
        comparators.Composite composite21 = new comparators.Composite(objList18);
        java.lang.Object[] objArray22 = composite21.toArray();
        int int23 = composite21.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream24 = composite21.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream25 = composite21.parallelStream();
        int int26 = composite11.compareTo(composite21);
        comparators.hector.CompositeListSerializer compositeListSerializer27 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray29 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList30 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30, byteBufferArray29);
        java.lang.String str32 = compositeType28.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator33 = compositeType28.indexComparator;
        comparators.CompositeType compositeType34 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray35 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList36 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList36, byteBufferArray35);
        java.lang.String str38 = compositeType34.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList36);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator39 = compositeType28.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType34);
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.lang.String str45 = compositeType34.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.List<java.util.List<java.lang.Object>> objListList46 = compositeListSerializer27.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList42);
        comparators.CompositeType compositeType47 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator48 = compositeType47.indexComparator;
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator50 = compositeType47.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType49);
        java.lang.Object[] objArray51 = new java.lang.Object[] { compositeListSerializer27, compositeType49 };
        java.lang.Object[][] objArray52 = new java.lang.Object[][] { objArray51 };
        java.lang.Object[][] objArray53 = composite11.toArray(objArray52);
        java.lang.Object[][] objArray54 = composite9.toArray(objArray53);
        comparators.Composite composite55 = new comparators.Composite((java.lang.Object[]) objArray53);
        comparators.Composite composite56 = new comparators.Composite((java.lang.Object[]) objArray53);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteBufferArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(indexInfoComparator33);
        org.junit.Assert.assertNotNull(compositeType34);
        org.junit.Assert.assertNotNull(byteBufferArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteBufferComparator39);
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(objListList46);
        org.junit.Assert.assertNotNull(indexInfoComparator48);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferComparator50);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertNotNull(objArray54);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        java.lang.Object[] objArray13 = composite9.toArray();
        int int14 = composite9.startOffset;
        composite9.startOffset = (byte) 10;
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.util.RandomAccess[] randomAccessArray34 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray35 = composite33.toArray(randomAccessArray34);
        comparators.Composite composite37 = composite33.addLong((long) 67);
        byte[] byteArray38 = composite37.serialize();
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray38);
        int int40 = comparators.Composite.compare(byteArray21, byteArray38);
        comparators.hector.CompositeSerializer compositeSerializer41 = new comparators.hector.CompositeSerializer();
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        comparators.Composite composite57 = composite51.addBool(true);
        java.io.DataOutputStream dataOutputStream58 = composite51.out;
        byte[] byteArray59 = compositeSerializer41.toBytes(composite51);
        int int60 = comparators.Composite.compare(byteArray38, byteArray59);
        composite9.bytes = byteArray38;
        boolean boolean62 = comparators.Composite.isValidType((java.lang.Object) composite9);
        composite9.startOffset = '4';
        java.io.ByteArrayOutputStream byteArrayOutputStream65 = composite9.byteStream;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(randomAccessArray34);
        org.junit.Assert.assertNotNull(randomAccessArray35);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(composite57);
        org.junit.Assert.assertNotNull(dataOutputStream58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(byteArrayOutputStream65);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        comparators.CompositeType compositeType9 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray10 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList11 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11, byteBufferArray10);
        java.lang.String str13 = compositeType9.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType9.indexComparator;
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator20 = compositeType9.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType15);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator21 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType9);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer23 = compositeType9.fromString("US-ASCII");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(compositeType9);
        org.junit.Assert.assertNotNull(byteBufferArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteBufferComparator20);
        org.junit.Assert.assertNotNull(byteBufferComparator21);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator12 = compositeType0.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType0.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator15 = compositeType0.reversed();
        java.util.Collection<java.nio.ByteBuffer> byteBufferCollection16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = compositeType0.getString(byteBufferCollection16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(indexInfoComparator12);
        org.junit.Assert.assertNotNull(byteBufferComparator13);
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(byteBufferComparator15);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        org.apache.cassandra.db.IColumn[] iColumnArray9 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList10 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList10, iColumnArray9);
        java.lang.String str12 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList10);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        org.apache.cassandra.db.IColumn[] iColumnArray18 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList19 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList19, iColumnArray18);
        java.lang.String str21 = compositeType13.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList19);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType13.getReverseComparator();
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        org.apache.cassandra.db.IColumn[] iColumnArray28 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList29 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList29, iColumnArray28);
        java.lang.String str31 = compositeType23.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList29);
        java.lang.String str32 = compositeType13.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList29);
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator38 = compositeType33.indexComparator;
        comparators.CompositeType compositeType39 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray40 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList41 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41, byteBufferArray40);
        java.lang.String str43 = compositeType39.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator44 = compositeType33.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType39);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator45 = compositeType13.thenComparing(byteBufferComparator44);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator46 = compositeType0.thenComparing(byteBufferComparator44);
        java.util.Collection<org.apache.cassandra.db.IColumn> iColumnCollection47 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str48 = compositeType0.getColumnsString(iColumnCollection47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(iColumnArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(iColumnArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(iColumnArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(indexInfoComparator38);
        org.junit.Assert.assertNotNull(compositeType39);
        org.junit.Assert.assertNotNull(byteBufferArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteBufferComparator44);
        org.junit.Assert.assertNotNull(byteBufferComparator45);
        org.junit.Assert.assertNotNull(byteBufferComparator46);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        comparators.Composite composite34 = composite28.addBool(true);
        comparators.Composite composite36 = composite34.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream37 = composite34.byteStream;
        java.nio.ByteBuffer byteBuffer38 = compositeSerializer0.toByteBuffer(composite34);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        java.lang.Object[] objArray49 = composite48.toArray();
        int int50 = composite48.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream51 = composite48.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream52 = composite48.parallelStream();
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        java.util.List<java.lang.Object> objList59 = comparators.Composite.deserialize(byteArray57);
        byte[] byteArray60 = comparators.Composite.serialize(objList59);
        java.util.stream.Stream<java.lang.Object> objStream61 = objList59.parallelStream();
        comparators.Composite composite62 = new comparators.Composite(objList59);
        java.lang.Object[] objArray63 = composite62.toArray();
        int int64 = composite62.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream65 = composite62.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream66 = composite62.parallelStream();
        int int67 = composite62.startOffset;
        int int68 = composite48.compareTo(composite62);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        comparators.Composite composite75 = composite48.addBytes(byteArray73);
        java.nio.ByteBuffer byteBuffer76 = composite75.serializeToByteBuffer();
        comparators.Composite composite77 = compositeSerializer0.fromByteBuffer(byteBuffer76);
        composite77.startOffset = 2;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = composite77.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.cassandra.db.marshal.MarshalException; message: Not a composite type (ID byte 0 incorrect)");
        } catch (org.apache.cassandra.db.marshal.MarshalException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArrayOutputStream37);
        org.junit.Assert.assertEquals(byteArrayOutputStream37.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(composite77);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        composite9.startOffset = 1;
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        java.util.List<java.lang.Object> objList29 = comparators.Composite.deserialize(byteArray27);
        byte[] byteArray30 = comparators.Composite.serialize(objList29);
        java.util.stream.Stream<java.lang.Object> objStream31 = objList29.parallelStream();
        comparators.Composite composite32 = new comparators.Composite(objList29);
        java.lang.Object[] objArray33 = composite32.toArray();
        int int34 = composite32.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream35 = composite32.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream36 = composite32.parallelStream();
        comparators.Composite composite38 = composite32.addBool(true);
        java.io.DataOutputStream dataOutputStream39 = composite32.out;
        composite9.out = dataOutputStream39;
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray45 = new byte[] {};
        int int46 = comparators.Composite.compare(byteArray44, byteArray45);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray45);
        byte[] byteArray48 = comparators.Composite.serialize(objList47);
        java.util.stream.Stream<java.lang.Object> objStream49 = objList47.parallelStream();
        comparators.Composite composite50 = new comparators.Composite(objList47);
        java.lang.Object[] objArray51 = composite50.toArray();
        int int52 = composite50.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream53 = composite50.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream54 = composite50.parallelStream();
        int int55 = composite50.startOffset;
        int int56 = composite50.startOffset;
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        java.util.List<java.lang.Object> objList63 = comparators.Composite.deserialize(byteArray61);
        byte[] byteArray64 = comparators.Composite.serialize(objList63);
        java.util.stream.Stream<java.lang.Object> objStream65 = objList63.parallelStream();
        comparators.Composite composite66 = new comparators.Composite(objList63);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray72 = new byte[] {};
        int int73 = comparators.Composite.compare(byteArray71, byteArray72);
        boolean boolean75 = comparators.Composite.validate((int) ' ', byteArray72, true);
        boolean boolean76 = composite66.contains((java.lang.Object) boolean75);
        java.util.Spliterator<java.lang.Object> objSpliterator77 = composite66.spliterator();
        boolean boolean78 = composite50.containsAll((java.util.Collection<java.lang.Object>) composite66);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray79 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray80 = composite50.toArray(compositeListSerializerArray79);
        comparators.Composite composite82 = composite50.addLong((long) (short) 100);
        boolean boolean83 = composite9.contains((java.lang.Object) composite82);
        java.util.Spliterator<java.lang.Object> objSpliterator84 = composite82.spliterator();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(objList29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(dataOutputStream39);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNull(byteArray48);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(objList63);
        org.junit.Assert.assertNull(byteArray64);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objSpliterator77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray79);
        org.junit.Assert.assertNotNull(compositeListSerializerArray80);
        org.junit.Assert.assertNotNull(composite82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objSpliterator84);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        comparators.Composite composite37 = composite9.addLong((long) (short) 1);
        comparators.Composite composite39 = composite37.addBool(true);
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator45 = compositeType40.indexComparator;
        boolean boolean46 = comparators.Composite.isValidType((java.lang.Object) compositeType40);
        org.apache.cassandra.db.IColumn[] iColumnArray47 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList48 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList48, iColumnArray47);
        java.lang.String str50 = compositeType40.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList48);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean51 = composite37.remove((java.lang.Object) iColumnList48);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(indexInfoComparator45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(iColumnArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray11 = new byte[] {};
        int int12 = comparators.Composite.compare(byteArray10, byteArray11);
        int int13 = comparators.Composite.compare(byteArray4, byteArray11);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray11);
        comparators.Composite composite15 = compositeSerializer0.fromBytes(byteArray11);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        comparators.Composite composite31 = composite25.addBool(true);
        java.util.Iterator<java.lang.Object> objItor32 = composite25.iterator();
        comparators.Composite composite34 = composite25.addReal((java.lang.Double) 100.0d);
        java.nio.ByteBuffer byteBuffer35 = compositeSerializer0.toByteBuffer(composite34);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(byteArray40);
        byte[] byteArray43 = comparators.Composite.serialize(objList42);
        java.util.stream.Stream<java.lang.Object> objStream44 = objList42.parallelStream();
        comparators.Composite composite45 = new comparators.Composite(objList42);
        byte[] byteArray50 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray51 = new byte[] {};
        int int52 = comparators.Composite.compare(byteArray50, byteArray51);
        boolean boolean54 = comparators.Composite.validate((int) ' ', byteArray51, true);
        boolean boolean55 = composite45.contains((java.lang.Object) boolean54);
        java.util.Spliterator<java.lang.Object> objSpliterator56 = composite45.spliterator();
        int int57 = composite45.startOffset;
        byte[] byteArray58 = null;
        composite45.bytes = byteArray58;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer60 = compositeSerializer0.toByteBuffer(composite45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(objItor32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(objList42);
        org.junit.Assert.assertNull(byteArray43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objSpliterator56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        byte[] byteArray0 = null;
        comparators.Composite composite1 = new comparators.Composite(byteArray0);
        boolean boolean2 = composite1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 80;
        compositeTypeIterator80.len = (short) 1;
        java.lang.Class<?> wildcardClass85 = compositeTypeIterator80.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        byte[] byteArray2 = null;
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray8 = new byte[] {};
        int int9 = comparators.Composite.compare(byteArray7, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        int int16 = comparators.Composite.compare(byteArray7, byteArray14);
        int int17 = comparators.Composite.compare((int) (byte) 1, byteArray2, 10, byteArray7);
        comparators.hector.CompositeSerializer compositeSerializer19 = new comparators.hector.CompositeSerializer();
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.util.RandomAccess[] randomAccessArray30 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray31 = composite29.toArray(randomAccessArray30);
        comparators.Composite composite33 = composite29.addLong((long) 67);
        byte[] byteArray34 = composite33.serialize();
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray34);
        comparators.Composite composite36 = new comparators.Composite(byteArray34);
        comparators.Composite composite37 = compositeSerializer19.fromBytes(byteArray34);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(0, byteArray34);
        int int39 = comparators.Composite.compare(byteArray2, byteArray34);
        boolean boolean41 = comparators.Composite.validate((-1), byteArray2, true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(randomAccessArray30);
        org.junit.Assert.assertNotNull(randomAccessArray31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray11 = new byte[] {};
        int int12 = comparators.Composite.compare(byteArray10, byteArray11);
        int int13 = comparators.Composite.compare(byteArray4, byteArray11);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray11);
        comparators.Composite composite15 = compositeSerializer0.fromBytes(byteArray11);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        comparators.Composite composite31 = composite25.addBool(true);
        java.util.Iterator<java.lang.Object> objItor32 = composite25.iterator();
        comparators.Composite composite34 = composite25.addReal((java.lang.Double) 100.0d);
        java.nio.ByteBuffer byteBuffer35 = compositeSerializer0.toByteBuffer(composite34);
        comparators.Composite composite36 = new comparators.Composite(byteBuffer35);
        boolean boolean37 = comparators.Composite.validate(byteBuffer35);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(objItor32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(byteBuffer35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addUTF8("UTF-8");
        java.lang.Class<?> wildcardClass14 = composite9.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        compositeTypeIterator80.offset = 13;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj85 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        boolean boolean15 = composite9.isEmpty();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        int int26 = composite25.size();
        boolean boolean27 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray32 = new byte[] {};
        int int33 = comparators.Composite.compare(byteArray31, byteArray32);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray32);
        byte[] byteArray35 = comparators.Composite.serialize(objList34);
        java.util.stream.Stream<java.lang.Object> objStream36 = objList34.parallelStream();
        comparators.Composite composite37 = new comparators.Composite(objList34);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        boolean boolean46 = comparators.Composite.validate((int) ' ', byteArray43, true);
        boolean boolean47 = composite37.contains((java.lang.Object) boolean46);
        java.util.stream.Stream<java.lang.Object> objStream48 = composite37.parallelStream();
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteArray53);
        byte[] byteArray56 = comparators.Composite.serialize(objList55);
        java.util.stream.Stream<java.lang.Object> objStream57 = objList55.parallelStream();
        comparators.Composite composite58 = new comparators.Composite(objList55);
        java.lang.Object[] objArray59 = composite58.toArray();
        int int60 = composite58.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream61 = composite58.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream62 = composite58.parallelStream();
        comparators.Composite composite64 = composite58.addBool(true);
        java.io.DataOutputStream dataOutputStream65 = composite58.out;
        composite37.out = dataOutputStream65;
        composite25.out = dataOutputStream65;
        java.util.UUID uUID68 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite69 = composite25.addTimeUUID(uUID68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(composite64);
        org.junit.Assert.assertNotNull(dataOutputStream65);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        byte[] byteArray82 = compositeTypeIterator80.bytes;
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray87 = new byte[] {};
        int int88 = comparators.Composite.compare(byteArray86, byteArray87);
        byte[] byteArray92 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray93 = new byte[] {};
        int int94 = comparators.Composite.compare(byteArray92, byteArray93);
        int int95 = comparators.Composite.compare(byteArray86, byteArray93);
        boolean boolean96 = comparators.Composite.isValidType((java.lang.Object) byteArray86);
        compositeTypeIterator80.bytes = byteArray86;
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        boolean boolean9 = comparators.Composite.validate(0, byteArray6);
        byte[] byteArray10 = null;
        int int11 = comparators.Composite.compare(byteArray6, byteArray10);
        boolean boolean12 = comparators.Composite.validate(58, byteArray10);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        byte[] byteArray12 = composite9.bytes;
        java.io.DataOutputStream dataOutputStream13 = null;
        composite9.out = dataOutputStream13;
        java.io.ByteArrayOutputStream byteArrayOutputStream15 = null;
        composite9.byteStream = byteArrayOutputStream15;
        java.util.Iterator<java.lang.Object> objItor17 = composite9.iterator();
        java.util.Iterator<java.lang.Object> objItor18 = composite9.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer19 = composite9.serializeToByteBuffer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(objItor17);
        org.junit.Assert.assertNotNull(objItor18);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        comparators.Composite composite0 = new comparators.Composite();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        int int15 = composite0.compareTo(composite10);
        int int16 = composite0.startOffset;
        byte[] byteArray17 = composite0.bytes;
        java.util.UUID uUID18 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite19 = composite0.addLexicalUUID(uUID18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(byteArray17);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.util.RandomAccess[] randomAccessArray11 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray12 = composite10.toArray(randomAccessArray11);
        comparators.Composite composite14 = composite10.addLong((long) 67);
        comparators.Composite composite16 = composite14.addBool(true);
        comparators.Composite composite18 = composite14.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator19 = composite14.spliterator();
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        boolean boolean38 = comparators.Composite.validate((int) ' ', byteArray35, true);
        boolean boolean39 = composite29.contains((java.lang.Object) boolean38);
        java.util.Spliterator<java.lang.Object> objSpliterator40 = composite29.spliterator();
        java.io.DataOutputStream dataOutputStream41 = composite29.out;
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.lang.Object[] objArray53 = composite52.toArray();
        int int54 = composite52.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream55 = composite52.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream56 = composite52.parallelStream();
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        java.util.List<java.lang.Object> objList63 = comparators.Composite.deserialize(byteArray61);
        byte[] byteArray64 = comparators.Composite.serialize(objList63);
        java.util.stream.Stream<java.lang.Object> objStream65 = objList63.parallelStream();
        comparators.Composite composite66 = new comparators.Composite(objList63);
        java.lang.Object[] objArray67 = composite66.toArray();
        int int68 = composite66.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream69 = composite66.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream70 = composite66.parallelStream();
        int int71 = composite66.startOffset;
        int int72 = composite52.compareTo(composite66);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        comparators.Composite composite79 = composite52.addBytes(byteArray77);
        java.util.List<java.lang.Object> objList80 = comparators.Composite.deserialize(byteArray77);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator81 = composite14.new CompositeTypeIterator(composite29, 67, byteArray77);
        comparators.Composite composite82 = compositeTypeIterator81.collection;
        compositeTypeIterator81.offset = 1;
        int int85 = compositeTypeIterator81.type;
        byte[] byteArray86 = compositeTypeIterator81.bytes;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList87 = comparators.Composite.deserialize(134, byteArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 138");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(randomAccessArray12);
        org.junit.Assert.assertNotNull(composite14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(objSpliterator19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objSpliterator40);
        org.junit.Assert.assertNull(dataOutputStream41);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(objList63);
        org.junit.Assert.assertNull(byteArray64);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertNotNull(objList80);
        org.junit.Assert.assertNotNull(composite82);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType7.validate(byteBuffer50);
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray53 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList54 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54, byteBufferArray53);
        java.lang.String str56 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        org.apache.cassandra.db.IColumn[] iColumnArray57 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList58 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58, iColumnArray57);
        java.lang.String str60 = compositeType52.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58);
        org.apache.cassandra.db.IColumn[] iColumnArray61 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList62 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62, iColumnArray61);
        java.lang.String str64 = compositeType52.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62);
        java.lang.String str65 = compositeType7.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62);
        boolean boolean66 = false; // flaky: placeholder0.equals((java.lang.Object) str65);
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        java.lang.String str68 = null; // flaky: placeholder0.toString();
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
// flaky:         org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(iColumnArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(iColumnArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Placeholder(100)" + "'", str68, "Placeholder(100)");
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.stream.Stream<java.lang.Object> objStream18 = composite13.stream();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objStream18);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        int int17 = composite9.startOffset;
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        comparators.Composite composite24 = new comparators.Composite(byteArray22);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = composite9.remove((java.lang.Object) byteArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        comparators.CompositeType compositeType30 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray31 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList32 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32, byteBufferArray31);
        java.lang.String str34 = compositeType30.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator35 = compositeType30.indexComparator;
        comparators.CompositeType compositeType36 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray37 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList38 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38, byteBufferArray37);
        java.lang.String str40 = compositeType36.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator41 = compositeType30.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType36);
        comparators.CompositeType compositeType42 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray43 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList44 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44, byteBufferArray43);
        java.lang.String str46 = compositeType42.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44);
        java.lang.String str47 = compositeType36.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44);
        comparators.CompositeType compositeType48 = comparators.CompositeType.instance;
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteArray53);
        byte[] byteArray56 = comparators.Composite.serialize(objList55);
        java.util.stream.Stream<java.lang.Object> objStream57 = objList55.parallelStream();
        comparators.Composite composite58 = new comparators.Composite(objList55);
        java.lang.Object[] objArray59 = composite58.toArray();
        int int60 = composite58.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream61 = composite58.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream62 = composite58.parallelStream();
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray67 = new byte[] {};
        int int68 = comparators.Composite.compare(byteArray66, byteArray67);
        java.util.List<java.lang.Object> objList69 = comparators.Composite.deserialize(byteArray67);
        byte[] byteArray70 = comparators.Composite.serialize(objList69);
        java.util.stream.Stream<java.lang.Object> objStream71 = objList69.parallelStream();
        comparators.Composite composite72 = new comparators.Composite(objList69);
        java.lang.Object[] objArray73 = composite72.toArray();
        int int74 = composite72.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream75 = composite72.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream76 = composite72.parallelStream();
        int int77 = composite72.startOffset;
        int int78 = composite58.compareTo(composite72);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray83 = new byte[] {};
        int int84 = comparators.Composite.compare(byteArray82, byteArray83);
        comparators.Composite composite85 = composite58.addBytes(byteArray83);
        java.nio.ByteBuffer byteBuffer86 = composite85.serializeToByteBuffer();
        compositeType48.validate(byteBuffer86);
        java.lang.String str88 = compositeType36.getString(byteBuffer86);
        comparators.Composite composite89 = new comparators.Composite(byteBuffer86);
        java.util.Iterator<java.lang.Object> objItor90 = composite89.iterator();
        comparators.Composite.Placeholder placeholder91 = comparators.Composite.MATCH_MAXIMUM;
        int int92 = 0; // flaky: placeholder91.type;
// flaky:         placeholder91.type = 6;
        boolean boolean95 = composite89.contains((java.lang.Object) placeholder91);
        int int96 = composite23.compareTo(composite89);
        int int97 = composite23.startOffset;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(compositeType30);
        org.junit.Assert.assertNotNull(byteBufferArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(indexInfoComparator35);
        org.junit.Assert.assertNotNull(compositeType36);
        org.junit.Assert.assertNotNull(byteBufferArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteBufferComparator41);
        org.junit.Assert.assertNotNull(compositeType42);
        org.junit.Assert.assertNotNull(byteBufferArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(compositeType48);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(objList69);
        org.junit.Assert.assertNull(byteArray70);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(objStream75);
        org.junit.Assert.assertNotNull(objStream76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(composite85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(objItor90);
// flaky:         org.junit.Assert.assertNotNull(placeholder91);
// flaky:         org.junit.Assert.assertTrue("'" + int92 + "' != '" + 100 + "'", int92 == 100);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-1) + "'", int96 == (-1));
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        int int41 = composite39.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream42 = composite39.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream43 = composite39.parallelStream();
        int int44 = composite39.startOffset;
        int int45 = composite25.compareTo(composite39);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        comparators.Composite composite52 = composite25.addBytes(byteArray50);
        java.nio.ByteBuffer byteBuffer53 = composite52.serializeToByteBuffer();
        compositeType15.validate(byteBuffer53);
        boolean boolean55 = comparators.Composite.validate(byteBuffer53);
        comparators.Composite composite56 = new comparators.Composite(byteBuffer53);
        comparators.Composite composite57 = new comparators.Composite(byteBuffer53);
        boolean boolean58 = composite9.addAll((java.util.Collection<java.lang.Object>) composite57);
        comparators.Composite composite60 = composite9.addAscii("Placeholder(100)");
        comparators.Composite composite62 = composite9.addAscii("US-ASCII");
        int int63 = composite9.size();
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray68 = new byte[] {};
        int int69 = comparators.Composite.compare(byteArray67, byteArray68);
        java.util.List<java.lang.Object> objList70 = comparators.Composite.deserialize(byteArray68);
        byte[] byteArray71 = comparators.Composite.serialize(objList70);
        java.util.stream.Stream<java.lang.Object> objStream72 = objList70.parallelStream();
        comparators.Composite composite73 = new comparators.Composite(objList70);
        java.lang.Object[] objArray74 = composite73.toArray();
        int int75 = composite73.startOffset;
        byte[] byteArray76 = composite73.bytes;
        java.io.DataOutputStream dataOutputStream77 = null;
        composite73.out = dataOutputStream77;
        java.io.ByteArrayOutputStream byteArrayOutputStream79 = null;
        composite73.byteStream = byteArrayOutputStream79;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean81 = composite9.retainAll((java.util.Collection<java.lang.Object>) composite73);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(composite52);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(composite60);
        org.junit.Assert.assertNotNull(composite62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(objList70);
        org.junit.Assert.assertNull(byteArray71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNull(byteArray76);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        comparators.Composite composite8 = new comparators.Composite(byteArray5);
        boolean boolean10 = comparators.Composite.validate(10, byteArray5, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        composite9.clear();
        java.util.stream.Stream<java.lang.Object> objStream16 = composite9.stream();
        java.util.UUID uUID17 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite18 = composite9.addTimeUUID(uUID17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objStream16);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        byte[] byteArray12 = composite9.bytes;
        java.io.DataOutputStream dataOutputStream13 = null;
        composite9.out = dataOutputStream13;
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        int int27 = comparators.Composite.compare(byteArray18, byteArray25);
        boolean boolean28 = comparators.Composite.isValidType((java.lang.Object) byteArray18);
        comparators.Composite composite29 = composite9.addBytes(byteArray18);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        int int41 = composite39.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream42 = composite39.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream43 = composite39.parallelStream();
        comparators.Composite composite45 = composite39.addBool(true);
        java.util.Iterator<java.lang.Object> objItor46 = composite39.iterator();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite39.stream();
        byte[] byteArray48 = composite39.bytes;
        int int49 = comparators.Composite.compare(composite29, composite39);
        byte[] byteArray50 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite51 = composite39.addBytes(byteArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(composite45);
        org.junit.Assert.assertNotNull(objItor46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.lang.String str17 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        comparators.hector.CompositeSerializer compositeSerializer18 = new comparators.hector.CompositeSerializer();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray29 = new byte[] {};
        int int30 = comparators.Composite.compare(byteArray28, byteArray29);
        int int31 = comparators.Composite.compare(byteArray22, byteArray29);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray29);
        comparators.Composite composite33 = compositeSerializer18.fromBytes(byteArray29);
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        comparators.Composite composite49 = composite43.addBool(true);
        java.util.Iterator<java.lang.Object> objItor50 = composite43.iterator();
        comparators.Composite composite52 = composite43.addReal((java.lang.Double) 100.0d);
        java.nio.ByteBuffer byteBuffer53 = compositeSerializer18.toByteBuffer(composite52);
        java.lang.String str54 = compositeType6.getString(byteBuffer53);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator55 = compositeType6.indexComparator;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer57 = compositeType6.fromString("Placeholder(-1)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(objItor50);
        org.junit.Assert.assertNotNull(composite52);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "true" + "'", str54, "true");
        org.junit.Assert.assertNotNull(indexInfoComparator55);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.type;
        boolean boolean84 = compositeTypeIterator80.hasNext();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        java.util.UUID uUID11 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite12 = composite9.addLexicalUUID(uUID11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        java.lang.Object[] objArray13 = composite9.toArray();
        comparators.Composite composite15 = composite9.addAscii("");
        int int16 = composite15.size();
        java.util.UUID uUID17 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite18 = composite15.addTimeUUID(uUID17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        boolean boolean45 = comparators.Composite.validate((int) ' ', byteArray42, true);
        boolean boolean46 = composite36.contains((java.lang.Object) boolean45);
        java.util.stream.Stream<java.lang.Object> objStream47 = composite36.parallelStream();
        composite36.startOffset = 8;
        comparators.Composite composite51 = composite36.addAscii("hi!");
        java.lang.String str52 = composite36.toString();
        composite36.startOffset = 2;
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        boolean boolean64 = comparators.Composite.validate((int) ' ', byteArray61, true);
        boolean boolean65 = comparators.Composite.validate(100, byteArray61);
        byte[] byteArray69 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray70 = new byte[] {};
        int int71 = comparators.Composite.compare(byteArray69, byteArray70);
        java.util.List<java.lang.Object> objList72 = comparators.Composite.deserialize(byteArray70);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray77);
        byte[] byteArray80 = comparators.Composite.serialize(objList79);
        java.util.stream.Stream<java.lang.Object> objStream81 = objList79.parallelStream();
        comparators.Composite composite82 = new comparators.Composite(objList79);
        java.util.RandomAccess[] randomAccessArray83 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray84 = composite82.toArray(randomAccessArray83);
        comparators.Composite composite86 = composite82.addLong((long) 67);
        byte[] byteArray87 = composite86.serialize();
        java.util.List<java.lang.Object> objList88 = comparators.Composite.deserialize(byteArray87);
        int int89 = comparators.Composite.compare(byteArray70, byteArray87);
        int int90 = comparators.Composite.compare(byteArray61, byteArray87);
        composite36.bytes = byteArray61;
        composite9.bytes = byteArray61;
        composite9.startOffset = 77;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(composite51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objList72);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNull(byteArray80);
        org.junit.Assert.assertNotNull(objStream81);
        org.junit.Assert.assertNotNull(randomAccessArray83);
        org.junit.Assert.assertNotNull(randomAccessArray84);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        comparators.Composite composite11 = new comparators.Composite();
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        java.util.stream.Stream<java.lang.Object> objStream20 = objList18.parallelStream();
        comparators.Composite composite21 = new comparators.Composite(objList18);
        java.lang.Object[] objArray22 = composite21.toArray();
        int int23 = composite21.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream24 = composite21.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream25 = composite21.parallelStream();
        int int26 = composite11.compareTo(composite21);
        comparators.hector.CompositeListSerializer compositeListSerializer27 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray29 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList30 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30, byteBufferArray29);
        java.lang.String str32 = compositeType28.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator33 = compositeType28.indexComparator;
        comparators.CompositeType compositeType34 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray35 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList36 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList36, byteBufferArray35);
        java.lang.String str38 = compositeType34.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList36);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator39 = compositeType28.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType34);
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.lang.String str45 = compositeType34.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.List<java.util.List<java.lang.Object>> objListList46 = compositeListSerializer27.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList42);
        comparators.CompositeType compositeType47 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator48 = compositeType47.indexComparator;
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator50 = compositeType47.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType49);
        java.lang.Object[] objArray51 = new java.lang.Object[] { compositeListSerializer27, compositeType49 };
        java.lang.Object[][] objArray52 = new java.lang.Object[][] { objArray51 };
        java.lang.Object[][] objArray53 = composite11.toArray(objArray52);
        java.lang.Object[][] objArray54 = composite9.toArray(objArray53);
        comparators.Composite composite55 = new comparators.Composite((java.lang.Object[]) objArray53);
        composite55.clear();
        comparators.hector.CompositeListSerializer compositeListSerializer57 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray62 = new byte[] {};
        int int63 = comparators.Composite.compare(byteArray61, byteArray62);
        java.util.List<java.lang.Object> objList64 = comparators.Composite.deserialize(byteArray62);
        byte[] byteArray65 = comparators.Composite.serialize(objList64);
        java.util.stream.Stream<java.lang.Object> objStream66 = objList64.parallelStream();
        comparators.Composite composite67 = new comparators.Composite(objList64);
        byte[] byteArray68 = compositeListSerializer57.toBytes(objList64);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        java.util.List<java.lang.Object> objList75 = comparators.Composite.deserialize(byteArray73);
        byte[] byteArray76 = comparators.Composite.serialize(objList75);
        byte[] byteArray77 = comparators.Composite.serialize(objList75);
        byte[] byteArray78 = compositeListSerializer57.toBytes(objList75);
        byte[] byteArray79 = null;
        java.util.List<java.lang.Object> objList80 = compositeListSerializer57.fromBytes(byteArray79);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean81 = composite55.retainAll((java.util.Collection<java.lang.Object>) objList80);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteBufferArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(indexInfoComparator33);
        org.junit.Assert.assertNotNull(compositeType34);
        org.junit.Assert.assertNotNull(byteBufferArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteBufferComparator39);
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(objListList46);
        org.junit.Assert.assertNotNull(indexInfoComparator48);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferComparator50);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(objList64);
        org.junit.Assert.assertNull(byteArray65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertNull(byteArray68);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(objList75);
        org.junit.Assert.assertNull(byteArray76);
        org.junit.Assert.assertNull(byteArray77);
        org.junit.Assert.assertNull(byteArray78);
        org.junit.Assert.assertNotNull(objList80);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator10 = compositeType0.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator11 = compositeType0.indexComparator;
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        org.apache.cassandra.db.IColumn[] iColumnArray17 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList18 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList18, iColumnArray17);
        java.lang.String str20 = compositeType12.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList18);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator21 = compositeType12.getReverseComparator();
        comparators.CompositeType compositeType22 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray23 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList24 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24, byteBufferArray23);
        java.lang.String str26 = compositeType22.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24);
        org.apache.cassandra.db.IColumn[] iColumnArray27 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList28 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList28, iColumnArray27);
        java.lang.String str30 = compositeType22.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList28);
        java.lang.String str31 = compositeType12.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList28);
        java.lang.String str32 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList28);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator33 = compositeType0.getReverseComparator();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer35 = compositeType0.fromString("Placeholder(6)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(indexInfoComparator10);
        org.junit.Assert.assertNotNull(indexInfoComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(iColumnArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteBufferComparator21);
        org.junit.Assert.assertNotNull(compositeType22);
        org.junit.Assert.assertNotNull(byteBufferArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(iColumnArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteBufferComparator33);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        java.lang.String str1 = null; // flaky: placeholder0.toString();
        java.lang.String str2 = null; // flaky: placeholder0.toString();
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        java.lang.String str4 = null; // flaky: placeholder0.toString();
        int int5 = 0; // flaky: placeholder0.type;
// flaky:         org.junit.Assert.assertNotNull(placeholder0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Placeholder(1)" + "'", str1, "Placeholder(1)");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Placeholder(1)" + "'", str2, "Placeholder(1)");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Placeholder(1)" + "'", str4, "Placeholder(1)");
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.util.RandomAccess[] randomAccessArray11 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray12 = composite10.toArray(randomAccessArray11);
        comparators.Composite composite14 = composite10.addLong((long) 67);
        byte[] byteArray15 = composite14.serialize();
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray15);
        comparators.Composite composite17 = new comparators.Composite(byteArray15);
        comparators.Composite composite18 = compositeSerializer0.fromBytes(byteArray15);
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray32 = new byte[] {};
        int int33 = comparators.Composite.compare(byteArray31, byteArray32);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray32);
        byte[] byteArray35 = comparators.Composite.serialize(objList34);
        java.util.stream.Stream<java.lang.Object> objStream36 = objList34.parallelStream();
        comparators.Composite composite37 = new comparators.Composite(objList34);
        java.util.RandomAccess[] randomAccessArray38 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray39 = composite37.toArray(randomAccessArray38);
        comparators.Composite composite41 = composite37.addLong((long) 67);
        byte[] byteArray42 = composite41.serialize();
        java.util.List<java.lang.Object> objList43 = comparators.Composite.deserialize(byteArray42);
        int int44 = comparators.Composite.compare(byteArray25, byteArray42);
        comparators.hector.CompositeSerializer compositeSerializer45 = new comparators.hector.CompositeSerializer();
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        java.util.List<java.lang.Object> objList52 = comparators.Composite.deserialize(byteArray50);
        byte[] byteArray53 = comparators.Composite.serialize(objList52);
        java.util.stream.Stream<java.lang.Object> objStream54 = objList52.parallelStream();
        comparators.Composite composite55 = new comparators.Composite(objList52);
        java.lang.Object[] objArray56 = composite55.toArray();
        int int57 = composite55.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream58 = composite55.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream59 = composite55.parallelStream();
        comparators.Composite composite61 = composite55.addBool(true);
        java.io.DataOutputStream dataOutputStream62 = composite55.out;
        byte[] byteArray63 = compositeSerializer45.toBytes(composite55);
        int int64 = comparators.Composite.compare(byteArray42, byteArray63);
        boolean boolean66 = comparators.Composite.validate(67, byteArray63, true);
        boolean boolean67 = comparators.Composite.validate(13, byteArray63);
        comparators.Composite composite68 = compositeSerializer0.fromBytes(byteArray63);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        java.util.List<java.lang.Object> objList75 = comparators.Composite.deserialize(byteArray73);
        byte[] byteArray76 = comparators.Composite.serialize(objList75);
        java.util.stream.Stream<java.lang.Object> objStream77 = objList75.parallelStream();
        comparators.Composite composite78 = new comparators.Composite(objList75);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray84 = new byte[] {};
        int int85 = comparators.Composite.compare(byteArray83, byteArray84);
        boolean boolean87 = comparators.Composite.validate((int) ' ', byteArray84, true);
        boolean boolean88 = composite78.contains((java.lang.Object) boolean87);
        java.util.Spliterator<java.lang.Object> objSpliterator89 = composite78.spliterator();
        byte[] byteArray90 = composite78.bytes;
        comparators.Composite composite92 = composite78.addLong((long) 5);
        int int93 = composite92.size();
        byte[] byteArray94 = compositeSerializer0.toBytes(composite92);
        byte[] byteArray95 = null;
        comparators.Composite composite96 = compositeSerializer0.fromBytes(byteArray95);
        java.util.List<comparators.Composite> compositeList97 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.nio.ByteBuffer> byteBufferList98 = compositeSerializer0.toBytesList(compositeList97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(randomAccessArray12);
        org.junit.Assert.assertNotNull(composite14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(randomAccessArray38);
        org.junit.Assert.assertNotNull(randomAccessArray39);
        org.junit.Assert.assertNotNull(composite41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(objList52);
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertNotNull(dataOutputStream62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(composite68);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(objList75);
        org.junit.Assert.assertNull(byteArray76);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objSpliterator89);
        org.junit.Assert.assertNull(byteArray90);
        org.junit.Assert.assertNotNull(composite92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 5, 0]");
        org.junit.Assert.assertNotNull(composite96);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        byte[] byteArray1 = null;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray13 = new byte[] {};
        int int14 = comparators.Composite.compare(byteArray12, byteArray13);
        int int15 = comparators.Composite.compare(byteArray6, byteArray13);
        int int16 = comparators.Composite.compare((int) (byte) 1, byteArray1, 10, byteArray6);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.util.RandomAccess[] randomAccessArray27 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray28 = composite26.toArray(randomAccessArray27);
        comparators.Composite composite30 = composite26.addLong((long) 67);
        byte[] byteArray31 = composite30.serialize();
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray31);
        int int33 = comparators.Composite.compare(byteArray1, byteArray31);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray31);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(randomAccessArray27);
        org.junit.Assert.assertNotNull(randomAccessArray28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(objList34);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType7.validate(byteBuffer50);
        java.lang.String str52 = compositeType0.getString(byteBuffer50);
        comparators.Composite composite53 = new comparators.Composite(byteBuffer50);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        java.util.List<java.lang.Object> objList61 = comparators.Composite.deserialize(byteArray59);
        boolean boolean62 = comparators.Composite.validate(0, byteArray59);
        byte[] byteArray63 = null;
        int int64 = comparators.Composite.compare(byteArray59, byteArray63);
        comparators.Composite composite65 = new comparators.Composite(byteArray63);
        byte[] byteArray67 = null;
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray74 = new byte[] {};
        int int75 = comparators.Composite.compare(byteArray73, byteArray74);
        boolean boolean77 = comparators.Composite.validate((int) ' ', byteArray74, true);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray83 = new byte[] {};
        int int84 = comparators.Composite.compare(byteArray82, byteArray83);
        java.util.List<java.lang.Object> objList85 = comparators.Composite.deserialize(byteArray83);
        boolean boolean87 = comparators.Composite.validate((int) (short) 100, byteArray83, false);
        int int88 = comparators.Composite.compare(byteArray74, byteArray83);
        int int89 = comparators.Composite.compare((int) (short) 1, byteArray67, (int) (byte) 10, byteArray83);
        comparators.Composite composite90 = composite65.addBytes(byteArray83);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = composite53.remove((java.lang.Object) composite90);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(objList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(objList85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(composite90);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        comparators.Composite composite37 = composite10.addBytes(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = composite37.serializeToByteBuffer();
        compositeType0.validate(byteBuffer38);
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator45 = compositeType40.indexComparator;
        boolean boolean46 = comparators.Composite.isValidType((java.lang.Object) compositeType40);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator47 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType40);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer49 = compositeType40.fromString("Placeholder(32)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(indexInfoComparator45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteBufferComparator47);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite65.startOffset;
        int int72 = composite17.compareTo(composite65);
        comparators.Composite composite74 = composite17.addLong((long) 80);
        java.io.DataOutputStream dataOutputStream75 = composite17.out;
        boolean boolean76 = composite17.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = composite17.remove((java.lang.Object) "434d500103000000000000004300");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(dataOutputStream75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        comparators.Composite composite38 = composite11.addBytes(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = composite38.serializeToByteBuffer();
        compositeType1.validate(byteBuffer39);
        boolean boolean41 = comparators.Composite.validate(byteBuffer39);
        comparators.Composite composite42 = new comparators.Composite(byteBuffer39);
        java.nio.ByteBuffer byteBuffer43 = null;
        int int44 = compositeType0.compare(byteBuffer39, byteBuffer43);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator45 = compositeType0.indexComparator;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer47 = compositeType0.fromString("Placeholder(6)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(indexInfoComparator45);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        comparators.Composite composite0 = new comparators.Composite();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        int int15 = composite0.compareTo(composite10);
        int int16 = composite0.startOffset;
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        comparators.Composite composite32 = composite26.addBool(true);
        java.util.Iterator<java.lang.Object> objItor33 = composite26.iterator();
        comparators.Composite composite34 = new comparators.Composite();
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.lang.Object[] objArray45 = composite44.toArray();
        int int46 = composite44.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream47 = composite44.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream48 = composite44.parallelStream();
        int int49 = composite34.compareTo(composite44);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray65 = new byte[] {};
        int int66 = comparators.Composite.compare(byteArray64, byteArray65);
        boolean boolean68 = comparators.Composite.validate((int) ' ', byteArray65, true);
        boolean boolean69 = composite59.contains((java.lang.Object) boolean68);
        java.util.stream.Stream<java.lang.Object> objStream70 = composite59.parallelStream();
        boolean boolean71 = composite34.contains((java.lang.Object) composite59);
        boolean boolean72 = composite26.addAll((java.util.Collection<java.lang.Object>) composite34);
        int int73 = composite34.startOffset;
        java.lang.String str74 = composite34.toString();
        int int75 = comparators.Composite.compare(composite0, composite34);
        java.util.UUID uUID76 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite77 = composite0.addLexicalUUID(uUID76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(composite32);
        org.junit.Assert.assertNotNull(objItor33);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        comparators.hector.CompositeListSerializer compositeListSerializer19 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator25 = compositeType20.indexComparator;
        comparators.CompositeType compositeType26 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray27 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList28 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28, byteBufferArray27);
        java.lang.String str30 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType20.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType26);
        comparators.CompositeType compositeType32 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray33 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList34 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34, byteBufferArray33);
        java.lang.String str36 = compositeType32.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34);
        java.lang.String str37 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34);
        java.util.List<java.util.List<java.lang.Object>> objListList38 = compositeListSerializer19.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList34);
        comparators.hector.CompositeListSerializer compositeListSerializer39 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator45 = compositeType40.indexComparator;
        comparators.CompositeType compositeType46 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray47 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList48 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48, byteBufferArray47);
        java.lang.String str50 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator51 = compositeType40.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType46);
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray53 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList54 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54, byteBufferArray53);
        java.lang.String str56 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        java.lang.String str57 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        java.util.List<java.util.List<java.lang.Object>> objListList58 = compositeListSerializer39.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList54);
        int int60 = compositeListSerializer39.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer61 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType62 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray63 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList64 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64, byteBufferArray63);
        java.lang.String str66 = compositeType62.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator67 = compositeType62.indexComparator;
        comparators.CompositeType compositeType68 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray69 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList70 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList70, byteBufferArray69);
        java.lang.String str72 = compositeType68.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList70);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator73 = compositeType62.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType68);
        comparators.CompositeType compositeType74 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray75 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList76 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList76, byteBufferArray75);
        java.lang.String str78 = compositeType74.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList76);
        java.lang.String str79 = compositeType68.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList76);
        java.util.List<java.util.List<java.lang.Object>> objListList80 = compositeListSerializer61.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList76);
        java.util.List<java.nio.ByteBuffer> byteBufferList81 = compositeListSerializer39.toBytesList(objListList80);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet82 = compositeListSerializer19.toBytesSet(objListList80);
        java.util.List<comparators.Composite> compositeList83 = compositeSerializer0.fromBytesSet(byteBufferSet82);
        java.util.List<comparators.Composite> compositeList84 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.nio.ByteBuffer> byteBufferList85 = compositeSerializer0.toBytesList(compositeList84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexInfoComparator25);
        org.junit.Assert.assertNotNull(compositeType26);
        org.junit.Assert.assertNotNull(byteBufferArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(compositeType32);
        org.junit.Assert.assertNotNull(byteBufferArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(objListList38);
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(indexInfoComparator45);
        org.junit.Assert.assertNotNull(compositeType46);
        org.junit.Assert.assertNotNull(byteBufferArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteBufferComparator51);
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(objListList58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 6 + "'", int60 == 6);
        org.junit.Assert.assertNotNull(compositeType62);
        org.junit.Assert.assertNotNull(byteBufferArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(indexInfoComparator67);
        org.junit.Assert.assertNotNull(compositeType68);
        org.junit.Assert.assertNotNull(byteBufferArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(byteBufferComparator73);
        org.junit.Assert.assertNotNull(compositeType74);
        org.junit.Assert.assertNotNull(byteBufferArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(objListList80);
        org.junit.Assert.assertNotNull(byteBufferList81);
        org.junit.Assert.assertNotNull(byteBufferSet82);
        org.junit.Assert.assertNotNull(compositeList83);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite65.startOffset;
        int int72 = composite17.compareTo(composite65);
        comparators.Composite composite74 = composite17.addLong((long) 80);
        java.io.ByteArrayOutputStream byteArrayOutputStream75 = composite74.byteStream;
        java.util.UUID uUID76 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite77 = composite74.addTimeUUID(uUID76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(byteArrayOutputStream75);
        org.junit.Assert.assertEquals(byteArrayOutputStream75.toString(), "CMP\001\003\000\000\000\000\000\000\000P");
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        java.util.stream.Stream<java.lang.Object> objStream32 = composite9.stream();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.Spliterator<java.lang.Object> objSpliterator53 = composite42.spliterator();
        int int54 = composite42.startOffset;
        comparators.Composite composite56 = composite42.addAscii("hi!");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean57 = composite9.removeAll((java.util.Collection<java.lang.Object>) composite42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objSpliterator53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(composite56);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        byte[] byteArray82 = compositeTypeIterator80.bytes;
        int int83 = compositeTypeIterator80.type;
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray88 = new byte[] {};
        int int89 = comparators.Composite.compare(byteArray87, byteArray88);
        byte[] byteArray93 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray94 = new byte[] {};
        int int95 = comparators.Composite.compare(byteArray93, byteArray94);
        int int96 = comparators.Composite.compare(byteArray87, byteArray94);
        compositeTypeIterator80.bytes = byteArray87;
        boolean boolean98 = compositeTypeIterator80.hasNext();
        int int99 = compositeTypeIterator80.len;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MINIMUM;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        placeholder0.type = 'a';
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        org.junit.Assert.assertNotNull(placeholder0);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        comparators.Composite composite17 = composite15.addLong((long) 6);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        comparators.Composite composite33 = composite27.addBool(true);
        comparators.Composite composite35 = composite33.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream36 = composite33.byteStream;
        composite17.byteStream = byteArrayOutputStream36;
        comparators.CompositeType compositeType38 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray39 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList40 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList40, byteBufferArray39);
        java.lang.String str42 = compositeType38.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList40);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator43 = compositeType38.indexComparator;
        comparators.CompositeType compositeType44 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray45 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList46 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList46, byteBufferArray45);
        java.lang.String str48 = compositeType44.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList46);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator49 = compositeType38.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType44);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        java.lang.Object[] objArray60 = composite59.toArray();
        int int61 = composite59.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream62 = composite59.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream63 = composite59.parallelStream();
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray68 = new byte[] {};
        int int69 = comparators.Composite.compare(byteArray67, byteArray68);
        java.util.List<java.lang.Object> objList70 = comparators.Composite.deserialize(byteArray68);
        byte[] byteArray71 = comparators.Composite.serialize(objList70);
        java.util.stream.Stream<java.lang.Object> objStream72 = objList70.parallelStream();
        comparators.Composite composite73 = new comparators.Composite(objList70);
        java.lang.Object[] objArray74 = composite73.toArray();
        int int75 = composite73.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream76 = composite73.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream77 = composite73.parallelStream();
        int int78 = composite73.startOffset;
        int int79 = composite59.compareTo(composite73);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray84 = new byte[] {};
        int int85 = comparators.Composite.compare(byteArray83, byteArray84);
        comparators.Composite composite86 = composite59.addBytes(byteArray84);
        java.nio.ByteBuffer byteBuffer87 = composite86.serializeToByteBuffer();
        compositeType44.validate(byteBuffer87);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean89 = composite17.remove((java.lang.Object) compositeType44);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(byteArrayOutputStream36);
        org.junit.Assert.assertEquals(byteArrayOutputStream36.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006");
        org.junit.Assert.assertNotNull(compositeType38);
        org.junit.Assert.assertNotNull(byteBufferArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(indexInfoComparator43);
        org.junit.Assert.assertNotNull(compositeType44);
        org.junit.Assert.assertNotNull(byteBufferArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteBufferComparator49);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(objList70);
        org.junit.Assert.assertNull(byteArray71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(objStream76);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertNotNull(byteBuffer87);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        int int41 = composite39.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream42 = composite39.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream43 = composite39.parallelStream();
        int int44 = composite39.startOffset;
        int int45 = composite25.compareTo(composite39);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        comparators.Composite composite52 = composite25.addBytes(byteArray50);
        java.nio.ByteBuffer byteBuffer53 = composite52.serializeToByteBuffer();
        compositeType15.validate(byteBuffer53);
        boolean boolean55 = comparators.Composite.validate(byteBuffer53);
        comparators.Composite composite56 = new comparators.Composite(byteBuffer53);
        comparators.Composite composite57 = new comparators.Composite(byteBuffer53);
        boolean boolean58 = composite9.addAll((java.util.Collection<java.lang.Object>) composite57);
        comparators.Composite composite60 = composite9.addAscii("Placeholder(100)");
        comparators.Composite composite62 = composite9.addAscii("US-ASCII");
        int int63 = composite9.size();
        java.util.stream.Stream<java.lang.Object> objStream64 = composite9.parallelStream();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(composite52);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(composite60);
        org.junit.Assert.assertNotNull(composite62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertNotNull(objStream64);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        boolean boolean10 = comparators.Composite.validate((int) ' ', byteArray7, true);
        boolean boolean11 = comparators.Composite.validate(100, byteArray7);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.util.RandomAccess[] randomAccessArray29 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray30 = composite28.toArray(randomAccessArray29);
        comparators.Composite composite32 = composite28.addLong((long) 67);
        byte[] byteArray33 = composite32.serialize();
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray33);
        int int35 = comparators.Composite.compare(byteArray16, byteArray33);
        int int36 = comparators.Composite.compare(byteArray7, byteArray33);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList37 = comparators.Composite.deserialize(9, byteArray33);
            org.junit.Assert.fail("Expected exception of type org.apache.cassandra.db.marshal.MarshalException; message: Not a composite type (ID byte 0 incorrect)");
        } catch (org.apache.cassandra.db.marshal.MarshalException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(randomAccessArray29);
        org.junit.Assert.assertNotNull(randomAccessArray30);
        org.junit.Assert.assertNotNull(composite32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        java.lang.String str25 = composite9.toString();
        int int26 = composite9.size();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream39 = null;
        composite36.byteStream = byteArrayOutputStream39;
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray45 = new byte[] {};
        int int46 = comparators.Composite.compare(byteArray44, byteArray45);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray45);
        byte[] byteArray48 = comparators.Composite.serialize(objList47);
        java.util.stream.Stream<java.lang.Object> objStream49 = objList47.parallelStream();
        comparators.Composite composite50 = new comparators.Composite(objList47);
        java.lang.Object[] objArray51 = composite50.toArray();
        int int52 = composite50.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream53 = composite50.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream54 = composite50.parallelStream();
        comparators.Composite composite56 = composite50.addBool(true);
        java.util.Iterator<java.lang.Object> objItor57 = composite50.iterator();
        int int58 = composite36.compareTo(composite50);
        java.lang.Object[][][] objArray59 = new java.lang.Object[][][] {};
        java.lang.Object[][][] objArray60 = composite36.toArray(objArray59);
        comparators.Composite composite61 = new comparators.Composite((java.lang.Object[]) objArray59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[][] objArray62 = composite9.toArray((java.lang.Object[][]) objArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNull(byteArray48);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(composite56);
        org.junit.Assert.assertNotNull(objItor57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertNotNull(objArray60);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        comparators.Composite composite0 = new comparators.Composite();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        int int15 = composite0.compareTo(composite10);
        comparators.hector.CompositeListSerializer compositeListSerializer16 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType17 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray18 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList19 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19, byteBufferArray18);
        java.lang.String str21 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator22 = compositeType17.indexComparator;
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator28 = compositeType17.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType23);
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.lang.String str34 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.List<java.util.List<java.lang.Object>> objListList35 = compositeListSerializer16.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList31);
        comparators.CompositeType compositeType36 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator37 = compositeType36.indexComparator;
        comparators.CompositeType compositeType38 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator39 = compositeType36.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType38);
        java.lang.Object[] objArray40 = new java.lang.Object[] { compositeListSerializer16, compositeType38 };
        java.lang.Object[][] objArray41 = new java.lang.Object[][] { objArray40 };
        java.lang.Object[][] objArray42 = composite0.toArray(objArray41);
        boolean boolean43 = comparators.Composite.isValidType((java.lang.Object) objArray41);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(compositeType17);
        org.junit.Assert.assertNotNull(byteBufferArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(indexInfoComparator22);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteBufferComparator28);
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(objListList35);
        org.junit.Assert.assertNotNull(indexInfoComparator37);
        org.junit.Assert.assertNotNull(compositeType38);
        org.junit.Assert.assertNotNull(byteBufferComparator39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        comparators.Composite composite37 = composite10.addBytes(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = composite37.serializeToByteBuffer();
        compositeType0.validate(byteBuffer38);
        boolean boolean40 = comparators.Composite.validate(byteBuffer38);
        comparators.Composite composite41 = new comparators.Composite(byteBuffer38);
        java.io.ByteArrayOutputStream byteArrayOutputStream42 = composite41.byteStream;
        java.util.Iterator<java.lang.Object> objItor43 = composite41.iterator();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(byteArrayOutputStream42);
        org.junit.Assert.assertNotNull(objItor43);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        comparators.Composite composite0 = new comparators.Composite();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        int int15 = composite0.compareTo(composite10);
        comparators.CompositeType compositeType16 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray17 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList18 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList18, byteBufferArray17);
        java.lang.String str20 = compositeType16.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList18);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator21 = compositeType16.indexComparator;
        comparators.CompositeType compositeType22 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray23 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList24 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24, byteBufferArray23);
        java.lang.String str26 = compositeType22.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator27 = compositeType16.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType22);
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray29 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList30 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30, byteBufferArray29);
        java.lang.String str32 = compositeType28.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30);
        java.lang.String str33 = compositeType22.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30);
        comparators.CompositeType compositeType34 = comparators.CompositeType.instance;
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.lang.Object[] objArray45 = composite44.toArray();
        int int46 = composite44.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream47 = composite44.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream48 = composite44.parallelStream();
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteArray53);
        byte[] byteArray56 = comparators.Composite.serialize(objList55);
        java.util.stream.Stream<java.lang.Object> objStream57 = objList55.parallelStream();
        comparators.Composite composite58 = new comparators.Composite(objList55);
        java.lang.Object[] objArray59 = composite58.toArray();
        int int60 = composite58.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream61 = composite58.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream62 = composite58.parallelStream();
        int int63 = composite58.startOffset;
        int int64 = composite44.compareTo(composite58);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        comparators.Composite composite71 = composite44.addBytes(byteArray69);
        java.nio.ByteBuffer byteBuffer72 = composite71.serializeToByteBuffer();
        compositeType34.validate(byteBuffer72);
        java.lang.String str74 = compositeType22.getString(byteBuffer72);
        boolean boolean75 = composite10.contains((java.lang.Object) str74);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        java.util.List<java.lang.Object> objList82 = comparators.Composite.deserialize(byteArray80);
        byte[] byteArray83 = comparators.Composite.serialize(objList82);
        java.util.stream.Stream<java.lang.Object> objStream84 = objList82.parallelStream();
        comparators.Composite composite85 = new comparators.Composite(objList82);
        java.lang.Object[] objArray86 = composite85.toArray();
        int int87 = composite85.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream88 = null;
        composite85.byteStream = byteArrayOutputStream88;
        composite85.startOffset = (byte) 1;
        int int92 = comparators.Composite.compare(composite10, composite85);
        boolean boolean93 = composite10.isEmpty();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(compositeType16);
        org.junit.Assert.assertNotNull(byteBufferArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(indexInfoComparator21);
        org.junit.Assert.assertNotNull(compositeType22);
        org.junit.Assert.assertNotNull(byteBufferArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteBufferComparator27);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteBufferArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(compositeType34);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(composite71);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(objList82);
        org.junit.Assert.assertNull(byteArray83);
        org.junit.Assert.assertNotNull(objStream84);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        boolean boolean15 = composite9.isEmpty();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        int int26 = composite25.size();
        boolean boolean27 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        java.io.ByteArrayOutputStream byteArrayOutputStream28 = composite9.byteStream;
        java.io.DataOutputStream dataOutputStream29 = composite9.out;
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray42 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList43 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43, byteBufferArray42);
        java.lang.String str45 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator46 = compositeType41.indexComparator;
        comparators.CompositeType compositeType47 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray48 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList49 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList49, byteBufferArray48);
        java.lang.String str51 = compositeType47.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList49);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator52 = compositeType41.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType47);
        comparators.CompositeType compositeType53 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray54 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList55 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList55, byteBufferArray54);
        java.lang.String str57 = compositeType53.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList55);
        java.lang.String str58 = compositeType47.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList55);
        comparators.CompositeType compositeType59 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray60 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList61 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList61, byteBufferArray60);
        java.lang.String str63 = compositeType59.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList61);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator64 = compositeType59.indexComparator;
        comparators.CompositeType compositeType65 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray66 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList67 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList67, byteBufferArray66);
        java.lang.String str69 = compositeType65.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList67);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator70 = compositeType59.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType65);
        comparators.CompositeType compositeType71 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray72 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList73 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList73, byteBufferArray72);
        java.lang.String str75 = compositeType71.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList73);
        java.lang.String str76 = compositeType65.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList73);
        java.util.AbstractList[] abstractListArray78 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray79 = (java.util.AbstractList<java.nio.ByteBuffer>[]) abstractListArray78;
        byteBufferListArray79[0] = byteBufferList55;
        byteBufferListArray79[1] = byteBufferList73;
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray84 = composite39.toArray(byteBufferListArray79);
        java.util.AbstractCollection<java.nio.ByteBuffer>[] byteBufferCollectionArray85 = composite9.toArray((java.util.AbstractCollection<java.nio.ByteBuffer>[]) byteBufferListArray84);
        byte[] byteArray86 = comparators.Composite.serialize((java.lang.Object[]) byteBufferListArray84);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(byteArrayOutputStream28);
        org.junit.Assert.assertNull(dataOutputStream29);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteBufferArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(indexInfoComparator46);
        org.junit.Assert.assertNotNull(compositeType47);
        org.junit.Assert.assertNotNull(byteBufferArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteBufferComparator52);
        org.junit.Assert.assertNotNull(compositeType53);
        org.junit.Assert.assertNotNull(byteBufferArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(compositeType59);
        org.junit.Assert.assertNotNull(byteBufferArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(indexInfoComparator64);
        org.junit.Assert.assertNotNull(compositeType65);
        org.junit.Assert.assertNotNull(byteBufferArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteBufferComparator70);
        org.junit.Assert.assertNotNull(compositeType71);
        org.junit.Assert.assertNotNull(byteBufferArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(abstractListArray78);
        org.junit.Assert.assertNotNull(byteBufferListArray79);
        org.junit.Assert.assertNotNull(byteBufferListArray84);
        org.junit.Assert.assertNotNull(byteBufferCollectionArray85);
        org.junit.Assert.assertNull(byteArray86);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        byte[] byteArray25 = composite22.bytes;
        java.io.DataOutputStream dataOutputStream26 = null;
        composite22.out = dataOutputStream26;
        int int28 = comparators.Composite.compare(composite9, composite22);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator45 = compositeType40.indexComparator;
        comparators.CompositeType compositeType46 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray47 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList48 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48, byteBufferArray47);
        java.lang.String str50 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator51 = compositeType40.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType46);
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray53 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList54 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54, byteBufferArray53);
        java.lang.String str56 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        java.lang.String str57 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        comparators.CompositeType compositeType58 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray59 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList60 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60, byteBufferArray59);
        java.lang.String str62 = compositeType58.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator63 = compositeType58.indexComparator;
        comparators.CompositeType compositeType64 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray65 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList66 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList66, byteBufferArray65);
        java.lang.String str68 = compositeType64.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList66);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator69 = compositeType58.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType64);
        comparators.CompositeType compositeType70 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray71 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList72 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList72, byteBufferArray71);
        java.lang.String str74 = compositeType70.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList72);
        java.lang.String str75 = compositeType64.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList72);
        java.util.AbstractList[] abstractListArray77 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray78 = (java.util.AbstractList<java.nio.ByteBuffer>[]) abstractListArray77;
        byteBufferListArray78[0] = byteBufferList54;
        byteBufferListArray78[1] = byteBufferList72;
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray83 = composite38.toArray(byteBufferListArray78);
        java.util.stream.Stream<java.lang.Object> objStream84 = composite38.parallelStream();
        comparators.Composite composite86 = composite38.addUTF8("UTF-8");
        int int87 = composite22.compareTo(composite86);
        java.lang.String str88 = composite86.toString();
        java.util.Spliterator<java.lang.Object> objSpliterator89 = composite86.spliterator();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(indexInfoComparator45);
        org.junit.Assert.assertNotNull(compositeType46);
        org.junit.Assert.assertNotNull(byteBufferArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteBufferComparator51);
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(compositeType58);
        org.junit.Assert.assertNotNull(byteBufferArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(indexInfoComparator63);
        org.junit.Assert.assertNotNull(compositeType64);
        org.junit.Assert.assertNotNull(byteBufferArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteBufferComparator69);
        org.junit.Assert.assertNotNull(compositeType70);
        org.junit.Assert.assertNotNull(byteBufferArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(abstractListArray77);
        org.junit.Assert.assertNotNull(byteBufferListArray78);
        org.junit.Assert.assertNotNull(byteBufferListArray83);
        org.junit.Assert.assertNotNull(objStream84);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "UTF-8" + "'", str88, "UTF-8");
        org.junit.Assert.assertNotNull(objSpliterator89);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(4);
        java.util.List<java.util.List<java.lang.Object>> objListList22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.nio.ByteBuffer> byteBufferList23 = compositeListSerializer0.toBytesList(objListList22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        byte[] byteArray21 = composite9.bytes;
        comparators.Composite composite23 = composite9.addUTF8("Placeholder(1)");
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.lang.Object[] objArray34 = composite33.toArray();
        int int35 = composite33.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream36 = null;
        composite33.byteStream = byteArrayOutputStream36;
        boolean boolean38 = composite23.containsAll((java.util.Collection<java.lang.Object>) composite33);
        java.util.UUID uUID39 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite40 = composite23.addTimeUUID(uUID39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(composite23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray36);
        byte[] byteArray39 = comparators.Composite.serialize(objList38);
        java.util.stream.Stream<java.lang.Object> objStream40 = objList38.parallelStream();
        comparators.Composite composite41 = new comparators.Composite(objList38);
        java.lang.Object[] objArray42 = composite41.toArray();
        int int43 = composite41.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream44 = composite41.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream45 = composite41.parallelStream();
        int int46 = composite41.startOffset;
        int int47 = composite41.startOffset;
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        boolean boolean66 = comparators.Composite.validate((int) ' ', byteArray63, true);
        boolean boolean67 = composite57.contains((java.lang.Object) boolean66);
        java.util.Spliterator<java.lang.Object> objSpliterator68 = composite57.spliterator();
        boolean boolean69 = composite41.containsAll((java.util.Collection<java.lang.Object>) composite57);
        boolean boolean71 = composite41.contains((java.lang.Object) (-1));
        int int72 = composite41.size();
        java.util.Spliterator<java.lang.Object> objSpliterator73 = composite41.spliterator();
        java.io.ByteArrayOutputStream byteArrayOutputStream74 = composite41.byteStream;
        comparators.Composite composite76 = composite41.addLong((long) (short) 100);
        comparators.Composite composite78 = composite76.addAscii("Placeholder(-1)");
        boolean boolean79 = composite9.add((java.lang.Object) composite76);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objSpliterator68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(objSpliterator73);
        org.junit.Assert.assertNull(byteArrayOutputStream74);
        org.junit.Assert.assertNotNull(composite76);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(9);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        byte[] byteArray30 = comparators.Composite.serialize(objList28);
        byte[] byteArray31 = compositeListSerializer0.toBytes(objList28);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray36);
        byte[] byteArray39 = comparators.Composite.serialize(objList38);
        java.util.stream.Stream<java.lang.Object> objStream40 = objList38.parallelStream();
        byte[] byteArray41 = compositeListSerializer0.toBytes(objList38);
        comparators.CompositeType compositeType42 = new comparators.CompositeType();
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        java.util.List<java.lang.Object> objList50 = comparators.Composite.deserialize(byteArray48);
        byte[] byteArray51 = comparators.Composite.serialize(objList50);
        java.util.stream.Stream<java.lang.Object> objStream52 = objList50.parallelStream();
        comparators.Composite composite53 = new comparators.Composite(objList50);
        java.lang.Object[] objArray54 = composite53.toArray();
        int int55 = composite53.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream56 = composite53.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream57 = composite53.parallelStream();
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray62 = new byte[] {};
        int int63 = comparators.Composite.compare(byteArray61, byteArray62);
        java.util.List<java.lang.Object> objList64 = comparators.Composite.deserialize(byteArray62);
        byte[] byteArray65 = comparators.Composite.serialize(objList64);
        java.util.stream.Stream<java.lang.Object> objStream66 = objList64.parallelStream();
        comparators.Composite composite67 = new comparators.Composite(objList64);
        java.lang.Object[] objArray68 = composite67.toArray();
        int int69 = composite67.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream70 = composite67.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream71 = composite67.parallelStream();
        int int72 = composite67.startOffset;
        int int73 = composite53.compareTo(composite67);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray78 = new byte[] {};
        int int79 = comparators.Composite.compare(byteArray77, byteArray78);
        comparators.Composite composite80 = composite53.addBytes(byteArray78);
        java.nio.ByteBuffer byteBuffer81 = composite80.serializeToByteBuffer();
        compositeType43.validate(byteBuffer81);
        boolean boolean83 = comparators.Composite.validate(byteBuffer81);
        comparators.Composite composite84 = new comparators.Composite(byteBuffer81);
        java.nio.ByteBuffer byteBuffer85 = null;
        int int86 = compositeType42.compare(byteBuffer81, byteBuffer85);
        comparators.Composite composite87 = new comparators.Composite(byteBuffer81);
        comparators.Composite composite88 = new comparators.Composite(byteBuffer81);
        comparators.Composite composite89 = new comparators.Composite(byteBuffer81);
        boolean boolean91 = comparators.Composite.validate(byteBuffer81, true);
        java.util.List<java.lang.Object> objList92 = comparators.Composite.deserialize(byteBuffer81);
        java.util.List<java.lang.Object> objList93 = compositeListSerializer0.fromByteBuffer(byteBuffer81);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(objList50);
        org.junit.Assert.assertNull(byteArray51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(objList64);
        org.junit.Assert.assertNull(byteArray65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(composite80);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(objList92);
        org.junit.Assert.assertNotNull(objList93);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator10 = compositeType0.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator11 = compositeType0.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator12 = compositeType0.indexReverseComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator13 = compositeType0.indexReverseComparator;
        java.util.Collection<org.apache.cassandra.db.IColumn> iColumnCollection14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = compositeType0.getColumnsString(iColumnCollection14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(indexInfoComparator10);
        org.junit.Assert.assertNotNull(indexInfoComparator11);
        org.junit.Assert.assertNotNull(indexInfoComparator12);
        org.junit.Assert.assertNotNull(indexInfoComparator13);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        comparators.Composite composite38 = composite11.addBytes(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = composite38.serializeToByteBuffer();
        compositeType1.validate(byteBuffer39);
        boolean boolean41 = comparators.Composite.validate(byteBuffer39);
        comparators.Composite composite42 = new comparators.Composite(byteBuffer39);
        java.nio.ByteBuffer byteBuffer43 = null;
        int int44 = compositeType0.compare(byteBuffer39, byteBuffer43);
        comparators.Composite composite45 = new comparators.Composite(byteBuffer39);
        comparators.Composite composite46 = new comparators.Composite(byteBuffer39);
        comparators.Composite composite47 = new comparators.Composite(byteBuffer39);
        boolean boolean49 = comparators.Composite.validate(byteBuffer39, true);
        comparators.Composite composite50 = new comparators.Composite(byteBuffer39);
        comparators.CompositeType compositeType51 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray52 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList53 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53, byteBufferArray52);
        java.lang.String str55 = compositeType51.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53);
        comparators.CompositeType compositeType56 = comparators.CompositeType.instance;
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        java.util.List<java.lang.Object> objList63 = comparators.Composite.deserialize(byteArray61);
        byte[] byteArray64 = comparators.Composite.serialize(objList63);
        java.util.stream.Stream<java.lang.Object> objStream65 = objList63.parallelStream();
        comparators.Composite composite66 = new comparators.Composite(objList63);
        java.lang.Object[] objArray67 = composite66.toArray();
        int int68 = composite66.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream69 = composite66.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream70 = composite66.parallelStream();
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray75 = new byte[] {};
        int int76 = comparators.Composite.compare(byteArray74, byteArray75);
        java.util.List<java.lang.Object> objList77 = comparators.Composite.deserialize(byteArray75);
        byte[] byteArray78 = comparators.Composite.serialize(objList77);
        java.util.stream.Stream<java.lang.Object> objStream79 = objList77.parallelStream();
        comparators.Composite composite80 = new comparators.Composite(objList77);
        java.lang.Object[] objArray81 = composite80.toArray();
        int int82 = composite80.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream83 = composite80.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream84 = composite80.parallelStream();
        int int85 = composite80.startOffset;
        int int86 = composite66.compareTo(composite80);
        byte[] byteArray90 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray91 = new byte[] {};
        int int92 = comparators.Composite.compare(byteArray90, byteArray91);
        comparators.Composite composite93 = composite66.addBytes(byteArray91);
        java.nio.ByteBuffer byteBuffer94 = composite93.serializeToByteBuffer();
        compositeType56.validate(byteBuffer94);
        boolean boolean96 = comparators.Composite.validate(byteBuffer94);
        comparators.Composite composite97 = new comparators.Composite(byteBuffer94);
        compositeType51.validate(byteBuffer94);
        int int99 = comparators.Composite.compare(byteBuffer39, byteBuffer94);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(compositeType51);
        org.junit.Assert.assertNotNull(byteBufferArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(compositeType56);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(objList63);
        org.junit.Assert.assertNull(byteArray64);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(objList77);
        org.junit.Assert.assertNull(byteArray78);
        org.junit.Assert.assertNotNull(objStream79);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(objStream83);
        org.junit.Assert.assertNotNull(objStream84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(composite93);
        org.junit.Assert.assertNotNull(byteBuffer94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType7.validate(byteBuffer50);
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray53 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList54 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54, byteBufferArray53);
        java.lang.String str56 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        org.apache.cassandra.db.IColumn[] iColumnArray57 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList58 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58, iColumnArray57);
        java.lang.String str60 = compositeType52.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58);
        org.apache.cassandra.db.IColumn[] iColumnArray61 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList62 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62, iColumnArray61);
        java.lang.String str64 = compositeType52.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62);
        java.lang.String str65 = compositeType7.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62);
        boolean boolean66 = placeholder0.equals((java.lang.Object) str65);
        placeholder0.type = 8;
        comparators.CompositeType compositeType69 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray70 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList71 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList71, byteBufferArray70);
        java.lang.String str73 = compositeType69.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList71);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator74 = compositeType69.indexComparator;
        comparators.CompositeType compositeType75 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray76 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList77 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList77, byteBufferArray76);
        java.lang.String str79 = compositeType75.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList77);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator80 = compositeType69.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType75);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator81 = compositeType69.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator82 = compositeType69.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator83 = compositeType69.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator84 = compositeType69.reversed();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator85 = compositeType69.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator86 = compositeType69.reversed();
        boolean boolean87 = placeholder0.equals((java.lang.Object) byteBufferComparator86);
        java.lang.String str88 = placeholder0.toString();
        int int89 = placeholder0.type;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(iColumnArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(iColumnArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(compositeType69);
        org.junit.Assert.assertNotNull(byteBufferArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(indexInfoComparator74);
        org.junit.Assert.assertNotNull(compositeType75);
        org.junit.Assert.assertNotNull(byteBufferArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(byteBufferComparator80);
        org.junit.Assert.assertNotNull(indexInfoComparator81);
        org.junit.Assert.assertNotNull(byteBufferComparator82);
        org.junit.Assert.assertNotNull(indexInfoComparator83);
        org.junit.Assert.assertNotNull(byteBufferComparator84);
        org.junit.Assert.assertNotNull(indexInfoComparator85);
        org.junit.Assert.assertNotNull(byteBufferComparator86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Placeholder(8)" + "'", str88, "Placeholder(8)");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 8 + "'", int89 == 8);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType7.validate(byteBuffer50);
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray53 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList54 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54, byteBufferArray53);
        java.lang.String str56 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        org.apache.cassandra.db.IColumn[] iColumnArray57 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList58 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58, iColumnArray57);
        java.lang.String str60 = compositeType52.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58);
        org.apache.cassandra.db.IColumn[] iColumnArray61 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList62 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62, iColumnArray61);
        java.lang.String str64 = compositeType52.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62);
        java.lang.String str65 = compositeType7.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62);
        boolean boolean66 = placeholder0.equals((java.lang.Object) str65);
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        java.lang.String str68 = placeholder0.toString();
        boolean boolean69 = comparators.Composite.isValidType((java.lang.Object) str68);
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(iColumnArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(iColumnArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Placeholder(8)" + "'", str68, "Placeholder(8)");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.util.Iterator<java.lang.Object> objItor17 = composite10.iterator();
        java.util.stream.Stream<java.lang.Object> objStream18 = composite10.stream();
        byte[] byteArray19 = composite10.bytes;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(11, byteArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 15");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(objItor17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[67, 77, 80, 1, 2, 1, 0]");
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        int int81 = compositeTypeIterator80.start;
        compositeTypeIterator80.len = 3;
        int int84 = compositeTypeIterator80.start;
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 67 + "'", int81 == 67);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 67 + "'", int84 == 67);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        composite9.bytes = byteArray18;
        java.util.UUID uUID21 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite22 = composite9.addTimeUUID(uUID21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MINIMUM;
        int int1 = placeholder0.type;
        placeholder0.type = (byte) 100;
        placeholder0.type = (short) 100;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        java.lang.String str8 = placeholder0.toString();
        java.lang.Class<?> wildcardClass9 = placeholder0.getClass();
        org.junit.Assert.assertNotNull(placeholder0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 77 + "'", int1 == 77);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Placeholder(100)" + "'", str8, "Placeholder(100)");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        java.lang.Object[][][] objArray32 = new java.lang.Object[][][] {};
        java.lang.Object[][][] objArray33 = composite9.toArray(objArray32);
        comparators.Composite composite34 = new comparators.Composite((java.lang.Object[]) objArray32);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer35 = comparators.Composite.serializeToByteBuffer((java.lang.Object[]) objArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(objArray33);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.util.RandomAccess[] randomAccessArray11 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray12 = composite10.toArray(randomAccessArray11);
        comparators.Composite composite14 = composite10.addLong((long) 67);
        byte[] byteArray15 = composite14.serialize();
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray15);
        comparators.Composite composite17 = new comparators.Composite(byteArray15);
        comparators.Composite composite18 = compositeSerializer0.fromBytes(byteArray15);
        comparators.Composite composite19 = new comparators.Composite(byteArray15);
        java.util.UUID uUID20 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite21 = composite19.addTimeUUID(uUID20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(randomAccessArray12);
        org.junit.Assert.assertNotNull(composite14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNotNull(composite18);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray14);
        byte[] byteArray17 = comparators.Composite.serialize(objList16);
        java.util.stream.Stream<java.lang.Object> objStream18 = objList16.parallelStream();
        comparators.Composite composite19 = new comparators.Composite(objList16);
        java.lang.Object[] objArray20 = composite19.toArray();
        int int21 = composite19.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream22 = composite19.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream23 = composite19.parallelStream();
        int int24 = composite19.startOffset;
        int int25 = comparators.Composite.compare(composite9, composite19);
        composite9.clear();
        byte[] byteArray27 = composite9.bytes;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite9.stream();
        comparators.Composite composite30 = composite9.addAscii("Placeholder(1)");
        comparators.Composite composite32 = composite9.addLong((long) 77);
        java.util.UUID uUID33 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite34 = composite9.addTimeUUID(uUID33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(composite32);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        byte[] byteArray20 = comparators.Composite.serialize(objList18);
        byte[] byteArray21 = compositeListSerializer0.toBytes(objList18);
        byte[] byteArray22 = null;
        java.util.List<java.lang.Object> objList23 = compositeListSerializer0.fromBytes(byteArray22);
        comparators.Composite composite24 = new comparators.Composite(objList23);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer25 = comparators.Composite.serializeToByteBuffer(objList23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objList23);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        byte[] byteArray2 = null;
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray8 = new byte[] {};
        int int9 = comparators.Composite.compare(byteArray7, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        int int16 = comparators.Composite.compare(byteArray7, byteArray14);
        int int17 = comparators.Composite.compare((int) (byte) 1, byteArray2, 10, byteArray7);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.util.RandomAccess[] randomAccessArray28 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray29 = composite27.toArray(randomAccessArray28);
        comparators.Composite composite31 = composite27.addLong((long) 67);
        byte[] byteArray32 = composite31.serialize();
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray32);
        int int34 = comparators.Composite.compare(byteArray2, byteArray32);
        byte[] byteArray36 = null;
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        int int50 = comparators.Composite.compare(byteArray41, byteArray48);
        int int51 = comparators.Composite.compare((int) (byte) 1, byteArray36, 10, byteArray41);
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        java.util.List<java.lang.Object> objList59 = comparators.Composite.deserialize(byteArray57);
        boolean boolean60 = comparators.Composite.validate(0, byteArray57);
        byte[] byteArray61 = null;
        int int62 = comparators.Composite.compare(byteArray57, byteArray61);
        int int63 = comparators.Composite.compare(byteArray41, byteArray57);
        comparators.Composite composite64 = new comparators.Composite(byteArray57);
        int int65 = comparators.Composite.compare(byteArray2, byteArray57);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(455, byteArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 459");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(randomAccessArray28);
        org.junit.Assert.assertNotNull(randomAccessArray29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite65.startOffset;
        int int72 = composite17.compareTo(composite65);
        comparators.Composite composite74 = composite17.addLong((long) 80);
        comparators.Composite composite76 = composite17.addLong((long) 6);
        comparators.Composite composite78 = composite17.addUTF8("");
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray83 = new byte[] {};
        int int84 = comparators.Composite.compare(byteArray82, byteArray83);
        java.util.List<java.lang.Object> objList85 = comparators.Composite.deserialize(byteArray83);
        byte[] byteArray86 = comparators.Composite.serialize(objList85);
        java.util.stream.Stream<java.lang.Object> objStream87 = objList85.parallelStream();
        comparators.Composite composite88 = new comparators.Composite(objList85);
        java.lang.Object[] objArray89 = composite88.toArray();
        int int90 = composite88.startOffset;
        byte[] byteArray91 = composite88.bytes;
        int int92 = composite88.size();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean93 = composite17.remove((java.lang.Object) composite88);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(composite76);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(objList85);
        org.junit.Assert.assertNull(byteArray86);
        org.junit.Assert.assertNotNull(objStream87);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNull(byteArray91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        composite10.bytes = byteArray19;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(6, byteArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        byte[] byteArray13 = composite10.bytes;
        java.io.DataOutputStream dataOutputStream14 = null;
        composite10.out = dataOutputStream14;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        int int28 = comparators.Composite.compare(byteArray19, byteArray26);
        boolean boolean29 = comparators.Composite.isValidType((java.lang.Object) byteArray19);
        comparators.Composite composite30 = composite10.addBytes(byteArray19);
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray45 = new byte[] {};
        int int46 = comparators.Composite.compare(byteArray44, byteArray45);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray45);
        byte[] byteArray48 = comparators.Composite.serialize(objList47);
        java.util.stream.Stream<java.lang.Object> objStream49 = objList47.parallelStream();
        comparators.Composite composite50 = new comparators.Composite(objList47);
        java.util.RandomAccess[] randomAccessArray51 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray52 = composite50.toArray(randomAccessArray51);
        comparators.Composite composite54 = composite50.addLong((long) 67);
        byte[] byteArray55 = composite54.serialize();
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray55);
        int int57 = comparators.Composite.compare(byteArray38, byteArray55);
        comparators.hector.CompositeSerializer compositeSerializer58 = new comparators.hector.CompositeSerializer();
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        java.util.List<java.lang.Object> objList65 = comparators.Composite.deserialize(byteArray63);
        byte[] byteArray66 = comparators.Composite.serialize(objList65);
        java.util.stream.Stream<java.lang.Object> objStream67 = objList65.parallelStream();
        comparators.Composite composite68 = new comparators.Composite(objList65);
        java.lang.Object[] objArray69 = composite68.toArray();
        int int70 = composite68.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream71 = composite68.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream72 = composite68.parallelStream();
        comparators.Composite composite74 = composite68.addBool(true);
        java.io.DataOutputStream dataOutputStream75 = composite68.out;
        byte[] byteArray76 = compositeSerializer58.toBytes(composite68);
        int int77 = comparators.Composite.compare(byteArray55, byteArray76);
        boolean boolean78 = comparators.Composite.validate(1, byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        byte[] byteArray80 = comparators.Composite.serialize(objList79);
        byte[] byteArray81 = comparators.Composite.serialize(objList79);
        boolean boolean83 = comparators.Composite.validate((int) (byte) 10, byteArray81, false);
        // The following exception was thrown during execution in test generation
        try {
            int int84 = comparators.Composite.compare(1, byteArray19, 100, byteArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNull(byteArray48);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(randomAccessArray51);
        org.junit.Assert.assertNotNull(randomAccessArray52);
        org.junit.Assert.assertNotNull(composite54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(objList65);
        org.junit.Assert.assertNull(byteArray66);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(dataOutputStream75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        comparators.CompositeType compositeType1 = new comparators.CompositeType();
        comparators.CompositeType compositeType2 = comparators.CompositeType.instance;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        java.util.List<java.lang.Object> objList9 = comparators.Composite.deserialize(byteArray7);
        byte[] byteArray10 = comparators.Composite.serialize(objList9);
        java.util.stream.Stream<java.lang.Object> objStream11 = objList9.parallelStream();
        comparators.Composite composite12 = new comparators.Composite(objList9);
        java.lang.Object[] objArray13 = composite12.toArray();
        int int14 = composite12.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream15 = composite12.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream16 = composite12.parallelStream();
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        int int31 = composite26.startOffset;
        int int32 = composite12.compareTo(composite26);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        comparators.Composite composite39 = composite12.addBytes(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = composite39.serializeToByteBuffer();
        compositeType2.validate(byteBuffer40);
        boolean boolean42 = comparators.Composite.validate(byteBuffer40);
        comparators.Composite composite43 = new comparators.Composite(byteBuffer40);
        java.nio.ByteBuffer byteBuffer44 = null;
        int int45 = compositeType1.compare(byteBuffer40, byteBuffer44);
        compositeType0.validate(byteBuffer40);
        comparators.CompositeType compositeType47 = new comparators.CompositeType();
        comparators.CompositeType compositeType48 = comparators.CompositeType.instance;
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteArray53);
        byte[] byteArray56 = comparators.Composite.serialize(objList55);
        java.util.stream.Stream<java.lang.Object> objStream57 = objList55.parallelStream();
        comparators.Composite composite58 = new comparators.Composite(objList55);
        java.lang.Object[] objArray59 = composite58.toArray();
        int int60 = composite58.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream61 = composite58.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream62 = composite58.parallelStream();
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray67 = new byte[] {};
        int int68 = comparators.Composite.compare(byteArray66, byteArray67);
        java.util.List<java.lang.Object> objList69 = comparators.Composite.deserialize(byteArray67);
        byte[] byteArray70 = comparators.Composite.serialize(objList69);
        java.util.stream.Stream<java.lang.Object> objStream71 = objList69.parallelStream();
        comparators.Composite composite72 = new comparators.Composite(objList69);
        java.lang.Object[] objArray73 = composite72.toArray();
        int int74 = composite72.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream75 = composite72.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream76 = composite72.parallelStream();
        int int77 = composite72.startOffset;
        int int78 = composite58.compareTo(composite72);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray83 = new byte[] {};
        int int84 = comparators.Composite.compare(byteArray82, byteArray83);
        comparators.Composite composite85 = composite58.addBytes(byteArray83);
        java.nio.ByteBuffer byteBuffer86 = composite85.serializeToByteBuffer();
        compositeType48.validate(byteBuffer86);
        boolean boolean88 = comparators.Composite.validate(byteBuffer86);
        comparators.Composite composite89 = new comparators.Composite(byteBuffer86);
        java.nio.ByteBuffer byteBuffer90 = null;
        int int91 = compositeType47.compare(byteBuffer86, byteBuffer90);
        comparators.Composite composite92 = new comparators.Composite(byteBuffer86);
        compositeType0.validate(byteBuffer86);
        java.util.List<java.lang.Object> objList94 = comparators.Composite.deserialize(byteBuffer86);
        java.nio.ByteBuffer byteBuffer95 = comparators.Composite.serializeToByteBuffer(objList94);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(compositeType2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(compositeType48);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(objList69);
        org.junit.Assert.assertNull(byteArray70);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(objStream75);
        org.junit.Assert.assertNotNull(objStream76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(composite85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(objList94);
        org.junit.Assert.assertNotNull(byteBuffer95);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        byte[] byteArray82 = compositeTypeIterator80.bytes;
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray87 = new byte[] {};
        int int88 = comparators.Composite.compare(byteArray86, byteArray87);
        byte[] byteArray92 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray93 = new byte[] {};
        int int94 = comparators.Composite.compare(byteArray92, byteArray93);
        int int95 = comparators.Composite.compare(byteArray86, byteArray93);
        boolean boolean96 = comparators.Composite.isValidType((java.lang.Object) byteArray86);
        compositeTypeIterator80.bytes = byteArray86;
        int int98 = compositeTypeIterator80.len;
        byte[] byteArray99 = compositeTypeIterator80.bytes;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertNotNull(byteArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray99), "[10, 10, -1]");
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        java.lang.String str1 = placeholder0.toString();
        int int2 = placeholder0.type;
        org.junit.Assert.assertNotNull(placeholder0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Placeholder(77)" + "'", str1, "Placeholder(77)");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 77 + "'", int2 == 77);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        compositeTypeIterator80.offset = 1;
        int int84 = compositeTypeIterator80.type;
        compositeTypeIterator80.start = (byte) 10;
        int int87 = compositeTypeIterator80.len;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.lang.String str17 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray19 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList20 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList20, byteBufferArray19);
        java.lang.String str22 = compositeType18.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList20);
        java.lang.String str23 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList20);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer25 = compositeType6.fromString("Placeholder(-1)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteBufferArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        composite9.startOffset = (byte) 1;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        comparators.Composite composite31 = composite25.addBool(true);
        java.util.Iterator<java.lang.Object> objItor32 = composite25.iterator();
        comparators.Composite composite33 = new comparators.Composite();
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        int int48 = composite33.compareTo(composite43);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteArray53);
        byte[] byteArray56 = comparators.Composite.serialize(objList55);
        java.util.stream.Stream<java.lang.Object> objStream57 = objList55.parallelStream();
        comparators.Composite composite58 = new comparators.Composite(objList55);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        boolean boolean67 = comparators.Composite.validate((int) ' ', byteArray64, true);
        boolean boolean68 = composite58.contains((java.lang.Object) boolean67);
        java.util.stream.Stream<java.lang.Object> objStream69 = composite58.parallelStream();
        boolean boolean70 = composite33.contains((java.lang.Object) composite58);
        boolean boolean71 = composite25.addAll((java.util.Collection<java.lang.Object>) composite33);
        int int72 = composite33.startOffset;
        comparators.Composite composite74 = composite33.addAscii("hi!");
        boolean boolean75 = composite9.add((java.lang.Object) composite33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = composite9.toString();
            org.junit.Assert.fail("Expected exception of type org.apache.cassandra.db.marshal.MarshalException; message: Not a composite type (ID byte 0 incorrect)");
        } catch (org.apache.cassandra.db.marshal.MarshalException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(objItor32);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.offset = 100;
        int int88 = compositeTypeIterator80.type;
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        int int16 = composite9.startOffset;
        comparators.CompositeType compositeType17 = new comparators.CompositeType();
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite42.startOffset;
        int int48 = composite28.compareTo(composite42);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        comparators.Composite composite55 = composite28.addBytes(byteArray53);
        java.nio.ByteBuffer byteBuffer56 = composite55.serializeToByteBuffer();
        compositeType18.validate(byteBuffer56);
        boolean boolean58 = comparators.Composite.validate(byteBuffer56);
        comparators.Composite composite59 = new comparators.Composite(byteBuffer56);
        java.nio.ByteBuffer byteBuffer60 = null;
        int int61 = compositeType17.compare(byteBuffer56, byteBuffer60);
        comparators.Composite composite62 = new comparators.Composite(byteBuffer56);
        comparators.Composite composite63 = new comparators.Composite(byteBuffer56);
        boolean boolean64 = composite9.equals((java.lang.Object) composite63);
        comparators.Composite composite65 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int66 = comparators.Composite.compare(composite63, composite65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        comparators.Composite composite0 = new comparators.Composite();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        int int15 = composite0.compareTo(composite10);
        int int16 = composite0.size();
        byte[] byteArray17 = composite0.serialize();
        java.util.stream.Stream<java.lang.Object> objStream18 = composite0.stream();
        comparators.hector.CompositeSerializer compositeSerializer19 = new comparators.hector.CompositeSerializer();
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        int int32 = composite29.startOffset;
        byte[] byteArray33 = compositeSerializer19.toBytes(composite29);
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        comparators.Composite composite49 = composite43.addBool(true);
        java.util.Iterator<java.lang.Object> objItor50 = composite43.iterator();
        comparators.Composite composite52 = composite43.addReal((java.lang.Double) 100.0d);
        comparators.Composite composite54 = composite52.addLong((long) '#');
        byte[] byteArray55 = compositeSerializer19.toBytes(composite54);
        comparators.Composite composite57 = composite54.addReal((java.lang.Double) 1.0d);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray62 = new byte[] {};
        int int63 = comparators.Composite.compare(byteArray61, byteArray62);
        java.util.List<java.lang.Object> objList64 = comparators.Composite.deserialize(byteArray62);
        byte[] byteArray65 = comparators.Composite.serialize(objList64);
        java.util.stream.Stream<java.lang.Object> objStream66 = objList64.parallelStream();
        comparators.Composite composite67 = new comparators.Composite(objList64);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        boolean boolean76 = comparators.Composite.validate((int) ' ', byteArray73, true);
        boolean boolean77 = composite67.contains((java.lang.Object) boolean76);
        java.util.Spliterator<java.lang.Object> objSpliterator78 = composite67.spliterator();
        byte[] byteArray79 = composite67.bytes;
        int int80 = composite54.compareTo(composite67);
        comparators.Composite composite82 = composite54.addBool(false);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean83 = composite0.retainAll((java.util.Collection<java.lang.Object>) composite82);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(objItor50);
        org.junit.Assert.assertNotNull(composite52);
        org.junit.Assert.assertNotNull(composite54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[67, 77, 80, 1, 2, 1, 0, 4, 64, 89, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 35, 0]");
        org.junit.Assert.assertNotNull(composite57);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(objList64);
        org.junit.Assert.assertNull(byteArray65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(objSpliterator78);
        org.junit.Assert.assertNull(byteArray79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(composite82);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        boolean boolean6 = comparators.Composite.isValidType((java.lang.Object) compositeType0);
        comparators.CompositeType compositeType7 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator8 = compositeType7.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType10 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray11 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList12 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12, byteBufferArray11);
        java.lang.String str14 = compositeType10.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator15 = compositeType10.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator16 = compositeType7.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType10);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator17 = compositeType10.indexReverseComparator;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer19 = compositeType10.fromString("true");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexInfoComparator8);
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(compositeType10);
        org.junit.Assert.assertNotNull(byteBufferArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(indexInfoComparator15);
        org.junit.Assert.assertNotNull(byteBufferComparator16);
        org.junit.Assert.assertNotNull(indexInfoComparator17);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MINIMUM;
        int int1 = placeholder0.type;
        placeholder0.type = (byte) 100;
        placeholder0.type = (short) 100;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        java.lang.String str9 = placeholder0.toString();
        org.junit.Assert.assertNotNull(placeholder0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 77 + "'", int1 == 77);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Placeholder(100)" + "'", str9, "Placeholder(100)");
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.hector.CompositeListSerializer compositeListSerializer1 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        byte[] byteArray12 = compositeListSerializer1.toBytes(objList8);
        comparators.hector.CompositeSerializer compositeSerializer13 = new comparators.hector.CompositeSerializer();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.io.DataOutputStream dataOutputStream30 = composite23.out;
        byte[] byteArray31 = compositeSerializer13.toBytes(composite23);
        comparators.hector.CompositeListSerializer compositeListSerializer32 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator38 = compositeType33.indexComparator;
        comparators.CompositeType compositeType39 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray40 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList41 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41, byteBufferArray40);
        java.lang.String str43 = compositeType39.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator44 = compositeType33.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType39);
        comparators.CompositeType compositeType45 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray46 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList47 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47, byteBufferArray46);
        java.lang.String str49 = compositeType45.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47);
        java.lang.String str50 = compositeType39.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47);
        java.util.List<java.util.List<java.lang.Object>> objListList51 = compositeListSerializer32.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList47);
        comparators.hector.CompositeListSerializer compositeListSerializer52 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType53 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray54 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList55 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList55, byteBufferArray54);
        java.lang.String str57 = compositeType53.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList55);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator58 = compositeType53.indexComparator;
        comparators.CompositeType compositeType59 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray60 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList61 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList61, byteBufferArray60);
        java.lang.String str63 = compositeType59.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList61);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator64 = compositeType53.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType59);
        comparators.CompositeType compositeType65 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray66 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList67 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList67, byteBufferArray66);
        java.lang.String str69 = compositeType65.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList67);
        java.lang.String str70 = compositeType59.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList67);
        java.util.List<java.util.List<java.lang.Object>> objListList71 = compositeListSerializer52.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList67);
        int int73 = compositeListSerializer52.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer74 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType75 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray76 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList77 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList77, byteBufferArray76);
        java.lang.String str79 = compositeType75.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList77);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator80 = compositeType75.indexComparator;
        comparators.CompositeType compositeType81 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray82 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList83 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList83, byteBufferArray82);
        java.lang.String str85 = compositeType81.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList83);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator86 = compositeType75.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType81);
        comparators.CompositeType compositeType87 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray88 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList89 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList89, byteBufferArray88);
        java.lang.String str91 = compositeType87.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList89);
        java.lang.String str92 = compositeType81.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList89);
        java.util.List<java.util.List<java.lang.Object>> objListList93 = compositeListSerializer74.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList89);
        java.util.List<java.nio.ByteBuffer> byteBufferList94 = compositeListSerializer52.toBytesList(objListList93);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet95 = compositeListSerializer32.toBytesSet(objListList93);
        java.util.List<comparators.Composite> compositeList96 = compositeSerializer13.fromBytesSet(byteBufferSet95);
        java.util.List<java.util.List<java.lang.Object>> objListList97 = compositeListSerializer1.fromBytesSet(byteBufferSet95);
        java.lang.String str98 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferSet95);
        java.lang.Class<?> wildcardClass99 = byteBufferSet95.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(dataOutputStream30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(indexInfoComparator38);
        org.junit.Assert.assertNotNull(compositeType39);
        org.junit.Assert.assertNotNull(byteBufferArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteBufferComparator44);
        org.junit.Assert.assertNotNull(compositeType45);
        org.junit.Assert.assertNotNull(byteBufferArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(objListList51);
        org.junit.Assert.assertNotNull(compositeType53);
        org.junit.Assert.assertNotNull(byteBufferArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(indexInfoComparator58);
        org.junit.Assert.assertNotNull(compositeType59);
        org.junit.Assert.assertNotNull(byteBufferArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(byteBufferComparator64);
        org.junit.Assert.assertNotNull(compositeType65);
        org.junit.Assert.assertNotNull(byteBufferArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(objListList71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 6 + "'", int73 == 6);
        org.junit.Assert.assertNotNull(compositeType75);
        org.junit.Assert.assertNotNull(byteBufferArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(indexInfoComparator80);
        org.junit.Assert.assertNotNull(compositeType81);
        org.junit.Assert.assertNotNull(byteBufferArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(byteBufferComparator86);
        org.junit.Assert.assertNotNull(compositeType87);
        org.junit.Assert.assertNotNull(byteBufferArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(objListList93);
        org.junit.Assert.assertNotNull(byteBufferList94);
        org.junit.Assert.assertNotNull(byteBufferSet95);
        org.junit.Assert.assertNotNull(compositeList96);
        org.junit.Assert.assertNotNull(objListList97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.offset = 100;
        int int88 = compositeTypeIterator80.type;
        compositeTypeIterator80.start = 14;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj91 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        byte[] byteArray1 = null;
        boolean boolean3 = comparators.Composite.validate(100, byteArray1, false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        composite9.clear();
        boolean boolean17 = composite9.equals((java.lang.Object) 1L);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.util.RandomAccess[] randomAccessArray28 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray29 = composite27.toArray(randomAccessArray28);
        comparators.Composite composite30 = new comparators.Composite((java.lang.Object[]) randomAccessArray29);
        int int31 = comparators.Composite.compare(composite9, composite30);
        java.lang.String str32 = composite30.toString();
        java.util.UUID uUID33 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite34 = composite30.addLexicalUUID(uUID33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(randomAccessArray28);
        org.junit.Assert.assertNotNull(randomAccessArray29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.len = 58;
        byte[] byteArray88 = compositeTypeIterator80.bytes;
        boolean boolean89 = compositeTypeIterator80.hasNext();
        compositeTypeIterator80.offset = (byte) -1;
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        comparators.CompositeType compositeType9 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray10 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList11 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11, byteBufferArray10);
        java.lang.String str13 = compositeType9.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType9.indexComparator;
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator20 = compositeType9.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType15);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator21 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType9);
        comparators.CompositeType compositeType22 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray23 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList24 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24, byteBufferArray23);
        java.lang.String str26 = compositeType22.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator27 = compositeType22.indexComparator;
        boolean boolean28 = comparators.Composite.isValidType((java.lang.Object) compositeType22);
        comparators.CompositeType compositeType29 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator30 = compositeType29.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType22.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        comparators.CompositeType compositeType32 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray33 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList34 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34, byteBufferArray33);
        java.lang.String str36 = compositeType32.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator37 = compositeType32.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator38 = compositeType29.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType32);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator39 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator40 = compositeType29.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator41 = byteBufferComparator40.reversed();
        java.lang.Class<?> wildcardClass42 = byteBufferComparator41.getClass();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(compositeType9);
        org.junit.Assert.assertNotNull(byteBufferArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteBufferComparator20);
        org.junit.Assert.assertNotNull(byteBufferComparator21);
        org.junit.Assert.assertNotNull(compositeType22);
        org.junit.Assert.assertNotNull(byteBufferArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(indexInfoComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(indexInfoComparator30);
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(compositeType32);
        org.junit.Assert.assertNotNull(byteBufferArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(indexInfoComparator37);
        org.junit.Assert.assertNotNull(byteBufferComparator38);
        org.junit.Assert.assertNotNull(byteBufferComparator39);
        org.junit.Assert.assertNotNull(byteBufferComparator40);
        org.junit.Assert.assertNotNull(byteBufferComparator41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        compositeTypeIterator80.offset = 1;
        int int84 = compositeTypeIterator80.start;
        java.lang.Class<?> wildcardClass85 = compositeTypeIterator80.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 67 + "'", int84 == 67);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray38 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray39 = composite9.toArray(compositeListSerializerArray38);
        comparators.Composite composite40 = new comparators.Composite((java.lang.Object[]) compositeListSerializerArray38);
        byte[] byteArray41 = comparators.Composite.serialize((java.lang.Object[]) compositeListSerializerArray38);
        byte[] byteArray42 = comparators.Composite.serialize((java.lang.Object[]) compositeListSerializerArray38);
        comparators.Composite composite43 = new comparators.Composite((java.lang.Object[]) compositeListSerializerArray38);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        java.util.List<java.lang.Object> objList50 = comparators.Composite.deserialize(byteArray48);
        byte[] byteArray51 = comparators.Composite.serialize(objList50);
        java.util.stream.Stream<java.lang.Object> objStream52 = objList50.parallelStream();
        comparators.Composite composite53 = new comparators.Composite(objList50);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        boolean boolean62 = comparators.Composite.validate((int) ' ', byteArray59, true);
        boolean boolean63 = composite53.contains((java.lang.Object) boolean62);
        java.util.Spliterator<java.lang.Object> objSpliterator64 = composite53.spliterator();
        byte[] byteArray65 = composite53.bytes;
        comparators.Composite composite67 = composite53.addUTF8("Placeholder(1)");
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray72 = new byte[] {};
        int int73 = comparators.Composite.compare(byteArray71, byteArray72);
        java.util.List<java.lang.Object> objList74 = comparators.Composite.deserialize(byteArray72);
        byte[] byteArray75 = comparators.Composite.serialize(objList74);
        java.util.stream.Stream<java.lang.Object> objStream76 = objList74.parallelStream();
        comparators.Composite composite77 = new comparators.Composite(objList74);
        java.lang.Object[] objArray78 = composite77.toArray();
        int int79 = composite77.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream80 = null;
        composite77.byteStream = byteArrayOutputStream80;
        boolean boolean82 = composite67.containsAll((java.util.Collection<java.lang.Object>) composite77);
        java.util.Iterator<java.lang.Object> objItor83 = composite77.iterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean84 = composite43.removeAll((java.util.Collection<java.lang.Object>) composite77);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray38);
        org.junit.Assert.assertNotNull(compositeListSerializerArray39);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(objList50);
        org.junit.Assert.assertNull(byteArray51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objSpliterator64);
        org.junit.Assert.assertNull(byteArray65);
        org.junit.Assert.assertNotNull(composite67);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(objList74);
        org.junit.Assert.assertNull(byteArray75);
        org.junit.Assert.assertNotNull(objStream76);
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(objItor83);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        byte[] byteArray14 = composite13.serialize();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        comparators.Composite composite30 = composite24.addBool(true);
        java.util.Iterator<java.lang.Object> objItor31 = composite24.iterator();
        comparators.Composite composite32 = new comparators.Composite();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite32.compareTo(composite42);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        boolean boolean66 = comparators.Composite.validate((int) ' ', byteArray63, true);
        boolean boolean67 = composite57.contains((java.lang.Object) boolean66);
        java.util.stream.Stream<java.lang.Object> objStream68 = composite57.parallelStream();
        boolean boolean69 = composite32.contains((java.lang.Object) composite57);
        boolean boolean70 = composite24.addAll((java.util.Collection<java.lang.Object>) composite32);
        int int71 = composite32.startOffset;
        boolean boolean72 = composite13.add((java.lang.Object) composite32);
        comparators.Composite composite74 = composite32.addUTF8("434d500103000000000000004300");
        java.util.stream.Stream<java.lang.Object> objStream75 = composite32.parallelStream();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(objStream75);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator12 = compositeType0.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType0.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator15 = compositeType0.reversed();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator16 = compositeType0.indexReverseComparator;
        comparators.CompositeType compositeType17 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray18 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList19 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19, byteBufferArray18);
        java.lang.String str21 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator22 = compositeType17.indexComparator;
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator28 = compositeType17.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType23);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        int int40 = composite38.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream41 = composite38.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream42 = composite38.parallelStream();
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.lang.Object[] objArray53 = composite52.toArray();
        int int54 = composite52.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream55 = composite52.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream56 = composite52.parallelStream();
        int int57 = composite52.startOffset;
        int int58 = composite38.compareTo(composite52);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        comparators.Composite composite65 = composite38.addBytes(byteArray63);
        java.nio.ByteBuffer byteBuffer66 = composite65.serializeToByteBuffer();
        compositeType23.validate(byteBuffer66);
        comparators.CompositeType compositeType68 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray69 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList70 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList70, byteBufferArray69);
        java.lang.String str72 = compositeType68.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList70);
        org.apache.cassandra.db.IColumn[] iColumnArray73 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList74 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList74, iColumnArray73);
        java.lang.String str76 = compositeType68.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList74);
        org.apache.cassandra.db.IColumn[] iColumnArray77 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList78 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList78, iColumnArray77);
        java.lang.String str80 = compositeType68.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList78);
        java.lang.String str81 = compositeType23.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList78);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator82 = compositeType23.indexReverseComparator;
        comparators.CompositeType compositeType83 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray84 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList85 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList85, byteBufferArray84);
        java.lang.String str87 = compositeType83.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList85);
        org.apache.cassandra.db.IColumn[] iColumnArray88 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList89 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList89, iColumnArray88);
        java.lang.String str91 = compositeType83.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList89);
        java.lang.String str92 = compositeType23.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList89);
        java.lang.String str93 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList89);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer95 = compositeType0.fromString("UTF-8");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(indexInfoComparator12);
        org.junit.Assert.assertNotNull(byteBufferComparator13);
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(byteBufferComparator15);
        org.junit.Assert.assertNotNull(indexInfoComparator16);
        org.junit.Assert.assertNotNull(compositeType17);
        org.junit.Assert.assertNotNull(byteBufferArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(indexInfoComparator22);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteBufferComparator28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertNotNull(compositeType68);
        org.junit.Assert.assertNotNull(byteBufferArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(iColumnArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(iColumnArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(indexInfoComparator82);
        org.junit.Assert.assertNotNull(compositeType83);
        org.junit.Assert.assertNotNull(byteBufferArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(iColumnArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        comparators.Composite composite0 = null;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        java.util.List<java.lang.Object> objList17 = comparators.Composite.deserialize(byteArray15);
        byte[] byteArray18 = comparators.Composite.serialize(objList17);
        java.util.stream.Stream<java.lang.Object> objStream19 = objList17.parallelStream();
        comparators.Composite composite20 = new comparators.Composite(objList17);
        java.lang.Object[] objArray21 = composite20.toArray();
        int int22 = composite20.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream23 = composite20.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream24 = composite20.parallelStream();
        int int25 = composite20.startOffset;
        int int26 = comparators.Composite.compare(composite10, composite20);
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray32 = new byte[] {};
        int int33 = comparators.Composite.compare(byteArray31, byteArray32);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray32);
        byte[] byteArray35 = comparators.Composite.serialize(objList34);
        java.util.stream.Stream<java.lang.Object> objStream36 = objList34.parallelStream();
        comparators.Composite composite37 = new comparators.Composite(objList34);
        java.lang.Object[] objArray38 = composite37.toArray();
        int int39 = composite37.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream40 = composite37.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream41 = composite37.parallelStream();
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        int int56 = composite51.startOffset;
        int int57 = composite37.compareTo(composite51);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray62 = new byte[] {};
        int int63 = comparators.Composite.compare(byteArray61, byteArray62);
        comparators.Composite composite64 = composite37.addBytes(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = composite64.serializeToByteBuffer();
        compositeType27.validate(byteBuffer65);
        comparators.CompositeType compositeType67 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray68 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList69 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList69, byteBufferArray68);
        java.lang.String str71 = compositeType67.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList69);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator72 = compositeType67.indexComparator;
        boolean boolean73 = comparators.Composite.isValidType((java.lang.Object) compositeType67);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator74 = compositeType27.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType67);
        java.lang.Class<?> wildcardClass75 = compositeType67.getClass();
        java.lang.reflect.Type[] typeArray76 = new java.lang.reflect.Type[] { wildcardClass75 };
        java.lang.reflect.Type[] typeArray77 = composite20.toArray(typeArray76);
        comparators.Composite composite79 = composite20.addBool(true);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray86 = new byte[] {};
        int int87 = comparators.Composite.compare(byteArray85, byteArray86);
        java.util.List<java.lang.Object> objList88 = comparators.Composite.deserialize(byteArray86);
        boolean boolean89 = comparators.Composite.validate(0, byteArray86);
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite.CompositeTypeIterator compositeTypeIterator90 = composite0.new CompositeTypeIterator(composite20, 43, byteArray86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to comparators.Composite$CompositeTypeIterator with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(objList17);
        org.junit.Assert.assertNull(byteArray18);
        org.junit.Assert.assertNotNull(objStream19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(composite64);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(compositeType67);
        org.junit.Assert.assertNotNull(byteBufferArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(indexInfoComparator72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(byteBufferComparator74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(objList88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        compositeTypeIterator80.offset = (short) 0;
        int int85 = compositeTypeIterator80.len;
        int int86 = compositeTypeIterator80.offset;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        byte[] byteArray21 = composite9.bytes;
        comparators.Composite composite23 = composite9.addUTF8("Placeholder(1)");
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.lang.Object[] objArray34 = composite33.toArray();
        int int35 = composite33.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream36 = null;
        composite33.byteStream = byteArrayOutputStream36;
        boolean boolean38 = composite23.containsAll((java.util.Collection<java.lang.Object>) composite33);
        comparators.Composite composite40 = composite33.addUTF8("US-ASCII");
        java.util.UUID uUID41 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite42 = composite33.addTimeUUID(uUID41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(composite23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(composite40);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        byte[] byteArray82 = compositeTypeIterator80.bytes;
        int int83 = compositeTypeIterator80.type;
        compositeTypeIterator80.len = 70;
        compositeTypeIterator80.len = 32;
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.lang.String str17 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite42.startOffset;
        int int48 = composite28.compareTo(composite42);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        comparators.Composite composite55 = composite28.addBytes(byteArray53);
        java.nio.ByteBuffer byteBuffer56 = composite55.serializeToByteBuffer();
        compositeType18.validate(byteBuffer56);
        java.lang.String str58 = compositeType6.getString(byteBuffer56);
        comparators.Composite composite59 = new comparators.Composite(byteBuffer56);
        java.util.Iterator<java.lang.Object> objItor60 = composite59.iterator();
        java.util.UUID uUID61 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite62 = composite59.addLexicalUUID(uUID61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(objItor60);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.io.DataOutputStream dataOutputStream16 = composite9.out;
        comparators.Composite composite18 = composite9.addAscii("Placeholder(6)");
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        comparators.CompositeType compositeType30 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray31 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList32 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32, byteBufferArray31);
        java.lang.String str34 = compositeType30.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator35 = compositeType30.indexComparator;
        comparators.CompositeType compositeType36 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray37 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList38 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38, byteBufferArray37);
        java.lang.String str40 = compositeType36.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator41 = compositeType30.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType36);
        comparators.CompositeType compositeType42 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray43 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList44 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44, byteBufferArray43);
        java.lang.String str46 = compositeType42.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44);
        java.lang.String str47 = compositeType36.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44);
        comparators.CompositeType compositeType48 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray49 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList50 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList50, byteBufferArray49);
        java.lang.String str52 = compositeType48.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList50);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator53 = compositeType48.indexComparator;
        comparators.CompositeType compositeType54 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray55 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList56 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList56, byteBufferArray55);
        java.lang.String str58 = compositeType54.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList56);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator59 = compositeType48.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType54);
        comparators.CompositeType compositeType60 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray61 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList62 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList62, byteBufferArray61);
        java.lang.String str64 = compositeType60.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList62);
        java.lang.String str65 = compositeType54.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList62);
        java.util.AbstractList[] abstractListArray67 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray68 = (java.util.AbstractList<java.nio.ByteBuffer>[]) abstractListArray67;
        byteBufferListArray68[0] = byteBufferList44;
        byteBufferListArray68[1] = byteBufferList62;
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray73 = composite28.toArray(byteBufferListArray68);
        composite28.startOffset = 70;
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray82 = new byte[] {};
        int int83 = comparators.Composite.compare(byteArray81, byteArray82);
        java.util.List<java.lang.Object> objList84 = comparators.Composite.deserialize(byteArray82);
        boolean boolean85 = comparators.Composite.validate(0, byteArray82);
        boolean boolean86 = comparators.Composite.validate(4, byteArray82);
        composite28.bytes = byteArray82;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = composite9.removeAll((java.util.Collection<java.lang.Object>) composite28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(dataOutputStream16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(compositeType30);
        org.junit.Assert.assertNotNull(byteBufferArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(indexInfoComparator35);
        org.junit.Assert.assertNotNull(compositeType36);
        org.junit.Assert.assertNotNull(byteBufferArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteBufferComparator41);
        org.junit.Assert.assertNotNull(compositeType42);
        org.junit.Assert.assertNotNull(byteBufferArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(compositeType48);
        org.junit.Assert.assertNotNull(byteBufferArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(indexInfoComparator53);
        org.junit.Assert.assertNotNull(compositeType54);
        org.junit.Assert.assertNotNull(byteBufferArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteBufferComparator59);
        org.junit.Assert.assertNotNull(compositeType60);
        org.junit.Assert.assertNotNull(byteBufferArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(abstractListArray67);
        org.junit.Assert.assertNotNull(byteBufferListArray68);
        org.junit.Assert.assertNotNull(byteBufferListArray73);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(objList84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.offset = 100;
        int int88 = compositeTypeIterator80.type;
        compositeTypeIterator80.len = 32;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        java.util.Collection<java.lang.Object> objCollection19 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = composite10.retainAll(objCollection19);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        byte[] byteArray14 = composite13.serialize();
        java.util.List<java.lang.Object> objList15 = comparators.Composite.deserialize(byteArray14);
        comparators.Composite composite16 = new comparators.Composite(objList15);
        comparators.hector.CompositeSerializer compositeSerializer18 = new comparators.hector.CompositeSerializer();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray29 = new byte[] {};
        int int30 = comparators.Composite.compare(byteArray28, byteArray29);
        int int31 = comparators.Composite.compare(byteArray22, byteArray29);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray29);
        comparators.Composite composite33 = compositeSerializer18.fromBytes(byteArray29);
        boolean boolean35 = comparators.Composite.validate((int) 'a', byteArray29, true);
        composite16.bytes = byteArray29;
        java.util.UUID uUID37 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite38 = composite16.addLexicalUUID(uUID37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList15);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray11 = new byte[] {};
        int int12 = comparators.Composite.compare(byteArray10, byteArray11);
        int int13 = comparators.Composite.compare(byteArray4, byteArray11);
        boolean boolean15 = comparators.Composite.validate((int) (byte) 0, byteArray11, true);
        boolean boolean16 = comparators.Composite.isValidType((java.lang.Object) true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        compositeTypeIterator80.offset = 1;
        int int84 = compositeTypeIterator80.start;
        int int85 = compositeTypeIterator80.start;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 67 + "'", int84 == 67);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.len = 58;
        byte[] byteArray88 = compositeTypeIterator80.bytes;
        boolean boolean89 = compositeTypeIterator80.hasNext();
        compositeTypeIterator80.offset = (byte) -1;
        compositeTypeIterator80.len = 97;
        compositeTypeIterator80.type = (short) 100;
        int int96 = compositeTypeIterator80.type;
        compositeTypeIterator80.start = 9;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 100 + "'", int96 == 100);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        compositeTypeIterator80.offset = (short) 0;
        int int85 = compositeTypeIterator80.len;
        boolean boolean86 = compositeTypeIterator80.hasNext();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.util.RandomAccess[] randomAccessArray11 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray12 = composite10.toArray(randomAccessArray11);
        comparators.Composite composite14 = composite10.addLong((long) 67);
        comparators.Composite composite16 = composite14.addBool(true);
        comparators.Composite composite18 = composite14.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator19 = composite14.spliterator();
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        boolean boolean38 = comparators.Composite.validate((int) ' ', byteArray35, true);
        boolean boolean39 = composite29.contains((java.lang.Object) boolean38);
        java.util.Spliterator<java.lang.Object> objSpliterator40 = composite29.spliterator();
        java.io.DataOutputStream dataOutputStream41 = composite29.out;
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.lang.Object[] objArray53 = composite52.toArray();
        int int54 = composite52.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream55 = composite52.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream56 = composite52.parallelStream();
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        java.util.List<java.lang.Object> objList63 = comparators.Composite.deserialize(byteArray61);
        byte[] byteArray64 = comparators.Composite.serialize(objList63);
        java.util.stream.Stream<java.lang.Object> objStream65 = objList63.parallelStream();
        comparators.Composite composite66 = new comparators.Composite(objList63);
        java.lang.Object[] objArray67 = composite66.toArray();
        int int68 = composite66.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream69 = composite66.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream70 = composite66.parallelStream();
        int int71 = composite66.startOffset;
        int int72 = composite52.compareTo(composite66);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        comparators.Composite composite79 = composite52.addBytes(byteArray77);
        java.util.List<java.lang.Object> objList80 = comparators.Composite.deserialize(byteArray77);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator81 = composite14.new CompositeTypeIterator(composite29, 67, byteArray77);
        comparators.Composite composite82 = compositeTypeIterator81.collection;
        byte[] byteArray83 = compositeTypeIterator81.bytes;
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray88 = new byte[] {};
        int int89 = comparators.Composite.compare(byteArray87, byteArray88);
        byte[] byteArray93 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray94 = new byte[] {};
        int int95 = comparators.Composite.compare(byteArray93, byteArray94);
        int int96 = comparators.Composite.compare(byteArray87, byteArray94);
        boolean boolean97 = comparators.Composite.isValidType((java.lang.Object) byteArray87);
        compositeTypeIterator81.bytes = byteArray87;
        boolean boolean99 = comparators.Composite.validate(80, byteArray87);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(randomAccessArray12);
        org.junit.Assert.assertNotNull(composite14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(objSpliterator19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objSpliterator40);
        org.junit.Assert.assertNull(dataOutputStream41);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(objList63);
        org.junit.Assert.assertNull(byteArray64);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertNotNull(objList80);
        org.junit.Assert.assertNotNull(composite82);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        comparators.Composite composite38 = composite11.addBytes(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = composite38.serializeToByteBuffer();
        compositeType1.validate(byteBuffer39);
        boolean boolean41 = comparators.Composite.validate(byteBuffer39);
        comparators.Composite composite42 = new comparators.Composite(byteBuffer39);
        java.nio.ByteBuffer byteBuffer43 = null;
        int int44 = compositeType0.compare(byteBuffer39, byteBuffer43);
        comparators.Composite composite45 = new comparators.Composite(byteBuffer39);
        comparators.Composite composite46 = new comparators.Composite(byteBuffer39);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        int int61 = comparators.Composite.compare(byteArray52, byteArray59);
        boolean boolean63 = comparators.Composite.validate(0, byteArray59, false);
        java.util.List<java.lang.Object> objList64 = comparators.Composite.deserialize((int) (short) 0, byteArray59);
        comparators.Composite composite65 = new comparators.Composite(objList64);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = composite46.removeAll((java.util.Collection<java.lang.Object>) objList64);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objList64);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray11 = new byte[] {};
        int int12 = comparators.Composite.compare(byteArray10, byteArray11);
        int int13 = comparators.Composite.compare(byteArray4, byteArray11);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray11);
        comparators.Composite composite15 = compositeSerializer0.fromBytes(byteArray11);
        int int17 = compositeSerializer0.computeInitialHashSize(1);
        comparators.hector.CompositeListSerializer compositeListSerializer18 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType19 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray20 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList21 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList21, byteBufferArray20);
        java.lang.String str23 = compositeType19.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList21);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator24 = compositeType19.indexComparator;
        comparators.CompositeType compositeType25 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray26 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList27 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList27, byteBufferArray26);
        java.lang.String str29 = compositeType25.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList27);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator30 = compositeType19.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType25);
        comparators.CompositeType compositeType31 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray32 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList33 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList33, byteBufferArray32);
        java.lang.String str35 = compositeType31.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList33);
        java.lang.String str36 = compositeType25.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList33);
        java.util.List<java.util.List<java.lang.Object>> objListList37 = compositeListSerializer18.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList33);
        int int39 = compositeListSerializer18.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer40 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray42 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList43 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43, byteBufferArray42);
        java.lang.String str45 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator46 = compositeType41.indexComparator;
        comparators.CompositeType compositeType47 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray48 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList49 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList49, byteBufferArray48);
        java.lang.String str51 = compositeType47.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList49);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator52 = compositeType41.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType47);
        comparators.CompositeType compositeType53 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray54 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList55 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList55, byteBufferArray54);
        java.lang.String str57 = compositeType53.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList55);
        java.lang.String str58 = compositeType47.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList55);
        java.util.List<java.util.List<java.lang.Object>> objListList59 = compositeListSerializer40.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList55);
        java.util.List<java.nio.ByteBuffer> byteBufferList60 = compositeListSerializer18.toBytesList(objListList59);
        java.util.List<comparators.Composite> compositeList61 = compositeSerializer0.fromBytesList(byteBufferList60);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        java.util.List<java.lang.Object> objList68 = comparators.Composite.deserialize(byteArray66);
        byte[] byteArray69 = comparators.Composite.serialize(objList68);
        java.util.stream.Stream<java.lang.Object> objStream70 = objList68.parallelStream();
        comparators.Composite composite71 = new comparators.Composite(objList68);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        boolean boolean80 = comparators.Composite.validate((int) ' ', byteArray77, true);
        boolean boolean81 = composite71.contains((java.lang.Object) boolean80);
        java.util.stream.Stream<java.lang.Object> objStream82 = composite71.parallelStream();
        composite71.startOffset = 8;
        comparators.Composite composite86 = composite71.addAscii("hi!");
        comparators.Composite composite88 = composite71.addLong((long) 4);
        int int89 = composite88.size();
        java.lang.Object[] objArray90 = composite88.toArray();
        java.nio.ByteBuffer byteBuffer91 = compositeSerializer0.toByteBuffer(composite88);
        comparators.Composite composite93 = composite88.addLong((long) 138);
        byte[] byteArray94 = composite88.serialize();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(compositeType19);
        org.junit.Assert.assertNotNull(byteBufferArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(indexInfoComparator24);
        org.junit.Assert.assertNotNull(compositeType25);
        org.junit.Assert.assertNotNull(byteBufferArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteBufferComparator30);
        org.junit.Assert.assertNotNull(compositeType31);
        org.junit.Assert.assertNotNull(byteBufferArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(objListList37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteBufferArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(indexInfoComparator46);
        org.junit.Assert.assertNotNull(compositeType47);
        org.junit.Assert.assertNotNull(byteBufferArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteBufferComparator52);
        org.junit.Assert.assertNotNull(compositeType53);
        org.junit.Assert.assertNotNull(byteBufferArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(objListList59);
        org.junit.Assert.assertNotNull(byteBufferList60);
        org.junit.Assert.assertNotNull(compositeList61);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(objList68);
        org.junit.Assert.assertNull(byteArray69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objStream82);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertNotNull(composite88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[hi!, 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[hi!, 4]");
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertNotNull(composite93);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[67, 77, 80, 1, 7, 0, 3, 104, 105, 33, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 3, 0, 0, 0, 0, 0, 0, 0, -118, 0]");
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        int int81 = compositeTypeIterator80.start;
        int int82 = compositeTypeIterator80.offset;
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 67 + "'", int81 == 67);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 67 + "'", int82 == 67);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        comparators.CompositeType compositeType19 = comparators.CompositeType.instance;
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        int int48 = composite43.startOffset;
        int int49 = composite29.compareTo(composite43);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        comparators.Composite composite56 = composite29.addBytes(byteArray54);
        java.nio.ByteBuffer byteBuffer57 = composite56.serializeToByteBuffer();
        compositeType19.validate(byteBuffer57);
        boolean boolean59 = comparators.Composite.validate(byteBuffer57);
        boolean boolean60 = comparators.Composite.validate(byteBuffer57);
        comparators.Composite composite61 = compositeSerializer0.fromByteBuffer(byteBuffer57);
        comparators.Composite composite62 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray63 = compositeSerializer0.toBytes(composite62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(composite56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(composite61);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        java.util.stream.Stream<java.lang.Object> objStream32 = composite9.stream();
        composite9.startOffset = 70;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(objStream32);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (short) 1;
        comparators.CompositeType compositeType3 = new comparators.CompositeType();
        comparators.CompositeType compositeType4 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray5 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList6 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList6, byteBufferArray5);
        java.lang.String str8 = compositeType4.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList6);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator9 = compositeType4.indexComparator;
        comparators.CompositeType compositeType10 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray11 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList12 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12, byteBufferArray11);
        java.lang.String str14 = compositeType10.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator15 = compositeType4.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType10);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        int int41 = composite39.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream42 = composite39.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream43 = composite39.parallelStream();
        int int44 = composite39.startOffset;
        int int45 = composite25.compareTo(composite39);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        comparators.Composite composite52 = composite25.addBytes(byteArray50);
        java.nio.ByteBuffer byteBuffer53 = composite52.serializeToByteBuffer();
        compositeType10.validate(byteBuffer53);
        java.lang.String str55 = compositeType3.getString(byteBuffer53);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator56 = compositeType3.indexComparator;
        boolean boolean57 = placeholder0.equals((java.lang.Object) compositeType3);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator58 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator59 = compositeType3.thenComparing(byteBufferComparator58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertNotNull(compositeType4);
        org.junit.Assert.assertNotNull(byteBufferArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(indexInfoComparator9);
        org.junit.Assert.assertNotNull(compositeType10);
        org.junit.Assert.assertNotNull(byteBufferArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteBufferComparator15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(composite52);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(indexInfoComparator56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        comparators.CompositeType compositeType13 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType13.indexComparator;
        comparators.CompositeType compositeType15 = new comparators.CompositeType();
        comparators.CompositeType compositeType16 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray17 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList18 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList18, byteBufferArray17);
        java.lang.String str20 = compositeType16.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList18);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator21 = compositeType16.indexComparator;
        comparators.CompositeType compositeType22 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray23 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList24 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24, byteBufferArray23);
        java.lang.String str26 = compositeType22.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator27 = compositeType16.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType22);
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray32 = new byte[] {};
        int int33 = comparators.Composite.compare(byteArray31, byteArray32);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray32);
        byte[] byteArray35 = comparators.Composite.serialize(objList34);
        java.util.stream.Stream<java.lang.Object> objStream36 = objList34.parallelStream();
        comparators.Composite composite37 = new comparators.Composite(objList34);
        java.lang.Object[] objArray38 = composite37.toArray();
        int int39 = composite37.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream40 = composite37.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream41 = composite37.parallelStream();
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        int int56 = composite51.startOffset;
        int int57 = composite37.compareTo(composite51);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray62 = new byte[] {};
        int int63 = comparators.Composite.compare(byteArray61, byteArray62);
        comparators.Composite composite64 = composite37.addBytes(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = composite64.serializeToByteBuffer();
        compositeType22.validate(byteBuffer65);
        java.lang.String str67 = compositeType15.getString(byteBuffer65);
        java.util.List<java.lang.Object> objList68 = comparators.Composite.deserialize(byteBuffer65);
        compositeType13.validate(byteBuffer65);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = composite9.remove((java.lang.Object) byteBuffer65);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(compositeType16);
        org.junit.Assert.assertNotNull(byteBufferArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(indexInfoComparator21);
        org.junit.Assert.assertNotNull(compositeType22);
        org.junit.Assert.assertNotNull(byteBufferArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteBufferComparator27);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(composite64);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(objList68);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        int int33 = composite28.startOffset;
        composite28.clear();
        boolean boolean35 = composite18.containsAll((java.util.Collection<java.lang.Object>) composite28);
        comparators.Composite composite37 = composite28.addAscii("hi!");
        comparators.hector.CompositeListSerializer compositeListSerializer38 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        byte[] byteArray49 = compositeListSerializer38.toBytes(objList45);
        comparators.CompositeType compositeType50 = new comparators.CompositeType();
        comparators.CompositeType compositeType51 = comparators.CompositeType.instance;
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray56 = new byte[] {};
        int int57 = comparators.Composite.compare(byteArray55, byteArray56);
        java.util.List<java.lang.Object> objList58 = comparators.Composite.deserialize(byteArray56);
        byte[] byteArray59 = comparators.Composite.serialize(objList58);
        java.util.stream.Stream<java.lang.Object> objStream60 = objList58.parallelStream();
        comparators.Composite composite61 = new comparators.Composite(objList58);
        java.lang.Object[] objArray62 = composite61.toArray();
        int int63 = composite61.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream64 = composite61.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream65 = composite61.parallelStream();
        byte[] byteArray69 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray70 = new byte[] {};
        int int71 = comparators.Composite.compare(byteArray69, byteArray70);
        java.util.List<java.lang.Object> objList72 = comparators.Composite.deserialize(byteArray70);
        byte[] byteArray73 = comparators.Composite.serialize(objList72);
        java.util.stream.Stream<java.lang.Object> objStream74 = objList72.parallelStream();
        comparators.Composite composite75 = new comparators.Composite(objList72);
        java.lang.Object[] objArray76 = composite75.toArray();
        int int77 = composite75.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream78 = composite75.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream79 = composite75.parallelStream();
        int int80 = composite75.startOffset;
        int int81 = composite61.compareTo(composite75);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray86 = new byte[] {};
        int int87 = comparators.Composite.compare(byteArray85, byteArray86);
        comparators.Composite composite88 = composite61.addBytes(byteArray86);
        java.nio.ByteBuffer byteBuffer89 = composite88.serializeToByteBuffer();
        compositeType51.validate(byteBuffer89);
        boolean boolean91 = comparators.Composite.validate(byteBuffer89);
        comparators.Composite composite92 = new comparators.Composite(byteBuffer89);
        java.nio.ByteBuffer byteBuffer93 = null;
        int int94 = compositeType50.compare(byteBuffer89, byteBuffer93);
        comparators.Composite composite95 = new comparators.Composite(byteBuffer89);
        java.util.List<java.lang.Object> objList96 = compositeListSerializer38.fromByteBuffer(byteBuffer89);
        boolean boolean97 = composite37.addAll((java.util.Collection<java.lang.Object>) objList96);
        java.util.stream.Stream<java.lang.Object> objStream98 = objList96.stream();
        java.util.stream.Stream<java.lang.Object> objStream99 = objList96.stream();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(compositeType51);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(objList58);
        org.junit.Assert.assertNull(byteArray59);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objList72);
        org.junit.Assert.assertNull(byteArray73);
        org.junit.Assert.assertNotNull(objStream74);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(objStream79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(composite88);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(objList96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(objStream98);
        org.junit.Assert.assertNotNull(objStream99);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        composite9.clear();
        boolean boolean17 = composite9.equals((java.lang.Object) 1L);
        java.util.UUID uUID18 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite19 = composite9.addLexicalUUID(uUID18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray11 = new byte[] {};
        int int12 = comparators.Composite.compare(byteArray10, byteArray11);
        int int13 = comparators.Composite.compare(byteArray4, byteArray11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize((int) (byte) 1, byteArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (short) 1;
        java.lang.String str3 = placeholder0.toString();
        boolean boolean5 = placeholder0.equals((java.lang.Object) 10L);
        placeholder0.type = 58;
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray12 = new byte[] {};
        int int13 = comparators.Composite.compare(byteArray11, byteArray12);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray12);
        byte[] byteArray15 = comparators.Composite.serialize(objList14);
        java.util.stream.Stream<java.lang.Object> objStream16 = objList14.parallelStream();
        comparators.Composite composite17 = new comparators.Composite(objList14);
        java.lang.Object[] objArray18 = composite17.toArray();
        int int19 = composite17.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream20 = composite17.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream21 = composite17.parallelStream();
        int int22 = composite17.startOffset;
        int int23 = composite17.startOffset;
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        boolean boolean42 = comparators.Composite.validate((int) ' ', byteArray39, true);
        boolean boolean43 = composite33.contains((java.lang.Object) boolean42);
        java.util.Spliterator<java.lang.Object> objSpliterator44 = composite33.spliterator();
        boolean boolean45 = composite17.containsAll((java.util.Collection<java.lang.Object>) composite33);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray46 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray47 = composite17.toArray(compositeListSerializerArray46);
        comparators.Composite composite49 = composite17.addLong((long) (short) 100);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        int int60 = composite59.size();
        composite59.clear();
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        java.util.List<java.lang.Object> objList68 = comparators.Composite.deserialize(byteArray66);
        byte[] byteArray69 = comparators.Composite.serialize(objList68);
        java.util.stream.Stream<java.lang.Object> objStream70 = objList68.parallelStream();
        comparators.Composite composite71 = new comparators.Composite(objList68);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        boolean boolean80 = comparators.Composite.validate((int) ' ', byteArray77, true);
        boolean boolean81 = composite71.contains((java.lang.Object) boolean80);
        java.util.stream.Stream<java.lang.Object> objStream82 = composite71.parallelStream();
        composite71.startOffset = 8;
        comparators.Composite composite86 = composite71.addAscii("hi!");
        boolean boolean87 = composite59.containsAll((java.util.Collection<java.lang.Object>) composite71);
        int int88 = composite49.compareTo(composite71);
        java.util.stream.Stream<java.lang.Object> objStream89 = composite71.stream();
        boolean boolean90 = placeholder0.equals((java.lang.Object) objStream89);
        java.lang.String str91 = placeholder0.toString();
        java.lang.String str92 = placeholder0.toString();
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Placeholder(1)" + "'", str3, "Placeholder(1)");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNull(byteArray15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objSpliterator44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray46);
        org.junit.Assert.assertNotNull(compositeListSerializerArray47);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(objList68);
        org.junit.Assert.assertNull(byteArray69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objStream82);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(objStream89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Placeholder(58)" + "'", str91, "Placeholder(58)");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Placeholder(58)" + "'", str92, "Placeholder(58)");
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        java.lang.String str25 = composite9.toString();
        int int26 = composite9.size();
        comparators.Composite composite27 = composite9.addMatchMinimum();
        java.util.Spliterator<java.lang.Object> objSpliterator28 = composite27.spliterator();
        java.util.UUID uUID29 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite30 = composite27.addLexicalUUID(uUID29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(composite27);
        org.junit.Assert.assertNotNull(objSpliterator28);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        comparators.Composite composite0 = null;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        comparators.Composite composite7 = new comparators.Composite(byteArray5);
        comparators.Composite composite8 = new comparators.Composite(byteArray5);
        comparators.Composite composite9 = new comparators.Composite(byteArray5);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        int int25 = comparators.Composite.compare(byteArray16, byteArray23);
        boolean boolean27 = comparators.Composite.validate(0, byteArray23, false);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize((int) (short) 0, byteArray23);
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite.CompositeTypeIterator compositeTypeIterator29 = composite0.new CompositeTypeIterator(composite9, 10, byteArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to comparators.Composite$CompositeTypeIterator with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(objList28);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.type;
        compositeTypeIterator80.type = (short) 100;
        int int86 = compositeTypeIterator80.offset;
        int int87 = compositeTypeIterator80.type;
        byte[] byteArray88 = compositeTypeIterator80.bytes;
        boolean boolean89 = compositeTypeIterator80.hasNext();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 67 + "'", int86 == 67);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 100 + "'", int87 == 100);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        int int33 = composite28.startOffset;
        composite28.clear();
        boolean boolean35 = composite18.containsAll((java.util.Collection<java.lang.Object>) composite28);
        java.lang.String str36 = composite28.toString();
        java.io.DataOutputStream dataOutputStream37 = composite28.out;
        int int38 = composite28.startOffset;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNull(dataOutputStream37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        comparators.CompositeType compositeType19 = comparators.CompositeType.instance;
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        int int48 = composite43.startOffset;
        int int49 = composite29.compareTo(composite43);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        comparators.Composite composite56 = composite29.addBytes(byteArray54);
        java.nio.ByteBuffer byteBuffer57 = composite56.serializeToByteBuffer();
        compositeType19.validate(byteBuffer57);
        boolean boolean59 = comparators.Composite.validate(byteBuffer57);
        boolean boolean60 = comparators.Composite.validate(byteBuffer57);
        comparators.Composite composite61 = compositeSerializer0.fromByteBuffer(byteBuffer57);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        java.util.List<java.lang.Object> objList68 = comparators.Composite.deserialize(byteArray66);
        byte[] byteArray69 = comparators.Composite.serialize(objList68);
        java.util.stream.Stream<java.lang.Object> objStream70 = objList68.parallelStream();
        comparators.Composite composite71 = new comparators.Composite(objList68);
        java.util.RandomAccess[] randomAccessArray72 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray73 = composite71.toArray(randomAccessArray72);
        comparators.Composite composite75 = composite71.addLong((long) 67);
        byte[] byteArray76 = composite75.serialize();
        java.util.List<java.lang.Object> objList77 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite composite78 = new comparators.Composite(byteArray76);
        comparators.Composite composite79 = compositeSerializer0.fromBytes(byteArray76);
        java.nio.ByteBuffer byteBuffer80 = composite79.serializeToByteBuffer();
        boolean boolean81 = comparators.Composite.validate(byteBuffer80);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(composite56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(objList68);
        org.junit.Assert.assertNull(byteArray69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(randomAccessArray72);
        org.junit.Assert.assertNotNull(randomAccessArray73);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList77);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        comparators.Composite composite34 = composite28.addBool(true);
        comparators.Composite composite36 = composite34.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream37 = composite34.byteStream;
        java.nio.ByteBuffer byteBuffer38 = compositeSerializer0.toByteBuffer(composite34);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        java.lang.Object[] objArray49 = composite48.toArray();
        int int50 = composite48.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream51 = composite48.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream52 = composite48.parallelStream();
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        java.util.List<java.lang.Object> objList59 = comparators.Composite.deserialize(byteArray57);
        byte[] byteArray60 = comparators.Composite.serialize(objList59);
        java.util.stream.Stream<java.lang.Object> objStream61 = objList59.parallelStream();
        comparators.Composite composite62 = new comparators.Composite(objList59);
        java.lang.Object[] objArray63 = composite62.toArray();
        int int64 = composite62.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream65 = composite62.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream66 = composite62.parallelStream();
        int int67 = composite62.startOffset;
        int int68 = composite48.compareTo(composite62);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        java.util.List<java.lang.Object> objList75 = comparators.Composite.deserialize(byteArray73);
        byte[] byteArray76 = comparators.Composite.serialize(objList75);
        java.util.stream.Stream<java.lang.Object> objStream77 = objList75.parallelStream();
        comparators.Composite composite78 = new comparators.Composite(objList75);
        java.util.RandomAccess[] randomAccessArray79 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray80 = composite78.toArray(randomAccessArray79);
        comparators.Composite composite82 = composite78.addLong((long) 67);
        byte[] byteArray83 = composite82.serialize();
        java.util.List<java.lang.Object> objList84 = comparators.Composite.deserialize(byteArray83);
        comparators.Composite composite85 = new comparators.Composite(byteArray83);
        boolean boolean86 = composite62.equals((java.lang.Object) byteArray83);
        comparators.Composite composite87 = compositeSerializer0.fromBytes(byteArray83);
        int int88 = composite87.size();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArrayOutputStream37);
        org.junit.Assert.assertEquals(byteArrayOutputStream37.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(objList75);
        org.junit.Assert.assertNull(byteArray76);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(randomAccessArray79);
        org.junit.Assert.assertNotNull(randomAccessArray80);
        org.junit.Assert.assertNotNull(composite82);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(composite87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        comparators.hector.CompositeListSerializer compositeListSerializer1 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        byte[] byteArray12 = compositeListSerializer1.toBytes(objList8);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        byte[] byteArray21 = comparators.Composite.serialize(objList19);
        byte[] byteArray22 = compositeListSerializer1.toBytes(objList19);
        byte[] byteArray23 = null;
        java.util.List<java.lang.Object> objList24 = compositeListSerializer1.fromBytes(byteArray23);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray29 = new byte[] {};
        int int30 = comparators.Composite.compare(byteArray28, byteArray29);
        java.util.List<java.lang.Object> objList31 = comparators.Composite.deserialize(byteArray29);
        byte[] byteArray32 = comparators.Composite.serialize(objList31);
        java.util.stream.Stream<java.lang.Object> objStream33 = objList31.parallelStream();
        comparators.Composite composite34 = new comparators.Composite(objList31);
        java.util.RandomAccess[] randomAccessArray35 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray36 = composite34.toArray(randomAccessArray35);
        comparators.Composite composite38 = composite34.addLong((long) 67);
        byte[] byteArray39 = composite38.serialize();
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray39);
        comparators.Composite composite41 = new comparators.Composite(objList40);
        byte[] byteArray42 = compositeListSerializer1.toBytes(objList40);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = comparators.Composite.validate((-1), byteArray42, true);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(objList31);
        org.junit.Assert.assertNull(byteArray32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(randomAccessArray35);
        org.junit.Assert.assertNotNull(randomAccessArray36);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        byte[] byteArray21 = composite9.bytes;
        int int22 = composite9.size();
        java.util.UUID uUID23 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite24 = composite9.addTimeUUID(uUID23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray11 = new byte[] {};
        int int12 = comparators.Composite.compare(byteArray10, byteArray11);
        int int13 = comparators.Composite.compare(byteArray4, byteArray11);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray11);
        comparators.Composite composite15 = compositeSerializer0.fromBytes(byteArray11);
        int int17 = compositeSerializer0.computeInitialHashSize(1);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.util.RandomAccess[] randomAccessArray28 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray29 = composite27.toArray(randomAccessArray28);
        comparators.Composite composite31 = composite27.addLong((long) 67);
        comparators.Composite composite33 = composite31.addBool(true);
        comparators.Composite composite35 = composite31.addLong((long) 2);
        java.nio.ByteBuffer byteBuffer36 = composite31.serializeToByteBuffer();
        comparators.Composite composite37 = compositeSerializer0.fromByteBuffer(byteBuffer36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteBuffer36);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteBuffer36);
        java.util.stream.Stream<java.lang.Object> objStream40 = objList39.stream();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(randomAccessArray28);
        org.junit.Assert.assertNotNull(randomAccessArray29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNotNull(objStream40);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        composite9.clear();
        boolean boolean17 = composite9.equals((java.lang.Object) 1L);
        byte[] byteArray18 = composite9.bytes;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(byteArray18);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType7.validate(byteBuffer50);
        java.lang.String str52 = compositeType0.getString(byteBuffer50);
        comparators.Composite composite53 = new comparators.Composite(byteBuffer50);
        boolean boolean55 = comparators.Composite.validate(byteBuffer50, false);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        comparators.hector.CompositeListSerializer compositeListSerializer20 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType21 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray22 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList23 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23, byteBufferArray22);
        java.lang.String str25 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator26 = compositeType21.indexComparator;
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray28 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList29 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29, byteBufferArray28);
        java.lang.String str31 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator32 = compositeType21.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType27);
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.lang.String str38 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.List<java.util.List<java.lang.Object>> objListList39 = compositeListSerializer20.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList35);
        comparators.hector.CompositeListSerializer compositeListSerializer40 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray42 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList43 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43, byteBufferArray42);
        java.lang.String str45 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator46 = compositeType41.indexComparator;
        comparators.CompositeType compositeType47 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray48 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList49 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList49, byteBufferArray48);
        java.lang.String str51 = compositeType47.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList49);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator52 = compositeType41.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType47);
        comparators.CompositeType compositeType53 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray54 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList55 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList55, byteBufferArray54);
        java.lang.String str57 = compositeType53.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList55);
        java.lang.String str58 = compositeType47.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList55);
        java.util.List<java.util.List<java.lang.Object>> objListList59 = compositeListSerializer40.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList55);
        int int61 = compositeListSerializer40.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer62 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType63 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray64 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList65 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList65, byteBufferArray64);
        java.lang.String str67 = compositeType63.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList65);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator68 = compositeType63.indexComparator;
        comparators.CompositeType compositeType69 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray70 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList71 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList71, byteBufferArray70);
        java.lang.String str73 = compositeType69.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList71);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator74 = compositeType63.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType69);
        comparators.CompositeType compositeType75 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray76 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList77 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList77, byteBufferArray76);
        java.lang.String str79 = compositeType75.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList77);
        java.lang.String str80 = compositeType69.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList77);
        java.util.List<java.util.List<java.lang.Object>> objListList81 = compositeListSerializer62.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList77);
        java.util.List<java.nio.ByteBuffer> byteBufferList82 = compositeListSerializer40.toBytesList(objListList81);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet83 = compositeListSerializer20.toBytesSet(objListList81);
        java.util.List<java.nio.ByteBuffer> byteBufferList84 = compositeListSerializer0.toBytesList(objListList81);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertNotNull(compositeType21);
        org.junit.Assert.assertNotNull(byteBufferArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(indexInfoComparator26);
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteBufferArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteBufferComparator32);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(objListList39);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteBufferArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(indexInfoComparator46);
        org.junit.Assert.assertNotNull(compositeType47);
        org.junit.Assert.assertNotNull(byteBufferArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteBufferComparator52);
        org.junit.Assert.assertNotNull(compositeType53);
        org.junit.Assert.assertNotNull(byteBufferArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(objListList59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 6 + "'", int61 == 6);
        org.junit.Assert.assertNotNull(compositeType63);
        org.junit.Assert.assertNotNull(byteBufferArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(indexInfoComparator68);
        org.junit.Assert.assertNotNull(compositeType69);
        org.junit.Assert.assertNotNull(byteBufferArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(byteBufferComparator74);
        org.junit.Assert.assertNotNull(compositeType75);
        org.junit.Assert.assertNotNull(byteBufferArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(objListList81);
        org.junit.Assert.assertNotNull(byteBufferList82);
        org.junit.Assert.assertNotNull(byteBufferSet83);
        org.junit.Assert.assertNotNull(byteBufferList84);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        int int13 = composite10.startOffset;
        byte[] byteArray14 = compositeSerializer0.toBytes(composite10);
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        int int41 = composite39.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream42 = composite39.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream43 = composite39.parallelStream();
        int int44 = composite39.startOffset;
        int int45 = composite25.compareTo(composite39);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        comparators.Composite composite52 = composite25.addBytes(byteArray50);
        java.nio.ByteBuffer byteBuffer53 = composite52.serializeToByteBuffer();
        compositeType15.validate(byteBuffer53);
        boolean boolean55 = comparators.Composite.validate(byteBuffer53);
        boolean boolean56 = comparators.Composite.validate(byteBuffer53);
        comparators.Composite composite57 = compositeSerializer0.fromByteBuffer(byteBuffer53);
        comparators.Composite composite58 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray59 = compositeSerializer0.toBytes(composite58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(composite52);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(composite57);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator10 = compositeType0.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator11 = compositeType0.indexComparator;
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        org.apache.cassandra.db.IColumn[] iColumnArray17 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList18 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList18, iColumnArray17);
        java.lang.String str20 = compositeType12.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList18);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator21 = compositeType12.getReverseComparator();
        comparators.CompositeType compositeType22 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray23 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList24 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24, byteBufferArray23);
        java.lang.String str26 = compositeType22.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24);
        org.apache.cassandra.db.IColumn[] iColumnArray27 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList28 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList28, iColumnArray27);
        java.lang.String str30 = compositeType22.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList28);
        java.lang.String str31 = compositeType12.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList28);
        java.lang.String str32 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList28);
        comparators.CompositeType compositeType33 = new comparators.CompositeType();
        comparators.CompositeType compositeType34 = comparators.CompositeType.instance;
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.lang.Object[] objArray45 = composite44.toArray();
        int int46 = composite44.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream47 = composite44.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream48 = composite44.parallelStream();
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteArray53);
        byte[] byteArray56 = comparators.Composite.serialize(objList55);
        java.util.stream.Stream<java.lang.Object> objStream57 = objList55.parallelStream();
        comparators.Composite composite58 = new comparators.Composite(objList55);
        java.lang.Object[] objArray59 = composite58.toArray();
        int int60 = composite58.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream61 = composite58.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream62 = composite58.parallelStream();
        int int63 = composite58.startOffset;
        int int64 = composite44.compareTo(composite58);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        comparators.Composite composite71 = composite44.addBytes(byteArray69);
        java.nio.ByteBuffer byteBuffer72 = composite71.serializeToByteBuffer();
        compositeType34.validate(byteBuffer72);
        boolean boolean74 = comparators.Composite.validate(byteBuffer72);
        comparators.Composite composite75 = new comparators.Composite(byteBuffer72);
        java.nio.ByteBuffer byteBuffer76 = null;
        int int77 = compositeType33.compare(byteBuffer72, byteBuffer76);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator78 = compositeType33.getReverseComparator();
        org.apache.cassandra.db.IColumn[] iColumnArray79 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList80 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList80, iColumnArray79);
        java.lang.String str82 = compositeType33.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList80);
        java.lang.String str83 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList80);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(indexInfoComparator10);
        org.junit.Assert.assertNotNull(indexInfoComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(iColumnArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteBufferComparator21);
        org.junit.Assert.assertNotNull(compositeType22);
        org.junit.Assert.assertNotNull(byteBufferArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(iColumnArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(compositeType34);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(composite71);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(byteBufferComparator78);
        org.junit.Assert.assertNotNull(iColumnArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray11 = new byte[] {};
        int int12 = comparators.Composite.compare(byteArray10, byteArray11);
        int int13 = comparators.Composite.compare(byteArray4, byteArray11);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray11);
        comparators.Composite composite15 = compositeSerializer0.fromBytes(byteArray11);
        composite15.startOffset = (short) -1;
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator34 = compositeType29.indexComparator;
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator40 = compositeType29.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType35);
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray42 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList43 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43, byteBufferArray42);
        java.lang.String str45 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.lang.String str46 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        comparators.CompositeType compositeType47 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray48 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList49 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList49, byteBufferArray48);
        java.lang.String str51 = compositeType47.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList49);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator52 = compositeType47.indexComparator;
        comparators.CompositeType compositeType53 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray54 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList55 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList55, byteBufferArray54);
        java.lang.String str57 = compositeType53.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList55);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator58 = compositeType47.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType53);
        comparators.CompositeType compositeType59 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray60 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList61 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList61, byteBufferArray60);
        java.lang.String str63 = compositeType59.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList61);
        java.lang.String str64 = compositeType53.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList61);
        java.util.AbstractList[] abstractListArray66 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray67 = (java.util.AbstractList<java.nio.ByteBuffer>[]) abstractListArray66;
        byteBufferListArray67[0] = byteBufferList43;
        byteBufferListArray67[1] = byteBufferList61;
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray72 = composite27.toArray(byteBufferListArray67);
        java.util.stream.Stream<java.lang.Object> objStream73 = composite27.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean74 = composite15.remove((java.lang.Object) objStream73);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(indexInfoComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteBufferComparator40);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteBufferArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(compositeType47);
        org.junit.Assert.assertNotNull(byteBufferArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(indexInfoComparator52);
        org.junit.Assert.assertNotNull(compositeType53);
        org.junit.Assert.assertNotNull(byteBufferArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteBufferComparator58);
        org.junit.Assert.assertNotNull(compositeType59);
        org.junit.Assert.assertNotNull(byteBufferArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(abstractListArray66);
        org.junit.Assert.assertNotNull(byteBufferListArray67);
        org.junit.Assert.assertNotNull(byteBufferListArray72);
        org.junit.Assert.assertNotNull(objStream73);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray38 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray39 = composite9.toArray(compositeListSerializerArray38);
        comparators.Composite composite41 = composite9.addLong((long) (short) 100);
        java.util.UUID uUID42 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite43 = composite9.addTimeUUID(uUID42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray38);
        org.junit.Assert.assertNotNull(compositeListSerializerArray39);
        org.junit.Assert.assertNotNull(composite41);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray38 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray39 = composite9.toArray(compositeListSerializerArray38);
        comparators.Composite composite41 = composite9.addLong((long) (short) 100);
        byte[] byteArray42 = composite9.serialize();
        int int43 = composite9.size();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray38);
        org.junit.Assert.assertNotNull(compositeListSerializerArray39);
        org.junit.Assert.assertNotNull(composite41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 100, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        byte[] byteArray20 = comparators.Composite.serialize(objList18);
        byte[] byteArray21 = compositeListSerializer0.toBytes(objList18);
        byte[] byteArray22 = null;
        java.util.List<java.lang.Object> objList23 = compositeListSerializer0.fromBytes(byteArray22);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray29 = new byte[] {};
        int int30 = comparators.Composite.compare(byteArray28, byteArray29);
        java.util.List<java.lang.Object> objList31 = comparators.Composite.deserialize(byteArray29);
        boolean boolean32 = comparators.Composite.validate(0, byteArray29);
        java.util.List<java.lang.Object> objList33 = compositeListSerializer0.fromBytes(byteArray29);
        int int35 = compositeListSerializer0.computeInitialHashSize(15);
        comparators.CompositeType compositeType36 = new comparators.CompositeType();
        comparators.CompositeType compositeType37 = comparators.CompositeType.instance;
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        java.util.List<java.lang.Object> objList44 = comparators.Composite.deserialize(byteArray42);
        byte[] byteArray45 = comparators.Composite.serialize(objList44);
        java.util.stream.Stream<java.lang.Object> objStream46 = objList44.parallelStream();
        comparators.Composite composite47 = new comparators.Composite(objList44);
        java.lang.Object[] objArray48 = composite47.toArray();
        int int49 = composite47.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream50 = composite47.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream51 = composite47.parallelStream();
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray56 = new byte[] {};
        int int57 = comparators.Composite.compare(byteArray55, byteArray56);
        java.util.List<java.lang.Object> objList58 = comparators.Composite.deserialize(byteArray56);
        byte[] byteArray59 = comparators.Composite.serialize(objList58);
        java.util.stream.Stream<java.lang.Object> objStream60 = objList58.parallelStream();
        comparators.Composite composite61 = new comparators.Composite(objList58);
        java.lang.Object[] objArray62 = composite61.toArray();
        int int63 = composite61.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream64 = composite61.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream65 = composite61.parallelStream();
        int int66 = composite61.startOffset;
        int int67 = composite47.compareTo(composite61);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray72 = new byte[] {};
        int int73 = comparators.Composite.compare(byteArray71, byteArray72);
        comparators.Composite composite74 = composite47.addBytes(byteArray72);
        java.nio.ByteBuffer byteBuffer75 = composite74.serializeToByteBuffer();
        compositeType37.validate(byteBuffer75);
        boolean boolean77 = comparators.Composite.validate(byteBuffer75);
        comparators.Composite composite78 = new comparators.Composite(byteBuffer75);
        java.nio.ByteBuffer byteBuffer79 = null;
        int int80 = compositeType36.compare(byteBuffer75, byteBuffer79);
        comparators.Composite composite81 = new comparators.Composite(byteBuffer75);
        comparators.Composite composite82 = new comparators.Composite(byteBuffer75);
        comparators.Composite composite83 = new comparators.Composite(byteBuffer75);
        boolean boolean85 = comparators.Composite.validate(byteBuffer75, true);
        java.util.List<java.lang.Object> objList86 = comparators.Composite.deserialize(byteBuffer75);
        java.nio.ByteBuffer byteBuffer87 = comparators.Composite.serializeToByteBuffer(objList86);
        java.nio.ByteBuffer byteBuffer88 = compositeListSerializer0.toByteBuffer(objList86);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(objList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 21 + "'", int35 == 21);
        org.junit.Assert.assertNotNull(compositeType37);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(objList44);
        org.junit.Assert.assertNull(byteArray45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(objList58);
        org.junit.Assert.assertNull(byteArray59);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(objList86);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(byteBuffer88);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray11 = new byte[] {};
        int int12 = comparators.Composite.compare(byteArray10, byteArray11);
        int int13 = comparators.Composite.compare(byteArray4, byteArray11);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray11);
        comparators.Composite composite15 = compositeSerializer0.fromBytes(byteArray11);
        java.util.Iterator<java.lang.Object> objItor16 = composite15.iterator();
        java.io.DataOutputStream dataOutputStream17 = composite15.out;
        byte[] byteArray18 = null;
        composite15.bytes = byteArray18;
        java.util.UUID uUID20 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite21 = composite15.addTimeUUID(uUID20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNull(dataOutputStream17);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        compositeTypeIterator80.offset = 1;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj84 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        comparators.Composite composite37 = composite9.addLong((long) (short) 1);
        int int38 = composite37.size();
        java.util.UUID uUID39 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite40 = composite37.addLexicalUUID(uUID39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator12 = compositeType0.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType0.indexComparator;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer16 = compositeType0.fromString("US-ASCII");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(indexInfoComparator12);
        org.junit.Assert.assertNotNull(byteBufferComparator13);
        org.junit.Assert.assertNotNull(indexInfoComparator14);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.len = 58;
        byte[] byteArray88 = compositeTypeIterator80.bytes;
        compositeTypeIterator80.offset = 97;
        int int91 = compositeTypeIterator80.start;
        compositeTypeIterator80.offset = 8;
        compositeTypeIterator80.offset = 'a';
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj96 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 67 + "'", int91 == 67);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        int int10 = composite9.size();
        composite9.clear();
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        java.util.stream.Stream<java.lang.Object> objStream20 = objList18.parallelStream();
        comparators.Composite composite21 = new comparators.Composite(objList18);
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        boolean boolean30 = comparators.Composite.validate((int) ' ', byteArray27, true);
        boolean boolean31 = composite21.contains((java.lang.Object) boolean30);
        java.util.stream.Stream<java.lang.Object> objStream32 = composite21.parallelStream();
        composite21.startOffset = 8;
        comparators.Composite composite36 = composite21.addAscii("hi!");
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite21);
        java.util.Collection<java.lang.Object> objCollection38 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean39 = composite21.addAll(objCollection38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        comparators.CompositeType compositeType19 = comparators.CompositeType.instance;
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        int int48 = composite43.startOffset;
        int int49 = composite29.compareTo(composite43);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        comparators.Composite composite56 = composite29.addBytes(byteArray54);
        java.nio.ByteBuffer byteBuffer57 = composite56.serializeToByteBuffer();
        compositeType19.validate(byteBuffer57);
        boolean boolean59 = comparators.Composite.validate(byteBuffer57);
        boolean boolean60 = comparators.Composite.validate(byteBuffer57);
        comparators.Composite composite61 = compositeSerializer0.fromByteBuffer(byteBuffer57);
        int int63 = compositeSerializer0.computeInitialHashSize(8);
        int int65 = compositeSerializer0.computeInitialHashSize(11);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray72 = new byte[] {};
        int int73 = comparators.Composite.compare(byteArray71, byteArray72);
        java.util.List<java.lang.Object> objList74 = comparators.Composite.deserialize(byteArray72);
        boolean boolean75 = comparators.Composite.validate(0, byteArray72);
        boolean boolean76 = comparators.Composite.validate(4, byteArray72);
        comparators.Composite composite77 = compositeSerializer0.fromBytes(byteArray72);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(composite56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 11 + "'", int63 == 11);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 15 + "'", int65 == 15);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(objList74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(composite77);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        byte[] byteArray21 = composite9.bytes;
        comparators.Composite composite23 = composite9.addLong((long) 5);
        composite23.clear();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(composite23);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        byte[] byteArray21 = composite9.bytes;
        comparators.Composite composite23 = composite9.addUTF8("Placeholder(1)");
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.lang.Object[] objArray34 = composite33.toArray();
        int int35 = composite33.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream36 = null;
        composite33.byteStream = byteArrayOutputStream36;
        boolean boolean38 = composite23.containsAll((java.util.Collection<java.lang.Object>) composite33);
        java.util.Iterator<java.lang.Object> objItor39 = composite33.iterator();
        java.util.Spliterator<java.lang.Object> objSpliterator40 = composite33.spliterator();
        java.io.ByteArrayOutputStream byteArrayOutputStream41 = composite33.byteStream;
        java.util.Spliterator<java.lang.Object> objSpliterator42 = composite33.spliterator();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(composite23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objItor39);
        org.junit.Assert.assertNotNull(objSpliterator40);
        org.junit.Assert.assertNull(byteArrayOutputStream41);
        org.junit.Assert.assertNotNull(objSpliterator42);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        java.lang.Object[] objArray36 = composite31.toArray();
        byte[] byteArray37 = comparators.Composite.serialize(objArray36);
        comparators.Composite composite38 = new comparators.Composite(objArray36);
        byte[] byteArray39 = comparators.Composite.serialize(objArray36);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNull(byteArray39);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        java.lang.Class<?> wildcardClass6 = indexInfoComparator5.getClass();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        int int13 = composite10.startOffset;
        byte[] byteArray14 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        comparators.Composite composite30 = composite24.addBool(true);
        java.util.Iterator<java.lang.Object> objItor31 = composite24.iterator();
        comparators.Composite composite33 = composite24.addReal((java.lang.Double) 100.0d);
        comparators.Composite composite35 = composite33.addLong((long) '#');
        byte[] byteArray36 = compositeSerializer0.toBytes(composite35);
        comparators.Composite composite38 = composite35.addReal((java.lang.Double) 1.0d);
        java.lang.Object[] objArray39 = composite38.toArray();
        comparators.Composite composite40 = new comparators.Composite(objArray39);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[67, 77, 80, 1, 2, 1, 0, 4, 64, 89, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 35, 0]");
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[true]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[true]");
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray12 = new byte[] {};
        int int13 = comparators.Composite.compare(byteArray11, byteArray12);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray12);
        byte[] byteArray15 = comparators.Composite.serialize(objList14);
        java.util.stream.Stream<java.lang.Object> objStream16 = objList14.parallelStream();
        comparators.Composite composite17 = new comparators.Composite(objList14);
        java.util.RandomAccess[] randomAccessArray18 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray19 = composite17.toArray(randomAccessArray18);
        comparators.Composite composite21 = composite17.addLong((long) 67);
        byte[] byteArray22 = composite21.serialize();
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray22);
        int int24 = comparators.Composite.compare(byteArray5, byteArray22);
        comparators.hector.CompositeSerializer compositeSerializer25 = new comparators.hector.CompositeSerializer();
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray30);
        byte[] byteArray33 = comparators.Composite.serialize(objList32);
        java.util.stream.Stream<java.lang.Object> objStream34 = objList32.parallelStream();
        comparators.Composite composite35 = new comparators.Composite(objList32);
        java.lang.Object[] objArray36 = composite35.toArray();
        int int37 = composite35.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream38 = composite35.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream39 = composite35.parallelStream();
        comparators.Composite composite41 = composite35.addBool(true);
        java.io.DataOutputStream dataOutputStream42 = composite35.out;
        byte[] byteArray43 = compositeSerializer25.toBytes(composite35);
        int int44 = comparators.Composite.compare(byteArray22, byteArray43);
        boolean boolean46 = comparators.Composite.validate(67, byteArray43, true);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray43);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList47.stream();
        comparators.Composite composite49 = new comparators.Composite(objList47);
        comparators.CompositeType compositeType50 = comparators.CompositeType.instance;
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        java.util.List<java.lang.Object> objList57 = comparators.Composite.deserialize(byteArray55);
        byte[] byteArray58 = comparators.Composite.serialize(objList57);
        java.util.stream.Stream<java.lang.Object> objStream59 = objList57.parallelStream();
        comparators.Composite composite60 = new comparators.Composite(objList57);
        java.lang.Object[] objArray61 = composite60.toArray();
        int int62 = composite60.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream63 = composite60.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream64 = composite60.parallelStream();
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        java.util.List<java.lang.Object> objList71 = comparators.Composite.deserialize(byteArray69);
        byte[] byteArray72 = comparators.Composite.serialize(objList71);
        java.util.stream.Stream<java.lang.Object> objStream73 = objList71.parallelStream();
        comparators.Composite composite74 = new comparators.Composite(objList71);
        java.lang.Object[] objArray75 = composite74.toArray();
        int int76 = composite74.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream77 = composite74.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream78 = composite74.parallelStream();
        int int79 = composite74.startOffset;
        int int80 = composite60.compareTo(composite74);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray85 = new byte[] {};
        int int86 = comparators.Composite.compare(byteArray84, byteArray85);
        comparators.Composite composite87 = composite60.addBytes(byteArray85);
        java.nio.ByteBuffer byteBuffer88 = composite87.serializeToByteBuffer();
        compositeType50.validate(byteBuffer88);
        java.util.List<java.lang.Object> objList90 = comparators.Composite.deserialize(byteBuffer88);
        java.util.List<java.lang.Object> objList91 = comparators.Composite.deserialize(byteBuffer88);
        java.util.stream.Stream<java.lang.Object> objStream92 = objList91.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean93 = composite49.remove((java.lang.Object) objList91);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNull(byteArray15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(randomAccessArray18);
        org.junit.Assert.assertNotNull(randomAccessArray19);
        org.junit.Assert.assertNotNull(composite21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(composite41);
        org.junit.Assert.assertNotNull(dataOutputStream42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(compositeType50);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(objList57);
        org.junit.Assert.assertNull(byteArray58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(objList71);
        org.junit.Assert.assertNull(byteArray72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(composite87);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertNotNull(objList90);
        org.junit.Assert.assertNotNull(objList91);
        org.junit.Assert.assertNotNull(objStream92);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        comparators.Composite composite0 = null;
        comparators.hector.CompositeListSerializer compositeListSerializer1 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType2 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray3 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList4 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList4, byteBufferArray3);
        java.lang.String str6 = compositeType2.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList4);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator7 = compositeType2.indexComparator;
        comparators.CompositeType compositeType8 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray9 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList10 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList10, byteBufferArray9);
        java.lang.String str12 = compositeType8.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList10);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = compositeType2.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType8);
        comparators.CompositeType compositeType14 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray15 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList16 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16, byteBufferArray15);
        java.lang.String str18 = compositeType14.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16);
        java.lang.String str19 = compositeType8.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16);
        java.util.List<java.util.List<java.lang.Object>> objListList20 = compositeListSerializer1.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList16);
        int int22 = compositeListSerializer1.computeInitialHashSize(9);
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        java.util.List<java.lang.Object> objList29 = comparators.Composite.deserialize(byteArray27);
        byte[] byteArray30 = comparators.Composite.serialize(objList29);
        java.util.stream.Stream<java.lang.Object> objStream31 = objList29.parallelStream();
        comparators.Composite composite32 = new comparators.Composite(objList29);
        byte[] byteArray33 = compositeListSerializer1.toBytes(objList29);
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.util.RandomAccess[] randomAccessArray44 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray45 = composite43.toArray(randomAccessArray44);
        comparators.Composite composite47 = composite43.addLong((long) 67);
        byte[] byteArray48 = composite47.serialize();
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray48);
        java.nio.ByteBuffer byteBuffer50 = compositeListSerializer1.toByteBuffer(objList49);
        comparators.Composite composite51 = new comparators.Composite(objList49);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        boolean boolean62 = comparators.Composite.validate((int) ' ', byteArray59, true);
        boolean boolean63 = comparators.Composite.validate(100, byteArray59);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray68 = new byte[] {};
        int int69 = comparators.Composite.compare(byteArray67, byteArray68);
        java.util.List<java.lang.Object> objList70 = comparators.Composite.deserialize(byteArray68);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray75 = new byte[] {};
        int int76 = comparators.Composite.compare(byteArray74, byteArray75);
        java.util.List<java.lang.Object> objList77 = comparators.Composite.deserialize(byteArray75);
        byte[] byteArray78 = comparators.Composite.serialize(objList77);
        java.util.stream.Stream<java.lang.Object> objStream79 = objList77.parallelStream();
        comparators.Composite composite80 = new comparators.Composite(objList77);
        java.util.RandomAccess[] randomAccessArray81 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray82 = composite80.toArray(randomAccessArray81);
        comparators.Composite composite84 = composite80.addLong((long) 67);
        byte[] byteArray85 = composite84.serialize();
        java.util.List<java.lang.Object> objList86 = comparators.Composite.deserialize(byteArray85);
        int int87 = comparators.Composite.compare(byteArray68, byteArray85);
        int int88 = comparators.Composite.compare(byteArray59, byteArray85);
        boolean boolean89 = comparators.Composite.isValidType((java.lang.Object) byteArray59);
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite.CompositeTypeIterator compositeTypeIterator90 = composite0.new CompositeTypeIterator(composite51, (int) (short) 1, byteArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: reflection call to comparators.Composite$CompositeTypeIterator with null for superclass argument");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType2);
        org.junit.Assert.assertNotNull(byteBufferArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(indexInfoComparator7);
        org.junit.Assert.assertNotNull(compositeType8);
        org.junit.Assert.assertNotNull(byteBufferArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteBufferComparator13);
        org.junit.Assert.assertNotNull(compositeType14);
        org.junit.Assert.assertNotNull(byteBufferArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(objListList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 13 + "'", int22 == 13);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(objList29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(randomAccessArray44);
        org.junit.Assert.assertNotNull(randomAccessArray45);
        org.junit.Assert.assertNotNull(composite47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(objList70);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(objList77);
        org.junit.Assert.assertNull(byteArray78);
        org.junit.Assert.assertNotNull(objStream79);
        org.junit.Assert.assertNotNull(randomAccessArray81);
        org.junit.Assert.assertNotNull(randomAccessArray82);
        org.junit.Assert.assertNotNull(composite84);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        boolean boolean10 = comparators.Composite.validate((int) ' ', byteArray7, true);
        boolean boolean11 = comparators.Composite.validate(100, byteArray7);
        java.util.List<java.lang.Object> objList12 = comparators.Composite.deserialize(byteArray7);
        byte[] byteArray16 = null;
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        int int30 = comparators.Composite.compare(byteArray21, byteArray28);
        int int31 = comparators.Composite.compare((int) (byte) 1, byteArray16, 10, byteArray21);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        boolean boolean40 = comparators.Composite.validate(0, byteArray37);
        byte[] byteArray41 = null;
        int int42 = comparators.Composite.compare(byteArray37, byteArray41);
        int int43 = comparators.Composite.compare(byteArray21, byteArray37);
        boolean boolean45 = comparators.Composite.validate((int) (short) 1, byteArray37, true);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = comparators.Composite.compare(134, byteArray7, 255, byteArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objList12);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray8 = new byte[] {};
        int int9 = comparators.Composite.compare(byteArray7, byteArray8);
        boolean boolean11 = comparators.Composite.validate((int) ' ', byteArray8, true);
        boolean boolean12 = comparators.Composite.validate(100, byteArray8);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.util.RandomAccess[] randomAccessArray30 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray31 = composite29.toArray(randomAccessArray30);
        comparators.Composite composite33 = composite29.addLong((long) 67);
        byte[] byteArray34 = composite33.serialize();
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray34);
        int int36 = comparators.Composite.compare(byteArray17, byteArray34);
        int int37 = comparators.Composite.compare(byteArray8, byteArray34);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray45 = new byte[] {};
        int int46 = comparators.Composite.compare(byteArray44, byteArray45);
        boolean boolean48 = comparators.Composite.validate((int) ' ', byteArray45, true);
        boolean boolean49 = comparators.Composite.validate(100, byteArray45);
        int int50 = comparators.Composite.compare((int) (short) 100, byteArray8, 0, byteArray45);
        boolean boolean52 = comparators.Composite.validate(6, byteArray8, true);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(randomAccessArray30);
        org.junit.Assert.assertNotNull(randomAccessArray31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType7.validate(byteBuffer50);
        java.lang.String str52 = compositeType0.getString(byteBuffer50);
        comparators.Composite composite53 = new comparators.Composite(byteBuffer50);
        comparators.CompositeType compositeType54 = comparators.CompositeType.instance;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        java.util.List<java.lang.Object> objList61 = comparators.Composite.deserialize(byteArray59);
        byte[] byteArray62 = comparators.Composite.serialize(objList61);
        java.util.stream.Stream<java.lang.Object> objStream63 = objList61.parallelStream();
        comparators.Composite composite64 = new comparators.Composite(objList61);
        java.lang.Object[] objArray65 = composite64.toArray();
        int int66 = composite64.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream67 = composite64.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream68 = composite64.parallelStream();
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        java.util.List<java.lang.Object> objList75 = comparators.Composite.deserialize(byteArray73);
        byte[] byteArray76 = comparators.Composite.serialize(objList75);
        java.util.stream.Stream<java.lang.Object> objStream77 = objList75.parallelStream();
        comparators.Composite composite78 = new comparators.Composite(objList75);
        java.lang.Object[] objArray79 = composite78.toArray();
        int int80 = composite78.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream81 = composite78.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream82 = composite78.parallelStream();
        int int83 = composite78.startOffset;
        int int84 = composite64.compareTo(composite78);
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray89 = new byte[] {};
        int int90 = comparators.Composite.compare(byteArray88, byteArray89);
        comparators.Composite composite91 = composite64.addBytes(byteArray89);
        java.nio.ByteBuffer byteBuffer92 = composite91.serializeToByteBuffer();
        compositeType54.validate(byteBuffer92);
        java.util.List<java.lang.Object> objList94 = comparators.Composite.deserialize(byteBuffer92);
        java.util.List<java.lang.Object> objList95 = comparators.Composite.deserialize(byteBuffer92);
        comparators.Composite composite96 = new comparators.Composite(objList95);
        java.nio.ByteBuffer byteBuffer97 = comparators.Composite.serializeToByteBuffer(objList95);
        java.nio.ByteBuffer byteBuffer98 = comparators.Composite.serializeToByteBuffer(objList95);
        int int99 = comparators.Composite.compare(byteBuffer50, byteBuffer98);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(compositeType54);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(objList61);
        org.junit.Assert.assertNull(byteArray62);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(objList75);
        org.junit.Assert.assertNull(byteArray76);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(objStream81);
        org.junit.Assert.assertNotNull(objStream82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(composite91);
        org.junit.Assert.assertNotNull(byteBuffer92);
        org.junit.Assert.assertNotNull(objList94);
        org.junit.Assert.assertNotNull(objList95);
        org.junit.Assert.assertNotNull(byteBuffer97);
        org.junit.Assert.assertNotNull(byteBuffer98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        int int81 = compositeTypeIterator80.offset;
        int int82 = compositeTypeIterator80.start;
        int int83 = compositeTypeIterator80.start;
        compositeTypeIterator80.offset = 35;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 67 + "'", int81 == 67);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 67 + "'", int82 == 67);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 67 + "'", int83 == 67);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        java.lang.Object[][][] objArray32 = new java.lang.Object[][][] {};
        java.lang.Object[][][] objArray33 = composite9.toArray(objArray32);
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.util.RandomAccess[] randomAccessArray44 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray45 = composite43.toArray(randomAccessArray44);
        comparators.Composite composite47 = composite43.addLong((long) 67);
        byte[] byteArray48 = composite47.serialize();
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray48);
        comparators.Composite composite50 = composite9.addBytes(byteArray48);
        java.lang.String str51 = composite50.toString();
        comparators.Composite composite53 = composite50.addBool(true);
        comparators.Composite composite55 = composite50.addAscii("Placeholder(100)");
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.util.RandomAccess[] randomAccessArray66 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray67 = composite65.toArray(randomAccessArray66);
        comparators.Composite composite69 = composite65.addLong((long) 67);
        java.util.logging.Logger logger70 = comparators.CompositeType.logger;
        boolean boolean71 = composite69.contains((java.lang.Object) logger70);
        java.nio.ByteBuffer byteBuffer72 = composite69.serializeToByteBuffer();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean73 = composite50.add((java.lang.Object) byteBuffer72);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(randomAccessArray44);
        org.junit.Assert.assertNotNull(randomAccessArray45);
        org.junit.Assert.assertNotNull(composite47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNotNull(composite50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "434d500103000000000000004300" + "'", str51, "434d500103000000000000004300");
        org.junit.Assert.assertNotNull(composite53);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(randomAccessArray66);
        org.junit.Assert.assertNotNull(randomAccessArray67);
        org.junit.Assert.assertNotNull(composite69);
        org.junit.Assert.assertNotNull(logger70);
        org.junit.Assert.assertEquals(logger70.getName(), "comparators.CompositeType");
        org.junit.Assert.assertNull("logger70.getResourceBundleName() == null", logger70.getResourceBundleName());
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(byteBuffer72);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        comparators.Composite.Placeholder placeholder0 = null;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray38 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray39 = composite9.toArray(compositeListSerializerArray38);
        comparators.Composite composite40 = new comparators.Composite((java.lang.Object[]) compositeListSerializerArray39);
        int int41 = composite40.startOffset;
        java.util.UUID uUID42 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite43 = composite40.addTimeUUID(uUID42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray38);
        org.junit.Assert.assertNotNull(compositeListSerializerArray39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        comparators.CompositeType compositeType1 = new comparators.CompositeType();
        comparators.CompositeType compositeType2 = comparators.CompositeType.instance;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        java.util.List<java.lang.Object> objList9 = comparators.Composite.deserialize(byteArray7);
        byte[] byteArray10 = comparators.Composite.serialize(objList9);
        java.util.stream.Stream<java.lang.Object> objStream11 = objList9.parallelStream();
        comparators.Composite composite12 = new comparators.Composite(objList9);
        java.lang.Object[] objArray13 = composite12.toArray();
        int int14 = composite12.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream15 = composite12.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream16 = composite12.parallelStream();
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        int int31 = composite26.startOffset;
        int int32 = composite12.compareTo(composite26);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        comparators.Composite composite39 = composite12.addBytes(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = composite39.serializeToByteBuffer();
        compositeType2.validate(byteBuffer40);
        boolean boolean42 = comparators.Composite.validate(byteBuffer40);
        comparators.Composite composite43 = new comparators.Composite(byteBuffer40);
        java.nio.ByteBuffer byteBuffer44 = null;
        int int45 = compositeType1.compare(byteBuffer40, byteBuffer44);
        compositeType0.validate(byteBuffer40);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer48 = compositeType0.fromString("Placeholder(97)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(compositeType2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.lang.String str17 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite42.startOffset;
        int int48 = composite28.compareTo(composite42);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        comparators.Composite composite55 = composite28.addBytes(byteArray53);
        java.nio.ByteBuffer byteBuffer56 = composite55.serializeToByteBuffer();
        compositeType18.validate(byteBuffer56);
        java.lang.String str58 = compositeType6.getString(byteBuffer56);
        boolean boolean59 = comparators.Composite.validate(byteBuffer56);
        boolean boolean61 = comparators.Composite.validate(byteBuffer56, false);
        comparators.Composite composite62 = new comparators.Composite(byteBuffer56);
        boolean boolean64 = comparators.Composite.validate(byteBuffer56, false);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator1 = compositeType0.indexComparator;
        comparators.CompositeType compositeType2 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator3 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType2);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer5 = compositeType2.fromString("Placeholder(58)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexInfoComparator1);
        org.junit.Assert.assertNotNull(compositeType2);
        org.junit.Assert.assertNotNull(byteBufferComparator3);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        java.lang.Object[][][] objArray32 = new java.lang.Object[][][] {};
        java.lang.Object[][][] objArray33 = composite9.toArray(objArray32);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer34 = comparators.Composite.serializeToByteBuffer((java.lang.Object[]) objArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(objArray33);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray14);
        byte[] byteArray17 = comparators.Composite.serialize(objList16);
        java.util.stream.Stream<java.lang.Object> objStream18 = objList16.parallelStream();
        comparators.Composite composite19 = new comparators.Composite(objList16);
        java.lang.Object[] objArray20 = composite19.toArray();
        int int21 = composite19.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream22 = composite19.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream23 = composite19.parallelStream();
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.lang.Object[] objArray34 = composite33.toArray();
        int int35 = composite33.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream36 = composite33.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream37 = composite33.parallelStream();
        int int38 = composite33.startOffset;
        int int39 = composite19.compareTo(composite33);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        comparators.Composite composite46 = composite19.addBytes(byteArray44);
        byte[] byteArray47 = composite19.bytes;
        byte[] byteArray48 = composite19.serialize();
        // The following exception was thrown during execution in test generation
        try {
            int int49 = comparators.Composite.compare(19, byteArray5, 35, byteArray48);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(composite46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[67, 77, 80, 1, 9, 0, 0, 0]");
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray38 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray39 = composite9.toArray(compositeListSerializerArray38);
        comparators.Composite composite40 = new comparators.Composite((java.lang.Object[]) compositeListSerializerArray39);
        byte[] byteArray41 = comparators.Composite.serialize((java.lang.Object[]) compositeListSerializerArray39);
        byte[] byteArray42 = comparators.Composite.serialize((java.lang.Object[]) compositeListSerializerArray39);
        comparators.Composite composite43 = new comparators.Composite((java.lang.Object[]) compositeListSerializerArray39);
        comparators.Composite composite45 = composite43.addAscii("true");
        comparators.Composite.Placeholder placeholder46 = comparators.Composite.MATCH_MAXIMUM;
        comparators.Composite.Placeholder[] placeholderArray47 = new comparators.Composite.Placeholder[] { placeholder46 };
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite.Placeholder[] placeholderArray48 = composite45.toArray(placeholderArray47);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray38);
        org.junit.Assert.assertNotNull(compositeListSerializerArray39);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(composite45);
        org.junit.Assert.assertNotNull(placeholder46);
        org.junit.Assert.assertNotNull(placeholderArray47);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray36);
        byte[] byteArray39 = comparators.Composite.serialize(objList38);
        java.util.stream.Stream<java.lang.Object> objStream40 = objList38.parallelStream();
        comparators.Composite composite41 = new comparators.Composite(objList38);
        java.util.RandomAccess[] randomAccessArray42 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray43 = composite41.toArray(randomAccessArray42);
        comparators.Composite composite45 = composite41.addLong((long) 67);
        byte[] byteArray46 = composite45.serialize();
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray46);
        comparators.Composite composite48 = new comparators.Composite(byteArray46);
        boolean boolean49 = composite25.equals((java.lang.Object) byteArray46);
        boolean boolean51 = comparators.Composite.validate(1, byteArray46, false);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) 0, (byte) 100, (byte) 1 };
        // The following exception was thrown during execution in test generation
        try {
            int int59 = comparators.Composite.compare((int) (byte) -1, byteArray46, 90, byteArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(randomAccessArray42);
        org.junit.Assert.assertNotNull(randomAccessArray43);
        org.junit.Assert.assertNotNull(composite45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, 0, 100, 1]");
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite12 = new comparators.Composite((java.lang.Object[]) randomAccessArray11);
        java.lang.Object obj13 = null;
        boolean boolean14 = composite12.equals(obj13);
        comparators.hector.CompositeListSerializer compositeListSerializer15 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray26 = compositeListSerializer15.toBytes(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        byte[] byteArray35 = comparators.Composite.serialize(objList33);
        byte[] byteArray36 = compositeListSerializer15.toBytes(objList33);
        byte[] byteArray37 = comparators.Composite.serialize(objList33);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = composite12.remove((java.lang.Object) byteArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNull(byteArray37);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.type;
        int int84 = compositeTypeIterator80.offset;
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 67 + "'", int84 == 67);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        comparators.Composite composite0 = new comparators.Composite();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        int int15 = composite0.compareTo(composite10);
        int int16 = composite0.size();
        byte[] byteArray17 = composite0.serialize();
        java.util.stream.Stream<java.lang.Object> objStream18 = composite0.stream();
        comparators.Composite composite20 = composite0.addUTF8("Placeholder(32)");
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray28 = comparators.Composite.serialize(objList27);
        java.util.stream.Stream<java.lang.Object> objStream29 = objList27.parallelStream();
        comparators.Composite composite30 = new comparators.Composite(objList27);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        boolean boolean39 = comparators.Composite.validate((int) ' ', byteArray36, true);
        boolean boolean40 = composite30.contains((java.lang.Object) boolean39);
        java.util.stream.Stream<java.lang.Object> objStream41 = composite30.parallelStream();
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        comparators.Composite composite57 = composite51.addBool(true);
        java.io.DataOutputStream dataOutputStream58 = composite51.out;
        composite30.out = dataOutputStream58;
        composite0.out = dataOutputStream58;
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(composite20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(composite57);
        org.junit.Assert.assertNotNull(dataOutputStream58);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        comparators.Composite composite37 = composite10.addBytes(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = composite37.serializeToByteBuffer();
        compositeType0.validate(byteBuffer38);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator40 = compositeType0.indexComparator;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer42 = compositeType0.fromString("Placeholder(32)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(indexInfoComparator40);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (short) 1;
        java.lang.String str3 = placeholder0.toString();
        boolean boolean5 = placeholder0.equals((java.lang.Object) 10L);
        int int6 = placeholder0.type;
        java.lang.String str7 = placeholder0.toString();
        java.lang.String str8 = placeholder0.toString();
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Placeholder(1)" + "'", str3, "Placeholder(1)");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Placeholder(1)" + "'", str7, "Placeholder(1)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Placeholder(1)" + "'", str8, "Placeholder(1)");
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray28 = comparators.Composite.serialize(objList27);
        java.util.stream.Stream<java.lang.Object> objStream29 = objList27.parallelStream();
        comparators.Composite composite30 = new comparators.Composite(objList27);
        java.lang.Object[] objArray31 = composite30.toArray();
        comparators.Composite composite32 = new comparators.Composite();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite32.compareTo(composite42);
        comparators.hector.CompositeListSerializer compositeListSerializer48 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray50 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList51 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51, byteBufferArray50);
        java.lang.String str53 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator54 = compositeType49.indexComparator;
        comparators.CompositeType compositeType55 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray56 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList57 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57, byteBufferArray56);
        java.lang.String str59 = compositeType55.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator60 = compositeType49.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType55);
        comparators.CompositeType compositeType61 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray62 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList63 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList63, byteBufferArray62);
        java.lang.String str65 = compositeType61.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList63);
        java.lang.String str66 = compositeType55.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList63);
        java.util.List<java.util.List<java.lang.Object>> objListList67 = compositeListSerializer48.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList63);
        comparators.CompositeType compositeType68 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator69 = compositeType68.indexComparator;
        comparators.CompositeType compositeType70 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator71 = compositeType68.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType70);
        java.lang.Object[] objArray72 = new java.lang.Object[] { compositeListSerializer48, compositeType70 };
        java.lang.Object[][] objArray73 = new java.lang.Object[][] { objArray72 };
        java.lang.Object[][] objArray74 = composite32.toArray(objArray73);
        java.lang.Object[][] objArray75 = composite30.toArray(objArray74);
        boolean boolean76 = composite9.addAll((java.util.Collection<java.lang.Object>) composite30);
        composite9.startOffset = (byte) 10;
        comparators.Composite composite80 = composite9.addAscii("Placeholder(0)");
        java.io.ByteArrayOutputStream byteArrayOutputStream81 = composite80.byteStream;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(indexInfoComparator54);
        org.junit.Assert.assertNotNull(compositeType55);
        org.junit.Assert.assertNotNull(byteBufferArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteBufferComparator60);
        org.junit.Assert.assertNotNull(compositeType61);
        org.junit.Assert.assertNotNull(byteBufferArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(objListList67);
        org.junit.Assert.assertNotNull(indexInfoComparator69);
        org.junit.Assert.assertNotNull(compositeType70);
        org.junit.Assert.assertNotNull(byteBufferComparator71);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(composite80);
        org.junit.Assert.assertNotNull(byteArrayOutputStream81);
// flaky:         org.junit.Assert.assertEquals(byteArrayOutputStream81.toString(), "CMP\001\007\000\016Placeholder(0)\000");
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        comparators.CompositeType compositeType5 = new comparators.CompositeType();
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray11 = new byte[] {};
        int int12 = comparators.Composite.compare(byteArray10, byteArray11);
        java.util.List<java.lang.Object> objList13 = comparators.Composite.deserialize(byteArray11);
        byte[] byteArray14 = comparators.Composite.serialize(objList13);
        java.util.stream.Stream<java.lang.Object> objStream15 = objList13.parallelStream();
        comparators.Composite composite16 = new comparators.Composite(objList13);
        java.lang.Object[] objArray17 = composite16.toArray();
        int int18 = composite16.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream19 = composite16.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream20 = composite16.parallelStream();
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray28 = comparators.Composite.serialize(objList27);
        java.util.stream.Stream<java.lang.Object> objStream29 = objList27.parallelStream();
        comparators.Composite composite30 = new comparators.Composite(objList27);
        java.lang.Object[] objArray31 = composite30.toArray();
        int int32 = composite30.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream33 = composite30.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream34 = composite30.parallelStream();
        int int35 = composite30.startOffset;
        int int36 = composite16.compareTo(composite30);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray41 = new byte[] {};
        int int42 = comparators.Composite.compare(byteArray40, byteArray41);
        comparators.Composite composite43 = composite16.addBytes(byteArray41);
        java.nio.ByteBuffer byteBuffer44 = composite43.serializeToByteBuffer();
        compositeType6.validate(byteBuffer44);
        boolean boolean46 = comparators.Composite.validate(byteBuffer44);
        comparators.Composite composite47 = new comparators.Composite(byteBuffer44);
        java.nio.ByteBuffer byteBuffer48 = null;
        int int49 = compositeType5.compare(byteBuffer44, byteBuffer48);
        comparators.Composite composite50 = new comparators.Composite(byteBuffer44);
        comparators.Composite composite51 = new comparators.Composite(byteBuffer44);
        comparators.Composite composite52 = new comparators.Composite(byteBuffer44);
        boolean boolean54 = comparators.Composite.validate(byteBuffer44, true);
        comparators.CompositeType compositeType55 = comparators.CompositeType.instance;
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray74 = new byte[] {};
        int int75 = comparators.Composite.compare(byteArray73, byteArray74);
        java.util.List<java.lang.Object> objList76 = comparators.Composite.deserialize(byteArray74);
        byte[] byteArray77 = comparators.Composite.serialize(objList76);
        java.util.stream.Stream<java.lang.Object> objStream78 = objList76.parallelStream();
        comparators.Composite composite79 = new comparators.Composite(objList76);
        java.lang.Object[] objArray80 = composite79.toArray();
        int int81 = composite79.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream82 = composite79.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream83 = composite79.parallelStream();
        int int84 = composite79.startOffset;
        int int85 = composite65.compareTo(composite79);
        byte[] byteArray89 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray90 = new byte[] {};
        int int91 = comparators.Composite.compare(byteArray89, byteArray90);
        comparators.Composite composite92 = composite65.addBytes(byteArray90);
        java.nio.ByteBuffer byteBuffer93 = composite92.serializeToByteBuffer();
        compositeType55.validate(byteBuffer93);
        int int95 = compositeType0.compare(byteBuffer44, byteBuffer93);
        boolean boolean96 = comparators.Composite.validate(byteBuffer44);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(objList13);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(objStream19);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(composite43);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(compositeType55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertNull(byteArray77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(objStream82);
        org.junit.Assert.assertNotNull(objStream83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(composite92);
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        boolean boolean10 = comparators.Composite.validate((int) ' ', byteArray7, true);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        boolean boolean20 = comparators.Composite.validate((int) (short) 100, byteArray16, false);
        int int21 = comparators.Composite.compare(byteArray7, byteArray16);
        boolean boolean23 = comparators.Composite.validate((int) '#', byteArray7, true);
        boolean boolean25 = comparators.Composite.validate(0, byteArray7, true);
        byte[] byteArray27 = null;
        byte[] byteArray30 = null;
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        int int44 = comparators.Composite.compare(byteArray35, byteArray42);
        int int45 = comparators.Composite.compare((int) (byte) 1, byteArray30, 10, byteArray35);
        comparators.hector.CompositeSerializer compositeSerializer47 = new comparators.hector.CompositeSerializer();
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        java.util.RandomAccess[] randomAccessArray58 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray59 = composite57.toArray(randomAccessArray58);
        comparators.Composite composite61 = composite57.addLong((long) 67);
        byte[] byteArray62 = composite61.serialize();
        java.util.List<java.lang.Object> objList63 = comparators.Composite.deserialize(byteArray62);
        comparators.Composite composite64 = new comparators.Composite(byteArray62);
        comparators.Composite composite65 = compositeSerializer47.fromBytes(byteArray62);
        java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(0, byteArray62);
        int int67 = comparators.Composite.compare(byteArray30, byteArray62);
        int int68 = comparators.Composite.compare((int) 'a', byteArray27, 5, byteArray62);
        int int69 = comparators.Composite.compare(byteArray7, byteArray27);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(randomAccessArray58);
        org.junit.Assert.assertNotNull(randomAccessArray59);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList63);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertNotNull(objList66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray38 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray39 = composite9.toArray(compositeListSerializerArray38);
        comparators.Composite composite40 = new comparators.Composite((java.lang.Object[]) compositeListSerializerArray39);
        comparators.Composite composite41 = new comparators.Composite((java.lang.Object[]) compositeListSerializerArray39);
        comparators.Composite composite42 = new comparators.Composite((java.lang.Object[]) compositeListSerializerArray39);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray38);
        org.junit.Assert.assertNotNull(compositeListSerializerArray39);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (byte) -1;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        boolean boolean4 = comparators.Composite.isValidType((java.lang.Object) placeholder0);
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        int int6 = placeholder0.type;
        java.lang.String str7 = placeholder0.toString();
        placeholder0.type = 6;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Placeholder(-1)" + "'", str7, "Placeholder(-1)");
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        comparators.hector.CompositeListSerializer compositeListSerializer19 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator25 = compositeType20.indexComparator;
        comparators.CompositeType compositeType26 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray27 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList28 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28, byteBufferArray27);
        java.lang.String str30 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType20.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType26);
        comparators.CompositeType compositeType32 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray33 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList34 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34, byteBufferArray33);
        java.lang.String str36 = compositeType32.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34);
        java.lang.String str37 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34);
        java.util.List<java.util.List<java.lang.Object>> objListList38 = compositeListSerializer19.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList34);
        comparators.hector.CompositeListSerializer compositeListSerializer39 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator45 = compositeType40.indexComparator;
        comparators.CompositeType compositeType46 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray47 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList48 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48, byteBufferArray47);
        java.lang.String str50 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator51 = compositeType40.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType46);
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray53 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList54 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54, byteBufferArray53);
        java.lang.String str56 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        java.lang.String str57 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        java.util.List<java.util.List<java.lang.Object>> objListList58 = compositeListSerializer39.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList54);
        int int60 = compositeListSerializer39.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer61 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType62 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray63 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList64 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64, byteBufferArray63);
        java.lang.String str66 = compositeType62.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator67 = compositeType62.indexComparator;
        comparators.CompositeType compositeType68 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray69 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList70 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList70, byteBufferArray69);
        java.lang.String str72 = compositeType68.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList70);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator73 = compositeType62.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType68);
        comparators.CompositeType compositeType74 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray75 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList76 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList76, byteBufferArray75);
        java.lang.String str78 = compositeType74.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList76);
        java.lang.String str79 = compositeType68.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList76);
        java.util.List<java.util.List<java.lang.Object>> objListList80 = compositeListSerializer61.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList76);
        java.util.List<java.nio.ByteBuffer> byteBufferList81 = compositeListSerializer39.toBytesList(objListList80);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet82 = compositeListSerializer19.toBytesSet(objListList80);
        java.util.List<comparators.Composite> compositeList83 = compositeSerializer0.fromBytesSet(byteBufferSet82);
        int int85 = compositeSerializer0.computeInitialHashSize(100);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexInfoComparator25);
        org.junit.Assert.assertNotNull(compositeType26);
        org.junit.Assert.assertNotNull(byteBufferArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(compositeType32);
        org.junit.Assert.assertNotNull(byteBufferArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(objListList38);
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(indexInfoComparator45);
        org.junit.Assert.assertNotNull(compositeType46);
        org.junit.Assert.assertNotNull(byteBufferArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteBufferComparator51);
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(objListList58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 6 + "'", int60 == 6);
        org.junit.Assert.assertNotNull(compositeType62);
        org.junit.Assert.assertNotNull(byteBufferArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(indexInfoComparator67);
        org.junit.Assert.assertNotNull(compositeType68);
        org.junit.Assert.assertNotNull(byteBufferArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(byteBufferComparator73);
        org.junit.Assert.assertNotNull(compositeType74);
        org.junit.Assert.assertNotNull(byteBufferArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(objListList80);
        org.junit.Assert.assertNotNull(byteBufferList81);
        org.junit.Assert.assertNotNull(byteBufferSet82);
        org.junit.Assert.assertNotNull(compositeList83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 134 + "'", int85 == 134);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        java.lang.Object[] objArray13 = composite9.toArray();
        int int14 = composite9.startOffset;
        composite9.startOffset = (byte) 10;
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.util.RandomAccess[] randomAccessArray34 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray35 = composite33.toArray(randomAccessArray34);
        comparators.Composite composite37 = composite33.addLong((long) 67);
        byte[] byteArray38 = composite37.serialize();
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray38);
        int int40 = comparators.Composite.compare(byteArray21, byteArray38);
        comparators.hector.CompositeSerializer compositeSerializer41 = new comparators.hector.CompositeSerializer();
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        comparators.Composite composite57 = composite51.addBool(true);
        java.io.DataOutputStream dataOutputStream58 = composite51.out;
        byte[] byteArray59 = compositeSerializer41.toBytes(composite51);
        int int60 = comparators.Composite.compare(byteArray38, byteArray59);
        composite9.bytes = byteArray38;
        composite9.clear();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(randomAccessArray34);
        org.junit.Assert.assertNotNull(randomAccessArray35);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(composite57);
        org.junit.Assert.assertNotNull(dataOutputStream58);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        int int56 = composite17.startOffset;
        comparators.Composite composite58 = composite17.addAscii("hi!");
        java.io.DataOutputStream dataOutputStream59 = composite58.out;
        comparators.Composite composite61 = composite58.addLong((long) (short) -1);
        comparators.hector.CompositeSerializer compositeSerializer62 = new comparators.hector.CompositeSerializer();
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray67 = new byte[] {};
        int int68 = comparators.Composite.compare(byteArray66, byteArray67);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        int int75 = comparators.Composite.compare(byteArray66, byteArray73);
        java.util.List<java.lang.Object> objList76 = comparators.Composite.deserialize(byteArray73);
        comparators.Composite composite77 = compositeSerializer62.fromBytes(byteArray73);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray82 = new byte[] {};
        int int83 = comparators.Composite.compare(byteArray81, byteArray82);
        java.util.List<java.lang.Object> objList84 = comparators.Composite.deserialize(byteArray82);
        byte[] byteArray85 = comparators.Composite.serialize(objList84);
        java.util.stream.Stream<java.lang.Object> objStream86 = objList84.parallelStream();
        comparators.Composite composite87 = new comparators.Composite(objList84);
        java.lang.Object[] objArray88 = composite87.toArray();
        int int89 = composite87.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream90 = composite87.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream91 = composite87.parallelStream();
        comparators.Composite composite93 = composite87.addBool(true);
        java.util.Iterator<java.lang.Object> objItor94 = composite87.iterator();
        comparators.Composite composite96 = composite87.addReal((java.lang.Double) 100.0d);
        java.nio.ByteBuffer byteBuffer97 = compositeSerializer62.toByteBuffer(composite96);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = composite58.remove((java.lang.Object) byteBuffer97);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(composite58);
        org.junit.Assert.assertNotNull(dataOutputStream59);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertNotNull(composite77);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(objList84);
        org.junit.Assert.assertNull(byteArray85);
        org.junit.Assert.assertNotNull(objStream86);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(objStream90);
        org.junit.Assert.assertNotNull(objStream91);
        org.junit.Assert.assertNotNull(composite93);
        org.junit.Assert.assertNotNull(objItor94);
        org.junit.Assert.assertNotNull(composite96);
        org.junit.Assert.assertNotNull(byteBuffer97);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType7.validate(byteBuffer50);
        java.lang.String str52 = compositeType0.getString(byteBuffer50);
        comparators.Composite composite53 = new comparators.Composite(byteBuffer50);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray58 = new byte[] {};
        int int59 = comparators.Composite.compare(byteArray57, byteArray58);
        java.util.List<java.lang.Object> objList60 = comparators.Composite.deserialize(byteArray58);
        byte[] byteArray61 = comparators.Composite.serialize(objList60);
        java.util.stream.Stream<java.lang.Object> objStream62 = objList60.parallelStream();
        comparators.Composite composite63 = new comparators.Composite(objList60);
        java.lang.Object[] objArray64 = composite63.toArray();
        int int65 = composite63.startOffset;
        int int66 = composite63.startOffset;
        java.lang.Object[] objArray67 = composite63.toArray();
        comparators.Composite composite69 = composite63.addAscii("");
        int int70 = composite69.size();
        comparators.Composite composite71 = composite69.addMatchMaximum();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = composite53.removeAll((java.util.Collection<java.lang.Object>) composite69);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(objList60);
        org.junit.Assert.assertNull(byteArray61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertNotNull(composite69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(composite71);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator1 = compositeType0.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator2 = compositeType0.reversed();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator3 = byteBufferComparator2.reversed();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator4 = byteBufferComparator3.reversed();
        org.junit.Assert.assertNotNull(indexInfoComparator1);
        org.junit.Assert.assertNotNull(byteBufferComparator2);
        org.junit.Assert.assertNotNull(byteBufferComparator3);
        org.junit.Assert.assertNotNull(byteBufferComparator4);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        byte[] byteArray12 = composite9.bytes;
        java.io.DataOutputStream dataOutputStream13 = null;
        composite9.out = dataOutputStream13;
        java.io.ByteArrayOutputStream byteArrayOutputStream15 = null;
        composite9.byteStream = byteArrayOutputStream15;
        java.util.Iterator<java.lang.Object> objItor17 = composite9.iterator();
        java.util.stream.Stream<java.lang.Object> objStream18 = composite9.stream();
        java.io.ByteArrayOutputStream byteArrayOutputStream19 = composite9.byteStream;
        java.util.Iterator<java.lang.Object> objItor20 = composite9.iterator();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(objItor17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNull(byteArrayOutputStream19);
        org.junit.Assert.assertNotNull(objItor20);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        boolean boolean6 = comparators.Composite.isValidType((java.lang.Object) compositeType0);
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator12 = compositeType7.indexComparator;
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator18 = compositeType7.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType13);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite42.startOffset;
        int int48 = composite28.compareTo(composite42);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        comparators.Composite composite55 = composite28.addBytes(byteArray53);
        java.nio.ByteBuffer byteBuffer56 = composite55.serializeToByteBuffer();
        compositeType13.validate(byteBuffer56);
        comparators.CompositeType compositeType58 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray59 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList60 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60, byteBufferArray59);
        java.lang.String str62 = compositeType58.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60);
        org.apache.cassandra.db.IColumn[] iColumnArray63 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList64 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList64, iColumnArray63);
        java.lang.String str66 = compositeType58.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList64);
        org.apache.cassandra.db.IColumn[] iColumnArray67 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList68 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68, iColumnArray67);
        java.lang.String str70 = compositeType58.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68);
        java.lang.String str71 = compositeType13.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68);
        java.lang.String str72 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator73 = compositeType0.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator74 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator75 = compositeType0.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator76 = compositeType0.indexComparator;
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(indexInfoComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteBufferComparator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(compositeType58);
        org.junit.Assert.assertNotNull(byteBufferArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(iColumnArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(iColumnArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(byteBufferComparator73);
        org.junit.Assert.assertNotNull(byteBufferComparator74);
        org.junit.Assert.assertNotNull(indexInfoComparator75);
        org.junit.Assert.assertNotNull(indexInfoComparator76);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        int int13 = composite10.startOffset;
        byte[] byteArray14 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        comparators.Composite composite30 = composite24.addBool(true);
        java.util.Iterator<java.lang.Object> objItor31 = composite24.iterator();
        comparators.Composite composite33 = composite24.addReal((java.lang.Double) 100.0d);
        comparators.Composite composite35 = composite33.addLong((long) '#');
        byte[] byteArray36 = compositeSerializer0.toBytes(composite35);
        comparators.Composite composite38 = composite35.addReal((java.lang.Double) 1.0d);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        boolean boolean57 = comparators.Composite.validate((int) ' ', byteArray54, true);
        boolean boolean58 = composite48.contains((java.lang.Object) boolean57);
        java.util.Spliterator<java.lang.Object> objSpliterator59 = composite48.spliterator();
        byte[] byteArray60 = composite48.bytes;
        int int61 = composite35.compareTo(composite48);
        java.util.stream.Stream<java.lang.Object> objStream62 = composite35.parallelStream();
        boolean boolean63 = composite35.isEmpty();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[67, 77, 80, 1, 2, 1, 0, 4, 64, 89, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 35, 0]");
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objSpliterator59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        byte[] byteArray2 = null;
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray8 = new byte[] {};
        int int9 = comparators.Composite.compare(byteArray7, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        int int16 = comparators.Composite.compare(byteArray7, byteArray14);
        int int17 = comparators.Composite.compare((int) (byte) 1, byteArray2, 10, byteArray7);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        boolean boolean26 = comparators.Composite.validate(0, byteArray23);
        byte[] byteArray27 = null;
        int int28 = comparators.Composite.compare(byteArray23, byteArray27);
        int int29 = comparators.Composite.compare(byteArray7, byteArray23);
        boolean boolean31 = comparators.Composite.validate((int) '4', byteArray7, false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        comparators.CompositeType compositeType11 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray12 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList13 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13, byteBufferArray12);
        java.lang.String str15 = compositeType11.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator16 = compositeType11.indexComparator;
        comparators.CompositeType compositeType17 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray18 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList19 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19, byteBufferArray18);
        java.lang.String str21 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType11.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType17);
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.lang.String str28 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator34 = compositeType29.indexComparator;
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator40 = compositeType29.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType35);
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray42 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList43 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43, byteBufferArray42);
        java.lang.String str45 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.lang.String str46 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.util.AbstractList[] abstractListArray48 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray49 = (java.util.AbstractList<java.nio.ByteBuffer>[]) abstractListArray48;
        byteBufferListArray49[0] = byteBufferList25;
        byteBufferListArray49[1] = byteBufferList43;
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray54 = composite9.toArray(byteBufferListArray49);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        java.util.List<java.lang.Object> objList61 = comparators.Composite.deserialize(byteArray59);
        boolean boolean62 = composite9.equals((java.lang.Object) objList61);
        java.io.DataOutputStream dataOutputStream63 = composite9.out;
        java.io.DataOutputStream dataOutputStream64 = composite9.out;
        composite9.startOffset = (short) 0;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(compositeType11);
        org.junit.Assert.assertNotNull(byteBufferArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(indexInfoComparator16);
        org.junit.Assert.assertNotNull(compositeType17);
        org.junit.Assert.assertNotNull(byteBufferArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(indexInfoComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteBufferComparator40);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteBufferArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(abstractListArray48);
        org.junit.Assert.assertNotNull(byteBufferListArray49);
        org.junit.Assert.assertNotNull(byteBufferListArray54);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(objList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(dataOutputStream63);
        org.junit.Assert.assertNull(dataOutputStream64);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.type;
        compositeTypeIterator80.type = (short) 100;
        boolean boolean86 = compositeTypeIterator80.hasNext();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        boolean boolean36 = composite9.isEmpty();
        java.util.UUID uUID37 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite38 = composite9.addLexicalUUID(uUID37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        java.lang.String str1 = placeholder0.toString();
        java.lang.String str2 = placeholder0.toString();
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        java.lang.String str4 = placeholder0.toString();
        placeholder0.type = 14;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Placeholder(6)" + "'", str1, "Placeholder(6)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Placeholder(6)" + "'", str2, "Placeholder(6)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Placeholder(6)" + "'", str4, "Placeholder(6)");
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        int int48 = composite43.startOffset;
        int int49 = composite29.compareTo(composite43);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        java.util.RandomAccess[] randomAccessArray60 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray61 = composite59.toArray(randomAccessArray60);
        comparators.Composite composite63 = composite59.addLong((long) 67);
        byte[] byteArray64 = composite63.serialize();
        java.util.List<java.lang.Object> objList65 = comparators.Composite.deserialize(byteArray64);
        comparators.Composite composite66 = new comparators.Composite(byteArray64);
        boolean boolean67 = composite43.equals((java.lang.Object) byteArray64);
        java.util.List<java.lang.Object> objList68 = compositeListSerializer0.fromBytes(byteArray64);
        int int70 = compositeListSerializer0.computeInitialHashSize(43);
        int int72 = compositeListSerializer0.computeInitialHashSize((int) (short) 0);
        int int74 = compositeListSerializer0.computeInitialHashSize(8);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(randomAccessArray60);
        org.junit.Assert.assertNotNull(randomAccessArray61);
        org.junit.Assert.assertNotNull(composite63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objList68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 58 + "'", int70 == 58);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 11 + "'", int74 == 11);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray38 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray39 = composite9.toArray(compositeListSerializerArray38);
        comparators.Composite composite41 = composite9.addLong((long) (short) 100);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        int int52 = composite51.size();
        composite51.clear();
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray58 = new byte[] {};
        int int59 = comparators.Composite.compare(byteArray57, byteArray58);
        java.util.List<java.lang.Object> objList60 = comparators.Composite.deserialize(byteArray58);
        byte[] byteArray61 = comparators.Composite.serialize(objList60);
        java.util.stream.Stream<java.lang.Object> objStream62 = objList60.parallelStream();
        comparators.Composite composite63 = new comparators.Composite(objList60);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        boolean boolean72 = comparators.Composite.validate((int) ' ', byteArray69, true);
        boolean boolean73 = composite63.contains((java.lang.Object) boolean72);
        java.util.stream.Stream<java.lang.Object> objStream74 = composite63.parallelStream();
        composite63.startOffset = 8;
        comparators.Composite composite78 = composite63.addAscii("hi!");
        boolean boolean79 = composite51.containsAll((java.util.Collection<java.lang.Object>) composite63);
        int int80 = composite41.compareTo(composite63);
        java.util.stream.Stream<java.lang.Object> objStream81 = composite63.stream();
        int int82 = composite63.size();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray38);
        org.junit.Assert.assertNotNull(compositeListSerializerArray39);
        org.junit.Assert.assertNotNull(composite41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(objList60);
        org.junit.Assert.assertNull(byteArray61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objStream74);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(objStream81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite25.startOffset;
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray36);
        byte[] byteArray39 = comparators.Composite.serialize(objList38);
        java.util.stream.Stream<java.lang.Object> objStream40 = objList38.parallelStream();
        comparators.Composite composite41 = new comparators.Composite(objList38);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        boolean boolean50 = comparators.Composite.validate((int) ' ', byteArray47, true);
        boolean boolean51 = composite41.contains((java.lang.Object) boolean50);
        java.util.Spliterator<java.lang.Object> objSpliterator52 = composite41.spliterator();
        boolean boolean53 = composite25.containsAll((java.util.Collection<java.lang.Object>) composite41);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray54 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray55 = composite25.toArray(compositeListSerializerArray54);
        comparators.Composite composite57 = composite25.addLong((long) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = composite15.removeAll((java.util.Collection<java.lang.Object>) composite57);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objSpliterator52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray54);
        org.junit.Assert.assertNotNull(compositeListSerializerArray55);
        org.junit.Assert.assertNotNull(composite57);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        byte[] byteArray82 = compositeTypeIterator80.bytes;
        int int83 = compositeTypeIterator80.offset;
        compositeTypeIterator80.len = 0;
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 67 + "'", int83 == 67);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        java.lang.Class<?> wildcardClass9 = objList6.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.lang.String str17 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray19 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList20 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList20, byteBufferArray19);
        java.lang.String str22 = compositeType18.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList20);
        org.apache.cassandra.db.IColumn[] iColumnArray23 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList24 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList24, iColumnArray23);
        java.lang.String str26 = compositeType18.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList24);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator27 = compositeType18.getReverseComparator();
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray29 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList30 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30, byteBufferArray29);
        java.lang.String str32 = compositeType28.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30);
        org.apache.cassandra.db.IColumn[] iColumnArray33 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList34 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList34, iColumnArray33);
        java.lang.String str36 = compositeType28.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList34);
        java.lang.String str37 = compositeType18.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList34);
        comparators.hector.CompositeListSerializer compositeListSerializer38 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType39 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray40 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList41 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41, byteBufferArray40);
        java.lang.String str43 = compositeType39.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator44 = compositeType39.indexComparator;
        comparators.CompositeType compositeType45 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray46 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList47 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47, byteBufferArray46);
        java.lang.String str49 = compositeType45.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator50 = compositeType39.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType45);
        comparators.CompositeType compositeType51 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray52 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList53 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53, byteBufferArray52);
        java.lang.String str55 = compositeType51.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53);
        java.lang.String str56 = compositeType45.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53);
        java.util.List<java.util.List<java.lang.Object>> objListList57 = compositeListSerializer38.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList53);
        java.lang.String str58 = compositeType18.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53);
        java.lang.String str59 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator60 = compositeType6.indexComparator;
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteBufferArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(iColumnArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteBufferComparator27);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteBufferArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(iColumnArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(compositeType39);
        org.junit.Assert.assertNotNull(byteBufferArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(indexInfoComparator44);
        org.junit.Assert.assertNotNull(compositeType45);
        org.junit.Assert.assertNotNull(byteBufferArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteBufferComparator50);
        org.junit.Assert.assertNotNull(compositeType51);
        org.junit.Assert.assertNotNull(byteBufferArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(objListList57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(indexInfoComparator60);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        comparators.CompositeType compositeType9 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray10 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList11 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11, byteBufferArray10);
        java.lang.String str13 = compositeType9.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType9.indexComparator;
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator20 = compositeType9.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType15);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator21 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType0.getReverseComparator();
        java.lang.Class<?> wildcardClass23 = byteBufferComparator22.getClass();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(compositeType9);
        org.junit.Assert.assertNotNull(byteBufferArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteBufferComparator20);
        org.junit.Assert.assertNotNull(byteBufferComparator21);
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        comparators.hector.CompositeSerializer compositeSerializer30 = new comparators.hector.CompositeSerializer();
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        java.util.List<java.lang.Object> objList37 = comparators.Composite.deserialize(byteArray35);
        byte[] byteArray38 = comparators.Composite.serialize(objList37);
        java.util.stream.Stream<java.lang.Object> objStream39 = objList37.parallelStream();
        comparators.Composite composite40 = new comparators.Composite(objList37);
        java.lang.Object[] objArray41 = composite40.toArray();
        int int42 = composite40.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream43 = composite40.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream44 = composite40.parallelStream();
        comparators.Composite composite46 = composite40.addBool(true);
        java.io.DataOutputStream dataOutputStream47 = composite40.out;
        byte[] byteArray48 = compositeSerializer30.toBytes(composite40);
        byte[] byteArray51 = null;
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        int int65 = comparators.Composite.compare(byteArray56, byteArray63);
        int int66 = comparators.Composite.compare((int) (byte) 1, byteArray51, 10, byteArray56);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray71 = new byte[] {};
        int int72 = comparators.Composite.compare(byteArray70, byteArray71);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        int int79 = comparators.Composite.compare(byteArray70, byteArray77);
        java.util.List<java.lang.Object> objList80 = comparators.Composite.deserialize(byteArray77);
        int int81 = comparators.Composite.compare(byteArray56, byteArray77);
        java.util.List<java.lang.Object> objList82 = comparators.Composite.deserialize(byteArray77);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator83 = composite23.new CompositeTypeIterator(composite40, 5, byteArray77);
        byte[] byteArray84 = compositeTypeIterator83.bytes;
        byte[] byteArray89 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray90 = new byte[] {};
        int int91 = comparators.Composite.compare(byteArray89, byteArray90);
        boolean boolean93 = comparators.Composite.validate((int) ' ', byteArray90, true);
        int int94 = comparators.Composite.compare(byteArray84, byteArray90);
        comparators.Composite composite95 = new comparators.Composite(byteArray90);
        java.util.Collection<java.lang.Object> objCollection96 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean97 = composite95.removeAll(objCollection96);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(objList37);
        org.junit.Assert.assertNull(byteArray38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(composite46);
        org.junit.Assert.assertNotNull(dataOutputStream47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(objList80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(objList82);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        int int33 = composite28.startOffset;
        composite28.clear();
        boolean boolean35 = composite18.containsAll((java.util.Collection<java.lang.Object>) composite28);
        comparators.Composite composite37 = composite28.addAscii("hi!");
        comparators.hector.CompositeListSerializer compositeListSerializer38 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        byte[] byteArray49 = compositeListSerializer38.toBytes(objList45);
        comparators.CompositeType compositeType50 = new comparators.CompositeType();
        comparators.CompositeType compositeType51 = comparators.CompositeType.instance;
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray56 = new byte[] {};
        int int57 = comparators.Composite.compare(byteArray55, byteArray56);
        java.util.List<java.lang.Object> objList58 = comparators.Composite.deserialize(byteArray56);
        byte[] byteArray59 = comparators.Composite.serialize(objList58);
        java.util.stream.Stream<java.lang.Object> objStream60 = objList58.parallelStream();
        comparators.Composite composite61 = new comparators.Composite(objList58);
        java.lang.Object[] objArray62 = composite61.toArray();
        int int63 = composite61.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream64 = composite61.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream65 = composite61.parallelStream();
        byte[] byteArray69 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray70 = new byte[] {};
        int int71 = comparators.Composite.compare(byteArray69, byteArray70);
        java.util.List<java.lang.Object> objList72 = comparators.Composite.deserialize(byteArray70);
        byte[] byteArray73 = comparators.Composite.serialize(objList72);
        java.util.stream.Stream<java.lang.Object> objStream74 = objList72.parallelStream();
        comparators.Composite composite75 = new comparators.Composite(objList72);
        java.lang.Object[] objArray76 = composite75.toArray();
        int int77 = composite75.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream78 = composite75.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream79 = composite75.parallelStream();
        int int80 = composite75.startOffset;
        int int81 = composite61.compareTo(composite75);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray86 = new byte[] {};
        int int87 = comparators.Composite.compare(byteArray85, byteArray86);
        comparators.Composite composite88 = composite61.addBytes(byteArray86);
        java.nio.ByteBuffer byteBuffer89 = composite88.serializeToByteBuffer();
        compositeType51.validate(byteBuffer89);
        boolean boolean91 = comparators.Composite.validate(byteBuffer89);
        comparators.Composite composite92 = new comparators.Composite(byteBuffer89);
        java.nio.ByteBuffer byteBuffer93 = null;
        int int94 = compositeType50.compare(byteBuffer89, byteBuffer93);
        comparators.Composite composite95 = new comparators.Composite(byteBuffer89);
        java.util.List<java.lang.Object> objList96 = compositeListSerializer38.fromByteBuffer(byteBuffer89);
        boolean boolean97 = composite37.addAll((java.util.Collection<java.lang.Object>) objList96);
        byte[] byteArray98 = comparators.Composite.serialize(objList96);
        java.nio.ByteBuffer byteBuffer99 = comparators.Composite.serializeToByteBuffer(objList96);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(compositeType51);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(objList58);
        org.junit.Assert.assertNull(byteArray59);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objList72);
        org.junit.Assert.assertNull(byteArray73);
        org.junit.Assert.assertNotNull(objStream74);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(objStream79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(composite88);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(objList96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(byteArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray98), "[67, 77, 80, 1, 9, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteBuffer99);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer22 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator28 = compositeType23.indexComparator;
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator34 = compositeType23.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.lang.String str40 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.List<java.util.List<java.lang.Object>> objListList41 = compositeListSerializer22.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList37);
        comparators.hector.CompositeListSerializer compositeListSerializer42 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray44 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList45 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45, byteBufferArray44);
        java.lang.String str47 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator48 = compositeType43.indexComparator;
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray50 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList51 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51, byteBufferArray50);
        java.lang.String str53 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator54 = compositeType43.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType49);
        comparators.CompositeType compositeType55 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray56 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList57 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57, byteBufferArray56);
        java.lang.String str59 = compositeType55.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        java.lang.String str60 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        java.util.List<java.util.List<java.lang.Object>> objListList61 = compositeListSerializer42.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList57);
        int int63 = compositeListSerializer42.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer64 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType65 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray66 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList67 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList67, byteBufferArray66);
        java.lang.String str69 = compositeType65.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList67);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator70 = compositeType65.indexComparator;
        comparators.CompositeType compositeType71 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray72 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList73 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList73, byteBufferArray72);
        java.lang.String str75 = compositeType71.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList73);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator76 = compositeType65.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType71);
        comparators.CompositeType compositeType77 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray78 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList79 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList79, byteBufferArray78);
        java.lang.String str81 = compositeType77.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList79);
        java.lang.String str82 = compositeType71.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList79);
        java.util.List<java.util.List<java.lang.Object>> objListList83 = compositeListSerializer64.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList79);
        java.util.List<java.nio.ByteBuffer> byteBufferList84 = compositeListSerializer42.toBytesList(objListList83);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet85 = compositeListSerializer22.toBytesSet(objListList83);
        java.util.List<java.util.List<java.lang.Object>> objListList86 = compositeListSerializer0.fromBytesSet(byteBufferSet85);
        comparators.CompositeType compositeType87 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray88 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList89 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList89, byteBufferArray88);
        java.lang.String str91 = compositeType87.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList89);
        java.util.List<java.util.List<java.lang.Object>> objListList92 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList89);
        int int94 = compositeListSerializer0.computeInitialHashSize(67);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(indexInfoComparator28);
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteBufferComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(objListList41);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(byteBufferArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(indexInfoComparator48);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteBufferComparator54);
        org.junit.Assert.assertNotNull(compositeType55);
        org.junit.Assert.assertNotNull(byteBufferArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(objListList61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(compositeType65);
        org.junit.Assert.assertNotNull(byteBufferArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(indexInfoComparator70);
        org.junit.Assert.assertNotNull(compositeType71);
        org.junit.Assert.assertNotNull(byteBufferArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(byteBufferComparator76);
        org.junit.Assert.assertNotNull(compositeType77);
        org.junit.Assert.assertNotNull(byteBufferArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(objListList83);
        org.junit.Assert.assertNotNull(byteBufferList84);
        org.junit.Assert.assertNotNull(byteBufferSet85);
        org.junit.Assert.assertNotNull(objListList86);
        org.junit.Assert.assertNotNull(compositeType87);
        org.junit.Assert.assertNotNull(byteBufferArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(objListList92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 90 + "'", int94 == 90);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        byte[] byteArray32 = composite23.bytes;
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        int int45 = composite42.startOffset;
        byte[] byteArray47 = null;
        comparators.Composite.CompositeTypeIterator compositeTypeIterator48 = composite23.new CompositeTypeIterator(composite42, 341, byteArray47);
        byte[] byteArray49 = compositeTypeIterator48.bytes;
        byte[] byteArray50 = compositeTypeIterator48.bytes;
        int int51 = compositeTypeIterator48.start;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 341 + "'", int51 == 341);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        byte[] byteArray21 = composite9.bytes;
        comparators.Composite composite23 = composite9.addUTF8("Placeholder(1)");
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.lang.Object[] objArray34 = composite33.toArray();
        int int35 = composite33.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream36 = null;
        composite33.byteStream = byteArrayOutputStream36;
        boolean boolean38 = composite23.containsAll((java.util.Collection<java.lang.Object>) composite33);
        java.util.Iterator<java.lang.Object> objItor39 = composite33.iterator();
        java.util.Spliterator<java.lang.Object> objSpliterator40 = composite33.spliterator();
        java.io.ByteArrayOutputStream byteArrayOutputStream41 = composite33.byteStream;
        java.util.UUID uUID42 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite43 = composite33.addLexicalUUID(uUID42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(composite23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objItor39);
        org.junit.Assert.assertNotNull(objSpliterator40);
        org.junit.Assert.assertNull(byteArrayOutputStream41);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        int int56 = composite17.startOffset;
        java.lang.String str57 = composite17.toString();
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray62 = new byte[] {};
        int int63 = comparators.Composite.compare(byteArray61, byteArray62);
        java.util.List<java.lang.Object> objList64 = comparators.Composite.deserialize(byteArray62);
        byte[] byteArray65 = comparators.Composite.serialize(objList64);
        java.util.stream.Stream<java.lang.Object> objStream66 = objList64.parallelStream();
        comparators.Composite composite67 = new comparators.Composite(objList64);
        java.lang.Object[] objArray68 = composite67.toArray();
        int int69 = composite67.startOffset;
        byte[] byteArray70 = composite67.bytes;
        java.io.DataOutputStream dataOutputStream71 = null;
        composite67.out = dataOutputStream71;
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray83 = new byte[] {};
        int int84 = comparators.Composite.compare(byteArray82, byteArray83);
        int int85 = comparators.Composite.compare(byteArray76, byteArray83);
        boolean boolean86 = comparators.Composite.isValidType((java.lang.Object) byteArray76);
        comparators.Composite composite87 = composite67.addBytes(byteArray76);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = composite17.removeAll((java.util.Collection<java.lang.Object>) composite67);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(objList64);
        org.junit.Assert.assertNull(byteArray65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNull(byteArray70);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(composite87);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        comparators.hector.CompositeListSerializer compositeListSerializer20 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType21 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray22 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList23 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23, byteBufferArray22);
        java.lang.String str25 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator26 = compositeType21.indexComparator;
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray28 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList29 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29, byteBufferArray28);
        java.lang.String str31 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator32 = compositeType21.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType27);
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.lang.String str38 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.List<java.util.List<java.lang.Object>> objListList39 = compositeListSerializer20.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList35);
        int int41 = compositeListSerializer20.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer42 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray44 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList45 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45, byteBufferArray44);
        java.lang.String str47 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator48 = compositeType43.indexComparator;
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray50 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList51 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51, byteBufferArray50);
        java.lang.String str53 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator54 = compositeType43.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType49);
        comparators.CompositeType compositeType55 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray56 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList57 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57, byteBufferArray56);
        java.lang.String str59 = compositeType55.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        java.lang.String str60 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        java.util.List<java.util.List<java.lang.Object>> objListList61 = compositeListSerializer42.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList57);
        java.util.List<java.nio.ByteBuffer> byteBufferList62 = compositeListSerializer20.toBytesList(objListList61);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet63 = compositeListSerializer0.toBytesSet(objListList61);
        comparators.hector.CompositeListSerializer compositeListSerializer64 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        java.util.List<java.lang.Object> objList71 = comparators.Composite.deserialize(byteArray69);
        byte[] byteArray72 = comparators.Composite.serialize(objList71);
        java.util.stream.Stream<java.lang.Object> objStream73 = objList71.parallelStream();
        comparators.Composite composite74 = new comparators.Composite(objList71);
        byte[] byteArray75 = compositeListSerializer64.toBytes(objList71);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        java.util.List<java.lang.Object> objList82 = comparators.Composite.deserialize(byteArray80);
        byte[] byteArray83 = comparators.Composite.serialize(objList82);
        byte[] byteArray84 = comparators.Composite.serialize(objList82);
        byte[] byteArray85 = compositeListSerializer64.toBytes(objList82);
        byte[] byteArray86 = compositeListSerializer0.toBytes(objList82);
        int int88 = compositeListSerializer0.computeInitialHashSize(103);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertNotNull(compositeType21);
        org.junit.Assert.assertNotNull(byteBufferArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(indexInfoComparator26);
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteBufferArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteBufferComparator32);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(objListList39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(byteBufferArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(indexInfoComparator48);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteBufferComparator54);
        org.junit.Assert.assertNotNull(compositeType55);
        org.junit.Assert.assertNotNull(byteBufferArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(objListList61);
        org.junit.Assert.assertNotNull(byteBufferList62);
        org.junit.Assert.assertNotNull(byteBufferSet63);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(objList71);
        org.junit.Assert.assertNull(byteArray72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertNull(byteArray75);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(objList82);
        org.junit.Assert.assertNull(byteArray83);
        org.junit.Assert.assertNull(byteArray84);
        org.junit.Assert.assertNull(byteArray85);
        org.junit.Assert.assertNull(byteArray86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 138 + "'", int88 == 138);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        java.lang.Object[] objArray13 = composite9.toArray();
        java.util.Spliterator<java.lang.Object> objSpliterator14 = composite9.spliterator();
        comparators.Composite composite16 = composite9.addBool(false);
        composite16.startOffset = 2;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objSpliterator14);
        org.junit.Assert.assertNotNull(composite16);
    }
}
