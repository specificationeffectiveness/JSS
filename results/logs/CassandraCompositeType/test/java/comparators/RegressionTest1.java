package comparators;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        comparators.Composite composite37 = composite10.addBytes(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = composite37.serializeToByteBuffer();
        compositeType0.validate(byteBuffer38);
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator45 = compositeType40.indexComparator;
        boolean boolean46 = comparators.Composite.isValidType((java.lang.Object) compositeType40);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator47 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType40);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer49 = compositeType40.fromString("Placeholder(77)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(indexInfoComparator45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteBufferComparator47);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        java.util.stream.Stream<java.lang.Object> objStream36 = composite9.stream();
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray41 = new byte[] {};
        int int42 = comparators.Composite.compare(byteArray40, byteArray41);
        java.util.List<java.lang.Object> objList43 = comparators.Composite.deserialize(byteArray41);
        byte[] byteArray44 = comparators.Composite.serialize(objList43);
        java.util.stream.Stream<java.lang.Object> objStream45 = objList43.parallelStream();
        comparators.Composite composite46 = new comparators.Composite(objList43);
        java.util.RandomAccess[] randomAccessArray47 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray48 = composite46.toArray(randomAccessArray47);
        comparators.Composite composite50 = composite46.addLong((long) 67);
        byte[] byteArray51 = composite50.serialize();
        comparators.Composite composite53 = composite50.addAscii("Placeholder(58)");
        boolean boolean54 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite50);
        comparators.Composite.Placeholder placeholder55 = comparators.Composite.MATCH_MAXIMUM;
        int int56 = placeholder55.type;
        placeholder55.type = 6;
        placeholder55.type = 90;
        boolean boolean61 = composite9.add((java.lang.Object) 90);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(objList43);
        org.junit.Assert.assertNull(byteArray44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(randomAccessArray47);
        org.junit.Assert.assertNotNull(randomAccessArray48);
        org.junit.Assert.assertNotNull(composite50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(composite53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(placeholder55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 6 + "'", int56 == 6);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        comparators.Composite composite0 = new comparators.Composite();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        int int15 = composite0.compareTo(composite10);
        java.io.DataOutputStream dataOutputStream16 = composite10.out;
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.util.RandomAccess[] randomAccessArray27 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray28 = composite26.toArray(randomAccessArray27);
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.stream();
        byte[] byteArray30 = composite26.bytes;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean31 = composite10.removeAll((java.util.Collection<java.lang.Object>) composite26);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(dataOutputStream16);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(randomAccessArray27);
        org.junit.Assert.assertNotNull(randomAccessArray28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNull(byteArray30);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        comparators.CompositeType compositeType10 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray11 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList12 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12, byteBufferArray11);
        java.lang.String str14 = compositeType10.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12);
        org.apache.cassandra.db.IColumn[] iColumnArray15 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList16 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16, iColumnArray15);
        java.lang.String str18 = compositeType10.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        java.lang.String str19 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator25 = compositeType20.indexComparator;
        comparators.CompositeType compositeType26 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray27 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList28 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28, byteBufferArray27);
        java.lang.String str30 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType20.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType26);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator32 = compositeType0.thenComparing(byteBufferComparator31);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator33 = compositeType0.indexComparator;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer35 = compositeType0.fromString("Placeholder(95)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(compositeType10);
        org.junit.Assert.assertNotNull(byteBufferArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(iColumnArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexInfoComparator25);
        org.junit.Assert.assertNotNull(compositeType26);
        org.junit.Assert.assertNotNull(byteBufferArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(byteBufferComparator32);
        org.junit.Assert.assertNotNull(indexInfoComparator33);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<comparators.Composite> compositeList20 = compositeSerializer0.fromBytesSet(byteBufferSet19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray19 = composite10.serialize();
        boolean boolean20 = comparators.Composite.isValidType((java.lang.Object) composite10);
        byte[] byteArray21 = composite10.bytes;
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        boolean boolean30 = comparators.Composite.validate((int) ' ', byteArray27, true);
        comparators.Composite composite31 = composite10.addBytes(byteArray27);
        composite10.startOffset = 138;
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(composite31);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.type;
        comparators.Composite composite84 = compositeTypeIterator80.collection;
        java.util.UUID uUID85 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite86 = composite84.addLexicalUUID(uUID85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(composite84);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        boolean boolean32 = comparators.Composite.isValidType((java.lang.Object) composite23);
        byte[] byteArray34 = null;
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        int int48 = comparators.Composite.compare(byteArray39, byteArray46);
        int int49 = comparators.Composite.compare((int) (byte) 1, byteArray34, 10, byteArray39);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        java.util.List<java.lang.Object> objList57 = comparators.Composite.deserialize(byteArray55);
        boolean boolean58 = comparators.Composite.validate(0, byteArray55);
        byte[] byteArray59 = null;
        int int60 = comparators.Composite.compare(byteArray55, byteArray59);
        int int61 = comparators.Composite.compare(byteArray39, byteArray55);
        comparators.Composite composite62 = composite23.addBytes(byteArray39);
        java.util.UUID uUID63 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite64 = composite23.addTimeUUID(uUID63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(objList57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(composite62);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        composite9.clear();
        boolean boolean17 = composite9.equals((java.lang.Object) 1L);
        comparators.Composite composite19 = composite9.addLong(0L);
        comparators.Composite composite21 = composite19.addUTF8("Placeholder(6)");
        java.lang.Object[][][][] objArray22 = new java.lang.Object[][][][] {};
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object[][][][] objArray23 = composite21.toArray(objArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(composite19);
        org.junit.Assert.assertNotNull(composite21);
        org.junit.Assert.assertNotNull(objArray22);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        boolean boolean8 = comparators.Composite.validate(0, byteArray5);
        byte[] byteArray9 = null;
        int int10 = comparators.Composite.compare(byteArray5, byteArray9);
        comparators.Composite composite11 = new comparators.Composite(byteArray9);
        byte[] byteArray13 = null;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        boolean boolean23 = comparators.Composite.validate((int) ' ', byteArray20, true);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray29 = new byte[] {};
        int int30 = comparators.Composite.compare(byteArray28, byteArray29);
        java.util.List<java.lang.Object> objList31 = comparators.Composite.deserialize(byteArray29);
        boolean boolean33 = comparators.Composite.validate((int) (short) 100, byteArray29, false);
        int int34 = comparators.Composite.compare(byteArray20, byteArray29);
        int int35 = comparators.Composite.compare((int) (short) 1, byteArray13, (int) (byte) 10, byteArray29);
        comparators.Composite composite36 = composite11.addBytes(byteArray29);
        comparators.Composite composite37 = new comparators.Composite(byteArray29);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(objList31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(composite36);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite65.startOffset;
        int int72 = composite17.compareTo(composite65);
        comparators.Composite composite74 = composite17.addLong((long) 80);
        comparators.Composite composite76 = composite17.addLong((long) 6);
        java.util.Iterator<java.lang.Object> objItor77 = composite17.iterator();
        comparators.Composite composite78 = composite17.addMatchMaximum();
        comparators.Composite composite80 = composite78.addUTF8("true");
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray87 = new byte[] {};
        int int88 = comparators.Composite.compare(byteArray86, byteArray87);
        byte[] byteArray92 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray93 = new byte[] {};
        int int94 = comparators.Composite.compare(byteArray92, byteArray93);
        int int95 = comparators.Composite.compare(byteArray86, byteArray93);
        boolean boolean97 = comparators.Composite.validate(0, byteArray93, false);
        java.util.List<java.lang.Object> objList98 = comparators.Composite.deserialize((int) (short) 0, byteArray93);
        composite78.bytes = byteArray93;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(composite76);
        org.junit.Assert.assertNotNull(objItor77);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(composite80);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(objList98);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        boolean boolean7 = comparators.Composite.isValidType((java.lang.Object) compositeType1);
        comparators.CompositeType compositeType8 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator9 = compositeType8.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator10 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType8);
        comparators.CompositeType compositeType11 = new comparators.CompositeType();
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType12.validate(byteBuffer50);
        boolean boolean52 = comparators.Composite.validate(byteBuffer50);
        comparators.Composite composite53 = new comparators.Composite(byteBuffer50);
        java.nio.ByteBuffer byteBuffer54 = null;
        int int55 = compositeType11.compare(byteBuffer50, byteBuffer54);
        comparators.Composite composite56 = new comparators.Composite(byteBuffer50);
        comparators.Composite composite57 = new comparators.Composite(byteBuffer50);
        java.lang.String str58 = compositeType1.getString(byteBuffer50);
        compositeType0.validate(byteBuffer50);
        java.util.List<java.lang.Object> objList60 = comparators.Composite.deserialize(byteBuffer50);
        java.util.Spliterator<java.lang.Object> objSpliterator61 = objList60.spliterator();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(indexInfoComparator9);
        org.junit.Assert.assertNotNull(byteBufferComparator10);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(objList60);
        org.junit.Assert.assertNotNull(objSpliterator61);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.lang.String str17 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite42.startOffset;
        int int48 = composite28.compareTo(composite42);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        comparators.Composite composite55 = composite28.addBytes(byteArray53);
        java.nio.ByteBuffer byteBuffer56 = composite55.serializeToByteBuffer();
        compositeType18.validate(byteBuffer56);
        java.lang.String str58 = compositeType6.getString(byteBuffer56);
        comparators.Composite composite59 = new comparators.Composite(byteBuffer56);
        java.util.Iterator<java.lang.Object> objItor60 = composite59.iterator();
        comparators.Composite.Placeholder placeholder61 = comparators.Composite.MATCH_MAXIMUM;
        int int62 = placeholder61.type;
        placeholder61.type = 6;
        boolean boolean65 = composite59.contains((java.lang.Object) placeholder61);
        comparators.Composite.MATCH_MAXIMUM = placeholder61;
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(objItor60);
        org.junit.Assert.assertNotNull(placeholder61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 8 + "'", int62 == 8);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator25 = compositeType20.indexComparator;
        comparators.CompositeType compositeType26 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray27 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList28 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28, byteBufferArray27);
        java.lang.String str30 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType20.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType26);
        comparators.CompositeType compositeType32 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray33 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList34 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34, byteBufferArray33);
        java.lang.String str36 = compositeType32.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34);
        java.lang.String str37 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34);
        comparators.CompositeType compositeType38 = comparators.CompositeType.instance;
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        java.lang.Object[] objArray49 = composite48.toArray();
        int int50 = composite48.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream51 = composite48.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream52 = composite48.parallelStream();
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        java.util.List<java.lang.Object> objList59 = comparators.Composite.deserialize(byteArray57);
        byte[] byteArray60 = comparators.Composite.serialize(objList59);
        java.util.stream.Stream<java.lang.Object> objStream61 = objList59.parallelStream();
        comparators.Composite composite62 = new comparators.Composite(objList59);
        java.lang.Object[] objArray63 = composite62.toArray();
        int int64 = composite62.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream65 = composite62.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream66 = composite62.parallelStream();
        int int67 = composite62.startOffset;
        int int68 = composite48.compareTo(composite62);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        comparators.Composite composite75 = composite48.addBytes(byteArray73);
        java.nio.ByteBuffer byteBuffer76 = composite75.serializeToByteBuffer();
        compositeType38.validate(byteBuffer76);
        java.lang.String str78 = compositeType26.getString(byteBuffer76);
        comparators.Composite composite79 = new comparators.Composite(byteBuffer76);
        java.util.Iterator<java.lang.Object> objItor80 = composite79.iterator();
        comparators.Composite.Placeholder placeholder81 = comparators.Composite.MATCH_MAXIMUM;
        int int82 = placeholder81.type;
        placeholder81.type = 6;
        boolean boolean85 = composite79.contains((java.lang.Object) placeholder81);
        byte[] byteArray86 = composite79.bytes;
        boolean boolean88 = comparators.Composite.validate(9, byteArray86, false);
        java.util.List<java.lang.Object> objList89 = comparators.Composite.deserialize(byteArray86);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = composite10.retainAll((java.util.Collection<java.lang.Object>) objList89);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexInfoComparator25);
        org.junit.Assert.assertNotNull(compositeType26);
        org.junit.Assert.assertNotNull(byteBufferArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(compositeType32);
        org.junit.Assert.assertNotNull(byteBufferArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(compositeType38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(objItor80);
        org.junit.Assert.assertNotNull(placeholder81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 6 + "'", int82 == 6);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[67, 77, 80, 1, 9, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(objList89);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        comparators.CompositeType compositeType10 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray11 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList12 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12, byteBufferArray11);
        java.lang.String str14 = compositeType10.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12);
        org.apache.cassandra.db.IColumn[] iColumnArray15 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList16 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16, iColumnArray15);
        java.lang.String str18 = compositeType10.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        java.lang.String str19 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        comparators.hector.CompositeListSerializer compositeListSerializer20 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType21 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray22 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList23 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23, byteBufferArray22);
        java.lang.String str25 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator26 = compositeType21.indexComparator;
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray28 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList29 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29, byteBufferArray28);
        java.lang.String str31 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator32 = compositeType21.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType27);
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.lang.String str38 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.List<java.util.List<java.lang.Object>> objListList39 = compositeListSerializer20.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList35);
        java.lang.String str40 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.lang.Class<?> wildcardClass41 = byteBufferList35.getClass();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(compositeType10);
        org.junit.Assert.assertNotNull(byteBufferArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(iColumnArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(compositeType21);
        org.junit.Assert.assertNotNull(byteBufferArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(indexInfoComparator26);
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteBufferArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteBufferComparator32);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(objListList39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        int int16 = composite9.startOffset;
        comparators.CompositeType compositeType17 = new comparators.CompositeType();
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite42.startOffset;
        int int48 = composite28.compareTo(composite42);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        comparators.Composite composite55 = composite28.addBytes(byteArray53);
        java.nio.ByteBuffer byteBuffer56 = composite55.serializeToByteBuffer();
        compositeType18.validate(byteBuffer56);
        boolean boolean58 = comparators.Composite.validate(byteBuffer56);
        comparators.Composite composite59 = new comparators.Composite(byteBuffer56);
        java.nio.ByteBuffer byteBuffer60 = null;
        int int61 = compositeType17.compare(byteBuffer56, byteBuffer60);
        comparators.Composite composite62 = new comparators.Composite(byteBuffer56);
        comparators.Composite composite63 = new comparators.Composite(byteBuffer56);
        boolean boolean64 = composite9.equals((java.lang.Object) composite63);
        comparators.CompositeType compositeType65 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray66 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList67 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList67, byteBufferArray66);
        java.lang.String str69 = compositeType65.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList67);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator70 = compositeType65.indexComparator;
        comparators.CompositeType compositeType71 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray72 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList73 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList73, byteBufferArray72);
        java.lang.String str75 = compositeType71.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList73);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator76 = compositeType65.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType71);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator77 = compositeType65.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator78 = compositeType65.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator79 = compositeType65.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator80 = compositeType65.reversed();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator81 = compositeType65.indexReverseComparator;
        boolean boolean82 = composite63.equals((java.lang.Object) indexInfoComparator81);
        java.util.Iterator<java.lang.Object> objItor83 = composite63.iterator();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(compositeType65);
        org.junit.Assert.assertNotNull(byteBufferArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(indexInfoComparator70);
        org.junit.Assert.assertNotNull(compositeType71);
        org.junit.Assert.assertNotNull(byteBufferArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(byteBufferComparator76);
        org.junit.Assert.assertNotNull(indexInfoComparator77);
        org.junit.Assert.assertNotNull(byteBufferComparator78);
        org.junit.Assert.assertNotNull(indexInfoComparator79);
        org.junit.Assert.assertNotNull(byteBufferComparator80);
        org.junit.Assert.assertNotNull(indexInfoComparator81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objItor83);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        int int81 = compositeTypeIterator80.offset;
        int int82 = compositeTypeIterator80.start;
        int int83 = compositeTypeIterator80.offset;
        compositeTypeIterator80.type = 4;
        compositeTypeIterator80.len = (byte) 1;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 67 + "'", int81 == 67);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 67 + "'", int82 == 67);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 67 + "'", int83 == 67);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray11 = new byte[] {};
        int int12 = comparators.Composite.compare(byteArray10, byteArray11);
        int int13 = comparators.Composite.compare(byteArray4, byteArray11);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray11);
        comparators.Composite composite15 = compositeSerializer0.fromBytes(byteArray11);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        comparators.Composite composite31 = composite25.addBool(true);
        java.util.Iterator<java.lang.Object> objItor32 = composite25.iterator();
        comparators.Composite composite34 = composite25.addReal((java.lang.Double) 100.0d);
        java.nio.ByteBuffer byteBuffer35 = compositeSerializer0.toByteBuffer(composite34);
        comparators.Composite composite36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer37 = compositeSerializer0.toByteBuffer(composite36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(objItor32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(byteBuffer35);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray12 = new byte[] {};
        int int13 = comparators.Composite.compare(byteArray11, byteArray12);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray12);
        byte[] byteArray15 = comparators.Composite.serialize(objList14);
        java.util.stream.Stream<java.lang.Object> objStream16 = objList14.parallelStream();
        comparators.Composite composite17 = new comparators.Composite(objList14);
        java.util.RandomAccess[] randomAccessArray18 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray19 = composite17.toArray(randomAccessArray18);
        comparators.Composite composite21 = composite17.addLong((long) 67);
        byte[] byteArray22 = composite21.serialize();
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray22);
        int int24 = comparators.Composite.compare(byteArray5, byteArray22);
        boolean boolean26 = comparators.Composite.validate(0, byteArray5, true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNull(byteArray15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(randomAccessArray18);
        org.junit.Assert.assertNotNull(randomAccessArray19);
        org.junit.Assert.assertNotNull(composite21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray14);
        byte[] byteArray17 = comparators.Composite.serialize(objList16);
        java.util.stream.Stream<java.lang.Object> objStream18 = objList16.parallelStream();
        comparators.Composite composite19 = new comparators.Composite(objList16);
        java.lang.Object[] objArray20 = composite19.toArray();
        int int21 = composite19.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream22 = composite19.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream23 = composite19.parallelStream();
        int int24 = composite19.startOffset;
        int int25 = comparators.Composite.compare(composite9, composite19);
        composite9.clear();
        byte[] byteArray27 = composite9.bytes;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite9.stream();
        comparators.Composite composite30 = composite9.addAscii("Placeholder(1)");
        comparators.Composite composite32 = composite9.addLong((long) 77);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = composite32.retainAll((java.util.Collection<java.lang.Object>) composite42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(composite32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        int int56 = composite17.startOffset;
        comparators.Composite composite58 = composite17.addAscii("hi!");
        java.io.DataOutputStream dataOutputStream59 = composite58.out;
        comparators.Composite composite61 = composite58.addLong((long) (short) -1);
        java.util.stream.Stream<java.lang.Object> objStream62 = composite58.parallelStream();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(composite58);
        org.junit.Assert.assertNotNull(dataOutputStream59);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertNotNull(objStream62);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer2 = compositeType0.fromString("Placeholder(35)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.util.RandomAccess[] randomAccessArray12 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray13 = composite11.toArray(randomAccessArray12);
        comparators.Composite composite15 = composite11.addLong((long) 67);
        comparators.Composite composite17 = composite15.addBool(true);
        comparators.Composite composite19 = composite15.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite15.spliterator();
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray28 = comparators.Composite.serialize(objList27);
        java.util.stream.Stream<java.lang.Object> objStream29 = objList27.parallelStream();
        comparators.Composite composite30 = new comparators.Composite(objList27);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        boolean boolean39 = comparators.Composite.validate((int) ' ', byteArray36, true);
        boolean boolean40 = composite30.contains((java.lang.Object) boolean39);
        java.util.Spliterator<java.lang.Object> objSpliterator41 = composite30.spliterator();
        java.io.DataOutputStream dataOutputStream42 = composite30.out;
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        java.util.List<java.lang.Object> objList50 = comparators.Composite.deserialize(byteArray48);
        byte[] byteArray51 = comparators.Composite.serialize(objList50);
        java.util.stream.Stream<java.lang.Object> objStream52 = objList50.parallelStream();
        comparators.Composite composite53 = new comparators.Composite(objList50);
        java.lang.Object[] objArray54 = composite53.toArray();
        int int55 = composite53.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream56 = composite53.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream57 = composite53.parallelStream();
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray62 = new byte[] {};
        int int63 = comparators.Composite.compare(byteArray61, byteArray62);
        java.util.List<java.lang.Object> objList64 = comparators.Composite.deserialize(byteArray62);
        byte[] byteArray65 = comparators.Composite.serialize(objList64);
        java.util.stream.Stream<java.lang.Object> objStream66 = objList64.parallelStream();
        comparators.Composite composite67 = new comparators.Composite(objList64);
        java.lang.Object[] objArray68 = composite67.toArray();
        int int69 = composite67.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream70 = composite67.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream71 = composite67.parallelStream();
        int int72 = composite67.startOffset;
        int int73 = composite53.compareTo(composite67);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray78 = new byte[] {};
        int int79 = comparators.Composite.compare(byteArray77, byteArray78);
        comparators.Composite composite80 = composite53.addBytes(byteArray78);
        java.util.List<java.lang.Object> objList81 = comparators.Composite.deserialize(byteArray78);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator82 = composite15.new CompositeTypeIterator(composite30, 67, byteArray78);
        comparators.Composite composite83 = compositeTypeIterator82.collection;
        byte[] byteArray84 = compositeTypeIterator82.bytes;
        boolean boolean86 = comparators.Composite.validate(2, byteArray84, true);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList87 = comparators.Composite.deserialize(15, byteArray84);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(randomAccessArray12);
        org.junit.Assert.assertNotNull(randomAccessArray13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(composite19);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objSpliterator41);
        org.junit.Assert.assertNull(dataOutputStream42);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(objList50);
        org.junit.Assert.assertNull(byteArray51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(objList64);
        org.junit.Assert.assertNull(byteArray65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(composite80);
        org.junit.Assert.assertNotNull(objList81);
        org.junit.Assert.assertNotNull(composite83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.type;
        compositeTypeIterator80.type = (short) 100;
        int int86 = compositeTypeIterator80.offset;
        int int87 = compositeTypeIterator80.len;
        int int88 = compositeTypeIterator80.type;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 67 + "'", int86 == 67);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 100 + "'", int88 == 100);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.util.RandomAccess[] randomAccessArray11 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray12 = composite10.toArray(randomAccessArray11);
        comparators.Composite composite14 = composite10.addLong((long) 67);
        comparators.Composite composite16 = composite14.addBool(true);
        comparators.Composite composite18 = composite14.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator19 = composite14.spliterator();
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        boolean boolean38 = comparators.Composite.validate((int) ' ', byteArray35, true);
        boolean boolean39 = composite29.contains((java.lang.Object) boolean38);
        java.util.Spliterator<java.lang.Object> objSpliterator40 = composite29.spliterator();
        java.io.DataOutputStream dataOutputStream41 = composite29.out;
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.lang.Object[] objArray53 = composite52.toArray();
        int int54 = composite52.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream55 = composite52.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream56 = composite52.parallelStream();
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        java.util.List<java.lang.Object> objList63 = comparators.Composite.deserialize(byteArray61);
        byte[] byteArray64 = comparators.Composite.serialize(objList63);
        java.util.stream.Stream<java.lang.Object> objStream65 = objList63.parallelStream();
        comparators.Composite composite66 = new comparators.Composite(objList63);
        java.lang.Object[] objArray67 = composite66.toArray();
        int int68 = composite66.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream69 = composite66.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream70 = composite66.parallelStream();
        int int71 = composite66.startOffset;
        int int72 = composite52.compareTo(composite66);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        comparators.Composite composite79 = composite52.addBytes(byteArray77);
        java.util.List<java.lang.Object> objList80 = comparators.Composite.deserialize(byteArray77);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator81 = composite14.new CompositeTypeIterator(composite29, 67, byteArray77);
        comparators.Composite composite82 = compositeTypeIterator81.collection;
        byte[] byteArray83 = compositeTypeIterator81.bytes;
        int int84 = compositeTypeIterator81.type;
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray89 = new byte[] {};
        int int90 = comparators.Composite.compare(byteArray88, byteArray89);
        byte[] byteArray94 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray95 = new byte[] {};
        int int96 = comparators.Composite.compare(byteArray94, byteArray95);
        int int97 = comparators.Composite.compare(byteArray88, byteArray95);
        compositeTypeIterator81.bytes = byteArray88;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList99 = comparators.Composite.deserialize((int) (short) 1, byteArray88);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(randomAccessArray12);
        org.junit.Assert.assertNotNull(composite14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(objSpliterator19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objSpliterator40);
        org.junit.Assert.assertNull(dataOutputStream41);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(objList63);
        org.junit.Assert.assertNull(byteArray64);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertNotNull(objList80);
        org.junit.Assert.assertNotNull(composite82);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        boolean boolean15 = composite9.isEmpty();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        int int26 = composite25.size();
        boolean boolean27 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray32 = new byte[] {};
        int int33 = comparators.Composite.compare(byteArray31, byteArray32);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray32);
        byte[] byteArray35 = comparators.Composite.serialize(objList34);
        java.util.stream.Stream<java.lang.Object> objStream36 = objList34.parallelStream();
        comparators.Composite composite37 = new comparators.Composite(objList34);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        boolean boolean46 = comparators.Composite.validate((int) ' ', byteArray43, true);
        boolean boolean47 = composite37.contains((java.lang.Object) boolean46);
        java.util.stream.Stream<java.lang.Object> objStream48 = composite37.parallelStream();
        boolean boolean49 = composite37.isEmpty();
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        java.lang.Object[] objArray60 = composite59.toArray();
        int int61 = composite59.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream62 = composite59.parallelStream();
        boolean boolean63 = composite37.containsAll((java.util.Collection<java.lang.Object>) composite59);
        comparators.Composite composite65 = composite37.addLong((long) (short) 1);
        int int66 = comparators.Composite.compare(composite9, composite65);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray71 = new byte[] {};
        int int72 = comparators.Composite.compare(byteArray70, byteArray71);
        java.util.List<java.lang.Object> objList73 = comparators.Composite.deserialize(byteArray71);
        byte[] byteArray74 = comparators.Composite.serialize(objList73);
        java.util.stream.Stream<java.lang.Object> objStream75 = objList73.parallelStream();
        comparators.Composite composite76 = new comparators.Composite(objList73);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray82 = new byte[] {};
        int int83 = comparators.Composite.compare(byteArray81, byteArray82);
        boolean boolean85 = comparators.Composite.validate((int) ' ', byteArray82, true);
        boolean boolean86 = composite76.contains((java.lang.Object) boolean85);
        java.util.Spliterator<java.lang.Object> objSpliterator87 = composite76.spliterator();
        byte[] byteArray88 = composite76.bytes;
        comparators.Composite composite90 = composite76.addLong((long) 5);
        int int91 = composite90.size();
        boolean boolean92 = composite65.equals((java.lang.Object) composite90);
        byte[] byteArray93 = composite90.bytes;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(objList73);
        org.junit.Assert.assertNull(byteArray74);
        org.junit.Assert.assertNotNull(objStream75);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objSpliterator87);
        org.junit.Assert.assertNull(byteArray88);
        org.junit.Assert.assertNotNull(composite90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 5, 0]");
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        byte[] byteArray25 = composite22.bytes;
        java.io.DataOutputStream dataOutputStream26 = null;
        composite22.out = dataOutputStream26;
        int int28 = comparators.Composite.compare(composite9, composite22);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator45 = compositeType40.indexComparator;
        comparators.CompositeType compositeType46 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray47 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList48 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48, byteBufferArray47);
        java.lang.String str50 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator51 = compositeType40.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType46);
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray53 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList54 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54, byteBufferArray53);
        java.lang.String str56 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        java.lang.String str57 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        comparators.CompositeType compositeType58 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray59 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList60 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60, byteBufferArray59);
        java.lang.String str62 = compositeType58.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator63 = compositeType58.indexComparator;
        comparators.CompositeType compositeType64 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray65 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList66 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList66, byteBufferArray65);
        java.lang.String str68 = compositeType64.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList66);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator69 = compositeType58.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType64);
        comparators.CompositeType compositeType70 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray71 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList72 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList72, byteBufferArray71);
        java.lang.String str74 = compositeType70.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList72);
        java.lang.String str75 = compositeType64.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList72);
        java.util.AbstractList[] abstractListArray77 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray78 = (java.util.AbstractList<java.nio.ByteBuffer>[]) abstractListArray77;
        byteBufferListArray78[0] = byteBufferList54;
        byteBufferListArray78[1] = byteBufferList72;
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray83 = composite38.toArray(byteBufferListArray78);
        java.util.stream.Stream<java.lang.Object> objStream84 = composite38.parallelStream();
        comparators.Composite composite86 = composite38.addUTF8("UTF-8");
        int int87 = composite22.compareTo(composite86);
        java.util.UUID uUID88 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite89 = composite86.addLexicalUUID(uUID88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(indexInfoComparator45);
        org.junit.Assert.assertNotNull(compositeType46);
        org.junit.Assert.assertNotNull(byteBufferArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteBufferComparator51);
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(compositeType58);
        org.junit.Assert.assertNotNull(byteBufferArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(indexInfoComparator63);
        org.junit.Assert.assertNotNull(compositeType64);
        org.junit.Assert.assertNotNull(byteBufferArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteBufferComparator69);
        org.junit.Assert.assertNotNull(compositeType70);
        org.junit.Assert.assertNotNull(byteBufferArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(abstractListArray77);
        org.junit.Assert.assertNotNull(byteBufferListArray78);
        org.junit.Assert.assertNotNull(byteBufferListArray83);
        org.junit.Assert.assertNotNull(objStream84);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        byte[] byteArray25 = composite22.bytes;
        java.io.DataOutputStream dataOutputStream26 = null;
        composite22.out = dataOutputStream26;
        int int28 = comparators.Composite.compare(composite9, composite22);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator45 = compositeType40.indexComparator;
        comparators.CompositeType compositeType46 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray47 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList48 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48, byteBufferArray47);
        java.lang.String str50 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator51 = compositeType40.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType46);
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray53 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList54 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54, byteBufferArray53);
        java.lang.String str56 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        java.lang.String str57 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        comparators.CompositeType compositeType58 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray59 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList60 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60, byteBufferArray59);
        java.lang.String str62 = compositeType58.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator63 = compositeType58.indexComparator;
        comparators.CompositeType compositeType64 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray65 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList66 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList66, byteBufferArray65);
        java.lang.String str68 = compositeType64.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList66);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator69 = compositeType58.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType64);
        comparators.CompositeType compositeType70 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray71 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList72 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList72, byteBufferArray71);
        java.lang.String str74 = compositeType70.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList72);
        java.lang.String str75 = compositeType64.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList72);
        java.util.AbstractList[] abstractListArray77 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray78 = (java.util.AbstractList<java.nio.ByteBuffer>[]) abstractListArray77;
        byteBufferListArray78[0] = byteBufferList54;
        byteBufferListArray78[1] = byteBufferList72;
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray83 = composite38.toArray(byteBufferListArray78);
        java.util.stream.Stream<java.lang.Object> objStream84 = composite38.parallelStream();
        comparators.Composite composite86 = composite38.addUTF8("UTF-8");
        int int87 = composite22.compareTo(composite86);
        byte[] byteArray88 = composite22.bytes;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(indexInfoComparator45);
        org.junit.Assert.assertNotNull(compositeType46);
        org.junit.Assert.assertNotNull(byteBufferArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteBufferComparator51);
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(compositeType58);
        org.junit.Assert.assertNotNull(byteBufferArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(indexInfoComparator63);
        org.junit.Assert.assertNotNull(compositeType64);
        org.junit.Assert.assertNotNull(byteBufferArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteBufferComparator69);
        org.junit.Assert.assertNotNull(compositeType70);
        org.junit.Assert.assertNotNull(byteBufferArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(abstractListArray77);
        org.junit.Assert.assertNotNull(byteBufferListArray78);
        org.junit.Assert.assertNotNull(byteBufferListArray83);
        org.junit.Assert.assertNotNull(objStream84);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNull(byteArray88);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        java.lang.String str1 = placeholder0.toString();
        java.lang.String str2 = placeholder0.toString();
        int int3 = placeholder0.type;
        java.lang.Class<?> wildcardClass4 = placeholder0.getClass();
        org.junit.Assert.assertNotNull(placeholder0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Placeholder(-1)" + "'", str1, "Placeholder(-1)");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Placeholder(-1)" + "'", str2, "Placeholder(-1)");
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.lang.String str17 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        comparators.hector.CompositeSerializer compositeSerializer18 = new comparators.hector.CompositeSerializer();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray29 = new byte[] {};
        int int30 = comparators.Composite.compare(byteArray28, byteArray29);
        int int31 = comparators.Composite.compare(byteArray22, byteArray29);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray29);
        comparators.Composite composite33 = compositeSerializer18.fromBytes(byteArray29);
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        comparators.Composite composite49 = composite43.addBool(true);
        java.util.Iterator<java.lang.Object> objItor50 = composite43.iterator();
        comparators.Composite composite52 = composite43.addReal((java.lang.Double) 100.0d);
        java.nio.ByteBuffer byteBuffer53 = compositeSerializer18.toByteBuffer(composite52);
        java.lang.String str54 = compositeType6.getString(byteBuffer53);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator55 = compositeType6.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator56 = compositeType6.indexComparator;
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(objItor50);
        org.junit.Assert.assertNotNull(composite52);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "true" + "'", str54, "true");
        org.junit.Assert.assertNotNull(indexInfoComparator55);
        org.junit.Assert.assertNotNull(indexInfoComparator56);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator12 = compositeType0.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType0.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator15 = compositeType0.reversed();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator16 = compositeType0.indexReverseComparator;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer18 = compositeType0.fromString("Placeholder(77)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(indexInfoComparator12);
        org.junit.Assert.assertNotNull(byteBufferComparator13);
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(byteBufferComparator15);
        org.junit.Assert.assertNotNull(indexInfoComparator16);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        int int56 = composite17.startOffset;
        comparators.Composite composite58 = composite17.addAscii("hi!");
        int int59 = composite17.startOffset;
        java.nio.ByteBuffer byteBuffer60 = composite17.serializeToByteBuffer();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(composite58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(byteBuffer60);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        comparators.Composite composite33 = composite23.addAscii("Placeholder(100)");
        java.util.UUID uUID34 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite35 = composite23.addLexicalUUID(uUID34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(composite33);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        comparators.hector.CompositeSerializer compositeSerializer30 = new comparators.hector.CompositeSerializer();
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        java.util.List<java.lang.Object> objList37 = comparators.Composite.deserialize(byteArray35);
        byte[] byteArray38 = comparators.Composite.serialize(objList37);
        java.util.stream.Stream<java.lang.Object> objStream39 = objList37.parallelStream();
        comparators.Composite composite40 = new comparators.Composite(objList37);
        java.lang.Object[] objArray41 = composite40.toArray();
        int int42 = composite40.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream43 = composite40.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream44 = composite40.parallelStream();
        comparators.Composite composite46 = composite40.addBool(true);
        java.io.DataOutputStream dataOutputStream47 = composite40.out;
        byte[] byteArray48 = compositeSerializer30.toBytes(composite40);
        byte[] byteArray51 = null;
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        int int65 = comparators.Composite.compare(byteArray56, byteArray63);
        int int66 = comparators.Composite.compare((int) (byte) 1, byteArray51, 10, byteArray56);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray71 = new byte[] {};
        int int72 = comparators.Composite.compare(byteArray70, byteArray71);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        int int79 = comparators.Composite.compare(byteArray70, byteArray77);
        java.util.List<java.lang.Object> objList80 = comparators.Composite.deserialize(byteArray77);
        int int81 = comparators.Composite.compare(byteArray56, byteArray77);
        java.util.List<java.lang.Object> objList82 = comparators.Composite.deserialize(byteArray77);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator83 = composite23.new CompositeTypeIterator(composite40, 5, byteArray77);
        byte[] byteArray84 = composite40.serialize();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(objList37);
        org.junit.Assert.assertNull(byteArray38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(composite46);
        org.junit.Assert.assertNotNull(dataOutputStream47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(objList80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(objList82);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[67, 77, 80, 1, 2, 1, 0]");
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        compositeTypeIterator80.offset = 1;
        int int84 = compositeTypeIterator80.type;
        byte[] byteArray85 = compositeTypeIterator80.bytes;
        java.lang.Class<?> wildcardClass86 = compositeTypeIterator80.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        comparators.hector.CompositeListSerializer compositeListSerializer20 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType21 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray22 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList23 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23, byteBufferArray22);
        java.lang.String str25 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator26 = compositeType21.indexComparator;
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray28 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList29 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29, byteBufferArray28);
        java.lang.String str31 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator32 = compositeType21.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType27);
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.lang.String str38 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.List<java.util.List<java.lang.Object>> objListList39 = compositeListSerializer20.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList35);
        int int41 = compositeListSerializer20.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer42 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray44 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList45 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45, byteBufferArray44);
        java.lang.String str47 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator48 = compositeType43.indexComparator;
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray50 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList51 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51, byteBufferArray50);
        java.lang.String str53 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator54 = compositeType43.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType49);
        comparators.CompositeType compositeType55 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray56 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList57 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57, byteBufferArray56);
        java.lang.String str59 = compositeType55.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        java.lang.String str60 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        java.util.List<java.util.List<java.lang.Object>> objListList61 = compositeListSerializer42.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList57);
        java.util.List<java.nio.ByteBuffer> byteBufferList62 = compositeListSerializer20.toBytesList(objListList61);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet63 = compositeListSerializer0.toBytesSet(objListList61);
        comparators.hector.CompositeListSerializer compositeListSerializer64 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        java.util.List<java.lang.Object> objList71 = comparators.Composite.deserialize(byteArray69);
        byte[] byteArray72 = comparators.Composite.serialize(objList71);
        java.util.stream.Stream<java.lang.Object> objStream73 = objList71.parallelStream();
        comparators.Composite composite74 = new comparators.Composite(objList71);
        byte[] byteArray75 = compositeListSerializer64.toBytes(objList71);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        java.util.List<java.lang.Object> objList82 = comparators.Composite.deserialize(byteArray80);
        byte[] byteArray83 = comparators.Composite.serialize(objList82);
        byte[] byteArray84 = comparators.Composite.serialize(objList82);
        byte[] byteArray85 = compositeListSerializer64.toBytes(objList82);
        byte[] byteArray86 = compositeListSerializer0.toBytes(objList82);
        byte[] byteArray87 = comparators.Composite.serialize(objList82);
        byte[] byteArray88 = comparators.Composite.serialize(objList82);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertNotNull(compositeType21);
        org.junit.Assert.assertNotNull(byteBufferArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(indexInfoComparator26);
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteBufferArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteBufferComparator32);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(objListList39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(byteBufferArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(indexInfoComparator48);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteBufferComparator54);
        org.junit.Assert.assertNotNull(compositeType55);
        org.junit.Assert.assertNotNull(byteBufferArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(objListList61);
        org.junit.Assert.assertNotNull(byteBufferList62);
        org.junit.Assert.assertNotNull(byteBufferSet63);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(objList71);
        org.junit.Assert.assertNull(byteArray72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertNull(byteArray75);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(objList82);
        org.junit.Assert.assertNull(byteArray83);
        org.junit.Assert.assertNull(byteArray84);
        org.junit.Assert.assertNull(byteArray85);
        org.junit.Assert.assertNull(byteArray86);
        org.junit.Assert.assertNull(byteArray87);
        org.junit.Assert.assertNull(byteArray88);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        comparators.CompositeType compositeType10 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray11 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList12 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12, byteBufferArray11);
        java.lang.String str14 = compositeType10.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12);
        org.apache.cassandra.db.IColumn[] iColumnArray15 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList16 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16, iColumnArray15);
        java.lang.String str18 = compositeType10.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        java.lang.String str19 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        comparators.hector.CompositeListSerializer compositeListSerializer20 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType21 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray22 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList23 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23, byteBufferArray22);
        java.lang.String str25 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator26 = compositeType21.indexComparator;
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray28 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList29 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29, byteBufferArray28);
        java.lang.String str31 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator32 = compositeType21.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType27);
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.lang.String str38 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.List<java.util.List<java.lang.Object>> objListList39 = compositeListSerializer20.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList35);
        java.lang.String str40 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator41 = compositeType0.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator42 = compositeType0.reversed();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator43 = compositeType0.indexComparator;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer45 = compositeType0.fromString("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(compositeType10);
        org.junit.Assert.assertNotNull(byteBufferArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(iColumnArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(compositeType21);
        org.junit.Assert.assertNotNull(byteBufferArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(indexInfoComparator26);
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteBufferArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteBufferComparator32);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(objListList39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteBufferComparator41);
        org.junit.Assert.assertNotNull(byteBufferComparator42);
        org.junit.Assert.assertNotNull(indexInfoComparator43);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite65.startOffset;
        int int72 = composite17.compareTo(composite65);
        comparators.Composite composite74 = composite17.addLong((long) 80);
        comparators.Composite composite76 = composite17.addLong((long) 6);
        java.util.Iterator<java.lang.Object> objItor77 = composite17.iterator();
        int int78 = composite17.size();
        comparators.Composite composite79 = composite17.addMatchMaximum();
        java.nio.ByteBuffer byteBuffer80 = composite79.serializeToByteBuffer();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(composite76);
        org.junit.Assert.assertNotNull(objItor77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertNotNull(byteBuffer80);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        int int33 = composite28.startOffset;
        composite28.clear();
        boolean boolean35 = composite18.containsAll((java.util.Collection<java.lang.Object>) composite28);
        comparators.Composite composite37 = composite28.addAscii("hi!");
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        java.util.List<java.lang.Object> objList44 = comparators.Composite.deserialize(byteArray42);
        byte[] byteArray45 = comparators.Composite.serialize(objList44);
        java.util.stream.Stream<java.lang.Object> objStream46 = objList44.parallelStream();
        comparators.Composite composite47 = new comparators.Composite(objList44);
        java.lang.Object[] objArray48 = composite47.toArray();
        int int49 = composite47.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream50 = composite47.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream51 = composite47.parallelStream();
        comparators.Composite composite53 = composite47.addBool(true);
        comparators.Composite composite55 = composite53.addLong((long) 6);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        comparators.Composite composite71 = composite65.addBool(true);
        comparators.Composite composite73 = composite71.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream74 = composite71.byteStream;
        composite55.byteStream = byteArrayOutputStream74;
        composite28.byteStream = byteArrayOutputStream74;
        comparators.Composite composite78 = composite28.addUTF8("US-ASCII");
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray85 = new byte[] {};
        int int86 = comparators.Composite.compare(byteArray84, byteArray85);
        java.util.List<java.lang.Object> objList87 = comparators.Composite.deserialize(byteArray85);
        boolean boolean88 = comparators.Composite.validate(0, byteArray85);
        boolean boolean90 = comparators.Composite.validate((int) 'a', byteArray85, true);
        comparators.Composite composite91 = composite78.addBytes(byteArray85);
        int int92 = composite78.startOffset;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(objList44);
        org.junit.Assert.assertNull(byteArray45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(composite53);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(composite71);
        org.junit.Assert.assertNotNull(composite73);
        org.junit.Assert.assertNotNull(byteArrayOutputStream74);
// flaky:         org.junit.Assert.assertEquals(byteArrayOutputStream74.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(objList87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(composite91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.type;
        comparators.Composite composite84 = compositeTypeIterator80.collection;
        compositeTypeIterator80.type = 1;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj87 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(composite84);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        int int27 = composite26.size();
        java.lang.Object[] objArray28 = composite26.toArray();
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        boolean boolean47 = comparators.Composite.validate((int) ' ', byteArray44, true);
        boolean boolean48 = composite38.contains((java.lang.Object) boolean47);
        java.util.Spliterator<java.lang.Object> objSpliterator49 = composite38.spliterator();
        byte[] byteArray50 = composite38.bytes;
        comparators.Composite composite52 = composite38.addUTF8("Placeholder(1)");
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        java.util.List<java.lang.Object> objList59 = comparators.Composite.deserialize(byteArray57);
        byte[] byteArray60 = comparators.Composite.serialize(objList59);
        java.util.stream.Stream<java.lang.Object> objStream61 = objList59.parallelStream();
        comparators.Composite composite62 = new comparators.Composite(objList59);
        java.lang.Object[] objArray63 = composite62.toArray();
        int int64 = composite62.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream65 = null;
        composite62.byteStream = byteArrayOutputStream65;
        boolean boolean67 = composite52.containsAll((java.util.Collection<java.lang.Object>) composite62);
        comparators.Composite composite69 = composite62.addUTF8("US-ASCII");
        boolean boolean70 = composite26.addAll((java.util.Collection<java.lang.Object>) composite62);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[hi!, 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[hi!, 4]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objSpliterator49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(composite52);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(composite69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        comparators.hector.CompositeListSerializer compositeListSerializer19 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator25 = compositeType20.indexComparator;
        comparators.CompositeType compositeType26 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray27 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList28 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28, byteBufferArray27);
        java.lang.String str30 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType20.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType26);
        comparators.CompositeType compositeType32 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray33 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList34 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34, byteBufferArray33);
        java.lang.String str36 = compositeType32.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34);
        java.lang.String str37 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34);
        java.util.List<java.util.List<java.lang.Object>> objListList38 = compositeListSerializer19.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList34);
        comparators.hector.CompositeListSerializer compositeListSerializer39 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator45 = compositeType40.indexComparator;
        comparators.CompositeType compositeType46 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray47 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList48 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48, byteBufferArray47);
        java.lang.String str50 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator51 = compositeType40.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType46);
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray53 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList54 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54, byteBufferArray53);
        java.lang.String str56 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        java.lang.String str57 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        java.util.List<java.util.List<java.lang.Object>> objListList58 = compositeListSerializer39.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList54);
        int int60 = compositeListSerializer39.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer61 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType62 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray63 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList64 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64, byteBufferArray63);
        java.lang.String str66 = compositeType62.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator67 = compositeType62.indexComparator;
        comparators.CompositeType compositeType68 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray69 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList70 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList70, byteBufferArray69);
        java.lang.String str72 = compositeType68.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList70);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator73 = compositeType62.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType68);
        comparators.CompositeType compositeType74 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray75 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList76 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList76, byteBufferArray75);
        java.lang.String str78 = compositeType74.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList76);
        java.lang.String str79 = compositeType68.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList76);
        java.util.List<java.util.List<java.lang.Object>> objListList80 = compositeListSerializer61.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList76);
        java.util.List<java.nio.ByteBuffer> byteBufferList81 = compositeListSerializer39.toBytesList(objListList80);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet82 = compositeListSerializer19.toBytesSet(objListList80);
        java.util.List<comparators.Composite> compositeList83 = compositeSerializer0.fromBytesSet(byteBufferSet82);
        java.lang.Class<?> wildcardClass84 = compositeList83.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexInfoComparator25);
        org.junit.Assert.assertNotNull(compositeType26);
        org.junit.Assert.assertNotNull(byteBufferArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(compositeType32);
        org.junit.Assert.assertNotNull(byteBufferArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(objListList38);
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(indexInfoComparator45);
        org.junit.Assert.assertNotNull(compositeType46);
        org.junit.Assert.assertNotNull(byteBufferArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteBufferComparator51);
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(objListList58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 6 + "'", int60 == 6);
        org.junit.Assert.assertNotNull(compositeType62);
        org.junit.Assert.assertNotNull(byteBufferArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(indexInfoComparator67);
        org.junit.Assert.assertNotNull(compositeType68);
        org.junit.Assert.assertNotNull(byteBufferArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(byteBufferComparator73);
        org.junit.Assert.assertNotNull(compositeType74);
        org.junit.Assert.assertNotNull(byteBufferArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(objListList80);
        org.junit.Assert.assertNotNull(byteBufferList81);
        org.junit.Assert.assertNotNull(byteBufferSet82);
        org.junit.Assert.assertNotNull(compositeList83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        int int33 = composite28.startOffset;
        composite28.clear();
        boolean boolean35 = composite18.containsAll((java.util.Collection<java.lang.Object>) composite28);
        java.util.Iterator<java.lang.Object> objItor36 = composite18.iterator();
        java.util.UUID uUID37 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite38 = composite18.addTimeUUID(uUID37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objItor36);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        int int1 = placeholder0.type;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        org.junit.Assert.assertNotNull(placeholder0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        boolean boolean10 = comparators.Composite.validate((int) ' ', byteArray7, true);
        boolean boolean11 = comparators.Composite.validate(100, byteArray7);
        java.util.List<java.lang.Object> objList12 = comparators.Composite.deserialize(byteArray7);
        comparators.Composite composite13 = new comparators.Composite(byteArray7);
        boolean boolean15 = comparators.Composite.validate((int) (short) -1, byteArray7, true);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objList12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        comparators.hector.CompositeSerializer compositeSerializer1 = new comparators.hector.CompositeSerializer();
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        comparators.Composite composite17 = composite11.addBool(true);
        java.io.DataOutputStream dataOutputStream18 = composite11.out;
        byte[] byteArray19 = compositeSerializer1.toBytes(composite11);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        comparators.Composite composite35 = composite29.addBool(true);
        comparators.Composite composite37 = composite35.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream38 = composite35.byteStream;
        java.nio.ByteBuffer byteBuffer39 = compositeSerializer1.toByteBuffer(composite35);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList46.parallelStream();
        comparators.Composite composite49 = new comparators.Composite(objList46);
        java.lang.Object[] objArray50 = composite49.toArray();
        int int51 = composite49.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream52 = composite49.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream53 = composite49.parallelStream();
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray58 = new byte[] {};
        int int59 = comparators.Composite.compare(byteArray57, byteArray58);
        java.util.List<java.lang.Object> objList60 = comparators.Composite.deserialize(byteArray58);
        byte[] byteArray61 = comparators.Composite.serialize(objList60);
        java.util.stream.Stream<java.lang.Object> objStream62 = objList60.parallelStream();
        comparators.Composite composite63 = new comparators.Composite(objList60);
        java.lang.Object[] objArray64 = composite63.toArray();
        int int65 = composite63.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream66 = composite63.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream67 = composite63.parallelStream();
        int int68 = composite63.startOffset;
        int int69 = composite49.compareTo(composite63);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray74 = new byte[] {};
        int int75 = comparators.Composite.compare(byteArray73, byteArray74);
        java.util.List<java.lang.Object> objList76 = comparators.Composite.deserialize(byteArray74);
        byte[] byteArray77 = comparators.Composite.serialize(objList76);
        java.util.stream.Stream<java.lang.Object> objStream78 = objList76.parallelStream();
        comparators.Composite composite79 = new comparators.Composite(objList76);
        java.util.RandomAccess[] randomAccessArray80 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray81 = composite79.toArray(randomAccessArray80);
        comparators.Composite composite83 = composite79.addLong((long) 67);
        byte[] byteArray84 = composite83.serialize();
        java.util.List<java.lang.Object> objList85 = comparators.Composite.deserialize(byteArray84);
        comparators.Composite composite86 = new comparators.Composite(byteArray84);
        boolean boolean87 = composite63.equals((java.lang.Object) byteArray84);
        comparators.Composite composite88 = compositeSerializer1.fromBytes(byteArray84);
        comparators.CompositeType compositeType89 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray90 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList91 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList91, byteBufferArray90);
        java.lang.String str93 = compositeType89.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList91);
        java.util.List<comparators.Composite> compositeList94 = compositeSerializer1.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList91);
        java.util.List<comparators.Composite> compositeList95 = compositeSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList91);
        int int97 = compositeSerializer0.computeInitialHashSize(255);
        int int99 = compositeSerializer0.computeInitialHashSize(63);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(dataOutputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteArrayOutputStream38);
        org.junit.Assert.assertEquals(byteArrayOutputStream38.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(objList60);
        org.junit.Assert.assertNull(byteArray61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertNull(byteArray77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(randomAccessArray80);
        org.junit.Assert.assertNotNull(randomAccessArray81);
        org.junit.Assert.assertNotNull(composite83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(composite88);
        org.junit.Assert.assertNotNull(compositeType89);
        org.junit.Assert.assertNotNull(byteBufferArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(compositeList94);
        org.junit.Assert.assertNotNull(compositeList95);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 341 + "'", int97 == 341);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 85 + "'", int99 == 85);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        byte[] byteArray14 = composite13.serialize();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        comparators.Composite composite30 = composite24.addBool(true);
        java.util.Iterator<java.lang.Object> objItor31 = composite24.iterator();
        comparators.Composite composite32 = new comparators.Composite();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite32.compareTo(composite42);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        boolean boolean66 = comparators.Composite.validate((int) ' ', byteArray63, true);
        boolean boolean67 = composite57.contains((java.lang.Object) boolean66);
        java.util.stream.Stream<java.lang.Object> objStream68 = composite57.parallelStream();
        boolean boolean69 = composite32.contains((java.lang.Object) composite57);
        boolean boolean70 = composite24.addAll((java.util.Collection<java.lang.Object>) composite32);
        int int71 = composite32.startOffset;
        boolean boolean72 = composite13.add((java.lang.Object) composite32);
        byte[] byteArray73 = composite13.serialize();
        java.io.DataOutputStream dataOutputStream74 = composite13.out;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNull(dataOutputStream74);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        int int10 = composite9.size();
        composite9.clear();
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        java.util.stream.Stream<java.lang.Object> objStream20 = objList18.parallelStream();
        comparators.Composite composite21 = new comparators.Composite(objList18);
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        boolean boolean30 = comparators.Composite.validate((int) ' ', byteArray27, true);
        boolean boolean31 = composite21.contains((java.lang.Object) boolean30);
        java.util.stream.Stream<java.lang.Object> objStream32 = composite21.parallelStream();
        composite21.startOffset = 8;
        comparators.Composite composite36 = composite21.addAscii("hi!");
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite21);
        int int38 = composite9.startOffset;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        comparators.CompositeType compositeType27 = new comparators.CompositeType();
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        int int40 = composite38.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream41 = composite38.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream42 = composite38.parallelStream();
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.lang.Object[] objArray53 = composite52.toArray();
        int int54 = composite52.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream55 = composite52.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream56 = composite52.parallelStream();
        int int57 = composite52.startOffset;
        int int58 = composite38.compareTo(composite52);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        comparators.Composite composite65 = composite38.addBytes(byteArray63);
        java.nio.ByteBuffer byteBuffer66 = composite65.serializeToByteBuffer();
        compositeType28.validate(byteBuffer66);
        boolean boolean68 = comparators.Composite.validate(byteBuffer66);
        comparators.Composite composite69 = new comparators.Composite(byteBuffer66);
        java.nio.ByteBuffer byteBuffer70 = null;
        int int71 = compositeType27.compare(byteBuffer66, byteBuffer70);
        comparators.Composite composite72 = new comparators.Composite(byteBuffer66);
        java.util.Spliterator<java.lang.Object> objSpliterator73 = composite72.spliterator();
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray86 = new byte[] {};
        int int87 = comparators.Composite.compare(byteArray85, byteArray86);
        int int88 = comparators.Composite.compare(byteArray79, byteArray86);
        boolean boolean90 = comparators.Composite.validate((int) (byte) 0, byteArray86, true);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator91 = composite26.new CompositeTypeIterator(composite72, 97, byteArray86);
        boolean boolean92 = compositeTypeIterator91.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator91.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objSpliterator73);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        comparators.CompositeType compositeType1 = new comparators.CompositeType();
        comparators.CompositeType compositeType2 = comparators.CompositeType.instance;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        java.util.List<java.lang.Object> objList9 = comparators.Composite.deserialize(byteArray7);
        byte[] byteArray10 = comparators.Composite.serialize(objList9);
        java.util.stream.Stream<java.lang.Object> objStream11 = objList9.parallelStream();
        comparators.Composite composite12 = new comparators.Composite(objList9);
        java.lang.Object[] objArray13 = composite12.toArray();
        int int14 = composite12.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream15 = composite12.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream16 = composite12.parallelStream();
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        int int31 = composite26.startOffset;
        int int32 = composite12.compareTo(composite26);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        comparators.Composite composite39 = composite12.addBytes(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = composite39.serializeToByteBuffer();
        compositeType2.validate(byteBuffer40);
        boolean boolean42 = comparators.Composite.validate(byteBuffer40);
        comparators.Composite composite43 = new comparators.Composite(byteBuffer40);
        java.nio.ByteBuffer byteBuffer44 = null;
        int int45 = compositeType1.compare(byteBuffer40, byteBuffer44);
        compositeType0.validate(byteBuffer40);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator47 = compositeType0.indexComparator;
        java.lang.Class<?> wildcardClass48 = compositeType0.getClass();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(compositeType2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(indexInfoComparator47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        comparators.CompositeType compositeType11 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray12 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList13 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13, byteBufferArray12);
        java.lang.String str15 = compositeType11.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator16 = compositeType11.indexComparator;
        comparators.CompositeType compositeType17 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray18 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList19 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19, byteBufferArray18);
        java.lang.String str21 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType11.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType17);
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.lang.String str28 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator34 = compositeType29.indexComparator;
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator40 = compositeType29.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType35);
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray42 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList43 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43, byteBufferArray42);
        java.lang.String str45 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.lang.String str46 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.util.AbstractList[] abstractListArray48 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray49 = (java.util.AbstractList<java.nio.ByteBuffer>[]) abstractListArray48;
        byteBufferListArray49[0] = byteBufferList25;
        byteBufferListArray49[1] = byteBufferList43;
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray54 = composite9.toArray(byteBufferListArray49);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        java.util.List<java.lang.Object> objList61 = comparators.Composite.deserialize(byteArray59);
        boolean boolean62 = composite9.equals((java.lang.Object) objList61);
        comparators.Composite composite63 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int64 = comparators.Composite.compare(composite9, composite63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(compositeType11);
        org.junit.Assert.assertNotNull(byteBufferArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(indexInfoComparator16);
        org.junit.Assert.assertNotNull(compositeType17);
        org.junit.Assert.assertNotNull(byteBufferArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(indexInfoComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteBufferComparator40);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteBufferArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(abstractListArray48);
        org.junit.Assert.assertNotNull(byteBufferListArray49);
        org.junit.Assert.assertNotNull(byteBufferListArray54);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(objList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        boolean boolean19 = comparators.Composite.isValidType((java.lang.Object) compositeSerializer0);
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        org.apache.cassandra.db.IColumn[] iColumnArray25 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList26 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList26, iColumnArray25);
        java.lang.String str28 = compositeType20.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList26);
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator34 = compositeType29.indexComparator;
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator40 = compositeType29.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType35);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator41 = compositeType20.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator42 = compositeType20.reversed();
        comparators.hector.CompositeListSerializer compositeListSerializer43 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        java.util.List<java.lang.Object> objList50 = comparators.Composite.deserialize(byteArray48);
        byte[] byteArray51 = comparators.Composite.serialize(objList50);
        java.util.stream.Stream<java.lang.Object> objStream52 = objList50.parallelStream();
        comparators.Composite composite53 = new comparators.Composite(objList50);
        byte[] byteArray54 = compositeListSerializer43.toBytes(objList50);
        int int56 = compositeListSerializer43.computeInitialHashSize((int) ' ');
        comparators.hector.CompositeListSerializer compositeListSerializer57 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType58 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray59 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList60 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60, byteBufferArray59);
        java.lang.String str62 = compositeType58.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator63 = compositeType58.indexComparator;
        comparators.CompositeType compositeType64 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray65 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList66 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList66, byteBufferArray65);
        java.lang.String str68 = compositeType64.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList66);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator69 = compositeType58.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType64);
        comparators.CompositeType compositeType70 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray71 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList72 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList72, byteBufferArray71);
        java.lang.String str74 = compositeType70.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList72);
        java.lang.String str75 = compositeType64.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList72);
        java.util.List<java.util.List<java.lang.Object>> objListList76 = compositeListSerializer57.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList72);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet77 = compositeListSerializer43.toBytesSet(objListList76);
        java.lang.String str78 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferSet77);
        java.util.List<comparators.Composite> compositeList79 = compositeSerializer0.fromBytesSet(byteBufferSet77);
        int int81 = compositeSerializer0.computeInitialHashSize(103);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(iColumnArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(indexInfoComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteBufferComparator40);
        org.junit.Assert.assertNotNull(byteBufferComparator41);
        org.junit.Assert.assertNotNull(byteBufferComparator42);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(objList50);
        org.junit.Assert.assertNull(byteArray51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNull(byteArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 43 + "'", int56 == 43);
        org.junit.Assert.assertNotNull(compositeType58);
        org.junit.Assert.assertNotNull(byteBufferArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(indexInfoComparator63);
        org.junit.Assert.assertNotNull(compositeType64);
        org.junit.Assert.assertNotNull(byteBufferArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteBufferComparator69);
        org.junit.Assert.assertNotNull(compositeType70);
        org.junit.Assert.assertNotNull(byteBufferArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(objListList76);
        org.junit.Assert.assertNotNull(byteBufferSet77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(compositeList79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 138 + "'", int81 == 138);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        java.util.List<java.lang.Object> objList9 = comparators.Composite.deserialize(byteArray7);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray14);
        byte[] byteArray17 = comparators.Composite.serialize(objList16);
        java.util.stream.Stream<java.lang.Object> objStream18 = objList16.parallelStream();
        comparators.Composite composite19 = new comparators.Composite(objList16);
        java.util.RandomAccess[] randomAccessArray20 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray21 = composite19.toArray(randomAccessArray20);
        comparators.Composite composite23 = composite19.addLong((long) 67);
        byte[] byteArray24 = composite23.serialize();
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray24);
        int int26 = comparators.Composite.compare(byteArray7, byteArray24);
        comparators.hector.CompositeSerializer compositeSerializer27 = new comparators.hector.CompositeSerializer();
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray32 = new byte[] {};
        int int33 = comparators.Composite.compare(byteArray31, byteArray32);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray32);
        byte[] byteArray35 = comparators.Composite.serialize(objList34);
        java.util.stream.Stream<java.lang.Object> objStream36 = objList34.parallelStream();
        comparators.Composite composite37 = new comparators.Composite(objList34);
        java.lang.Object[] objArray38 = composite37.toArray();
        int int39 = composite37.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream40 = composite37.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream41 = composite37.parallelStream();
        comparators.Composite composite43 = composite37.addBool(true);
        java.io.DataOutputStream dataOutputStream44 = composite37.out;
        byte[] byteArray45 = compositeSerializer27.toBytes(composite37);
        int int46 = comparators.Composite.compare(byteArray24, byteArray45);
        boolean boolean47 = comparators.Composite.validate(1, byteArray45);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray45);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        byte[] byteArray50 = comparators.Composite.serialize(objList48);
        boolean boolean52 = comparators.Composite.validate((int) (byte) 10, byteArray50, false);
        byte[] byteArray55 = null;
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray67 = new byte[] {};
        int int68 = comparators.Composite.compare(byteArray66, byteArray67);
        int int69 = comparators.Composite.compare(byteArray60, byteArray67);
        int int70 = comparators.Composite.compare((int) (byte) 1, byteArray55, 10, byteArray60);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray75 = new byte[] {};
        int int76 = comparators.Composite.compare(byteArray74, byteArray75);
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray81 = new byte[] {};
        int int82 = comparators.Composite.compare(byteArray80, byteArray81);
        int int83 = comparators.Composite.compare(byteArray74, byteArray81);
        java.util.List<java.lang.Object> objList84 = comparators.Composite.deserialize(byteArray81);
        int int85 = comparators.Composite.compare(byteArray60, byteArray81);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = comparators.Composite.compare((int) (byte) 0, byteArray50, 255, byteArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 259");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(randomAccessArray20);
        org.junit.Assert.assertNotNull(randomAccessArray21);
        org.junit.Assert.assertNotNull(composite23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(composite43);
        org.junit.Assert.assertNotNull(dataOutputStream44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(objList84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        int int48 = composite43.startOffset;
        int int49 = composite29.compareTo(composite43);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        java.util.RandomAccess[] randomAccessArray60 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray61 = composite59.toArray(randomAccessArray60);
        comparators.Composite composite63 = composite59.addLong((long) 67);
        byte[] byteArray64 = composite63.serialize();
        java.util.List<java.lang.Object> objList65 = comparators.Composite.deserialize(byteArray64);
        comparators.Composite composite66 = new comparators.Composite(byteArray64);
        boolean boolean67 = composite43.equals((java.lang.Object) byteArray64);
        java.util.List<java.lang.Object> objList68 = compositeListSerializer0.fromBytes(byteArray64);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        java.util.List<java.lang.Object> objList75 = comparators.Composite.deserialize(byteArray73);
        byte[] byteArray76 = comparators.Composite.serialize(objList75);
        java.util.stream.Stream<java.lang.Object> objStream77 = objList75.parallelStream();
        comparators.Composite composite78 = new comparators.Composite(objList75);
        java.util.RandomAccess[] randomAccessArray79 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray80 = composite78.toArray(randomAccessArray79);
        comparators.Composite composite82 = composite78.addLong((long) 67);
        byte[] byteArray83 = composite82.serialize();
        java.util.List<java.lang.Object> objList84 = comparators.Composite.deserialize(byteArray83);
        byte[] byteArray85 = compositeListSerializer0.toBytes(objList84);
        byte[] byteArray86 = comparators.Composite.serialize(objList84);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(randomAccessArray60);
        org.junit.Assert.assertNotNull(randomAccessArray61);
        org.junit.Assert.assertNotNull(composite63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objList68);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(objList75);
        org.junit.Assert.assertNull(byteArray76);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(randomAccessArray79);
        org.junit.Assert.assertNotNull(randomAccessArray80);
        org.junit.Assert.assertNotNull(composite82);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList84);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        boolean boolean9 = comparators.Composite.validate(80, byteArray5, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        comparators.Composite composite0 = new comparators.Composite();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        int int15 = composite0.compareTo(composite10);
        int int16 = composite0.startOffset;
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        comparators.Composite composite32 = composite26.addBool(true);
        java.util.Iterator<java.lang.Object> objItor33 = composite26.iterator();
        comparators.Composite composite34 = new comparators.Composite();
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.lang.Object[] objArray45 = composite44.toArray();
        int int46 = composite44.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream47 = composite44.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream48 = composite44.parallelStream();
        int int49 = composite34.compareTo(composite44);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray65 = new byte[] {};
        int int66 = comparators.Composite.compare(byteArray64, byteArray65);
        boolean boolean68 = comparators.Composite.validate((int) ' ', byteArray65, true);
        boolean boolean69 = composite59.contains((java.lang.Object) boolean68);
        java.util.stream.Stream<java.lang.Object> objStream70 = composite59.parallelStream();
        boolean boolean71 = composite34.contains((java.lang.Object) composite59);
        boolean boolean72 = composite26.addAll((java.util.Collection<java.lang.Object>) composite34);
        int int73 = composite34.startOffset;
        java.lang.String str74 = composite34.toString();
        int int75 = comparators.Composite.compare(composite0, composite34);
        comparators.Composite composite77 = composite34.addLong((long) (short) 10);
        boolean boolean78 = composite34.isEmpty();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(composite32);
        org.junit.Assert.assertNotNull(objItor33);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(composite77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        comparators.Composite composite17 = composite15.addLong((long) 6);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.util.RandomAccess[] randomAccessArray28 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray29 = composite27.toArray(randomAccessArray28);
        comparators.Composite composite31 = composite27.addLong((long) 67);
        byte[] byteArray32 = composite31.serialize();
        comparators.Composite composite33 = composite15.addBytes(byteArray32);
        comparators.Composite composite35 = composite15.addLong((long) (byte) 100);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(byteArray40);
        byte[] byteArray43 = comparators.Composite.serialize(objList42);
        java.util.stream.Stream<java.lang.Object> objStream44 = objList42.parallelStream();
        comparators.Composite composite45 = new comparators.Composite(objList42);
        java.lang.Object[] objArray46 = composite45.toArray();
        int int47 = composite45.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream48 = composite45.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream49 = composite45.parallelStream();
        int int50 = composite45.startOffset;
        int int51 = composite45.startOffset;
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray56 = new byte[] {};
        int int57 = comparators.Composite.compare(byteArray55, byteArray56);
        java.util.List<java.lang.Object> objList58 = comparators.Composite.deserialize(byteArray56);
        byte[] byteArray59 = comparators.Composite.serialize(objList58);
        java.util.stream.Stream<java.lang.Object> objStream60 = objList58.parallelStream();
        comparators.Composite composite61 = new comparators.Composite(objList58);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray67 = new byte[] {};
        int int68 = comparators.Composite.compare(byteArray66, byteArray67);
        boolean boolean70 = comparators.Composite.validate((int) ' ', byteArray67, true);
        boolean boolean71 = composite61.contains((java.lang.Object) boolean70);
        java.util.Spliterator<java.lang.Object> objSpliterator72 = composite61.spliterator();
        boolean boolean73 = composite45.containsAll((java.util.Collection<java.lang.Object>) composite61);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray74 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray75 = composite45.toArray(compositeListSerializerArray74);
        comparators.Composite composite76 = new comparators.Composite((java.lang.Object[]) compositeListSerializerArray74);
        byte[] byteArray77 = comparators.Composite.serialize((java.lang.Object[]) compositeListSerializerArray74);
        byte[] byteArray78 = comparators.Composite.serialize((java.lang.Object[]) compositeListSerializerArray74);
        boolean boolean79 = composite35.contains((java.lang.Object) byteArray78);
        java.util.UUID uUID80 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite81 = composite35.addTimeUUID(uUID80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(randomAccessArray28);
        org.junit.Assert.assertNotNull(randomAccessArray29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(objList42);
        org.junit.Assert.assertNull(byteArray43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(objList58);
        org.junit.Assert.assertNull(byteArray59);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(objSpliterator72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray74);
        org.junit.Assert.assertNotNull(compositeListSerializerArray75);
        org.junit.Assert.assertNull(byteArray77);
        org.junit.Assert.assertNull(byteArray78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        comparators.Composite composite37 = composite10.addBytes(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = composite37.serializeToByteBuffer();
        compositeType0.validate(byteBuffer38);
        boolean boolean40 = comparators.Composite.validate(byteBuffer38);
        boolean boolean41 = comparators.Composite.validate(byteBuffer38);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.nio.ByteBuffer byteBuffer79 = composite78.serializeToByteBuffer();
        int int80 = comparators.Composite.compare(byteBuffer38, byteBuffer79);
        boolean boolean82 = comparators.Composite.validate(byteBuffer79, false);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer22 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator28 = compositeType23.indexComparator;
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator34 = compositeType23.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.lang.String str40 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.List<java.util.List<java.lang.Object>> objListList41 = compositeListSerializer22.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList37);
        java.util.List<java.nio.ByteBuffer> byteBufferList42 = compositeListSerializer0.toBytesList(objListList41);
        comparators.hector.CompositeListSerializer compositeListSerializer43 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType44 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray45 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList46 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList46, byteBufferArray45);
        java.lang.String str48 = compositeType44.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList46);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator49 = compositeType44.indexComparator;
        comparators.CompositeType compositeType50 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray51 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList52 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52, byteBufferArray51);
        java.lang.String str54 = compositeType50.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator55 = compositeType44.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType50);
        comparators.CompositeType compositeType56 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray57 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList58 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58, byteBufferArray57);
        java.lang.String str60 = compositeType56.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58);
        java.lang.String str61 = compositeType50.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList58);
        java.util.List<java.util.List<java.lang.Object>> objListList62 = compositeListSerializer43.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList58);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet63 = compositeListSerializer0.toBytesSet(objListList62);
        comparators.hector.CompositeSerializer compositeSerializer65 = new comparators.hector.CompositeSerializer();
        byte[] byteArray69 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray70 = new byte[] {};
        int int71 = comparators.Composite.compare(byteArray69, byteArray70);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        int int78 = comparators.Composite.compare(byteArray69, byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite composite80 = compositeSerializer65.fromBytes(byteArray76);
        boolean boolean82 = comparators.Composite.validate((int) 'a', byteArray76, true);
        java.util.List<java.lang.Object> objList83 = compositeListSerializer0.fromBytes(byteArray76);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(indexInfoComparator28);
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteBufferComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(objListList41);
        org.junit.Assert.assertNotNull(byteBufferList42);
        org.junit.Assert.assertNotNull(compositeType44);
        org.junit.Assert.assertNotNull(byteBufferArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(indexInfoComparator49);
        org.junit.Assert.assertNotNull(compositeType50);
        org.junit.Assert.assertNotNull(byteBufferArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteBufferComparator55);
        org.junit.Assert.assertNotNull(compositeType56);
        org.junit.Assert.assertNotNull(byteBufferArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(objListList62);
        org.junit.Assert.assertNotNull(byteBufferSet63);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(objList83);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.util.RandomAccess[] randomAccessArray11 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray12 = composite10.toArray(randomAccessArray11);
        comparators.Composite composite14 = composite10.addLong((long) 67);
        byte[] byteArray15 = composite14.serialize();
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray15);
        comparators.Composite composite17 = new comparators.Composite(byteArray15);
        comparators.Composite composite18 = compositeSerializer0.fromBytes(byteArray15);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        comparators.CompositeType compositeType30 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray31 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList32 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32, byteBufferArray31);
        java.lang.String str34 = compositeType30.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator35 = compositeType30.indexComparator;
        comparators.CompositeType compositeType36 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray37 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList38 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38, byteBufferArray37);
        java.lang.String str40 = compositeType36.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator41 = compositeType30.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType36);
        comparators.CompositeType compositeType42 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray43 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList44 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44, byteBufferArray43);
        java.lang.String str46 = compositeType42.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44);
        java.lang.String str47 = compositeType36.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44);
        comparators.CompositeType compositeType48 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray49 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList50 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList50, byteBufferArray49);
        java.lang.String str52 = compositeType48.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList50);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator53 = compositeType48.indexComparator;
        comparators.CompositeType compositeType54 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray55 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList56 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList56, byteBufferArray55);
        java.lang.String str58 = compositeType54.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList56);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator59 = compositeType48.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType54);
        comparators.CompositeType compositeType60 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray61 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList62 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList62, byteBufferArray61);
        java.lang.String str64 = compositeType60.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList62);
        java.lang.String str65 = compositeType54.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList62);
        java.util.AbstractList[] abstractListArray67 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray68 = (java.util.AbstractList<java.nio.ByteBuffer>[]) abstractListArray67;
        byteBufferListArray68[0] = byteBufferList44;
        byteBufferListArray68[1] = byteBufferList62;
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray73 = composite28.toArray(byteBufferListArray68);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray78 = new byte[] {};
        int int79 = comparators.Composite.compare(byteArray77, byteArray78);
        java.util.List<java.lang.Object> objList80 = comparators.Composite.deserialize(byteArray78);
        boolean boolean81 = composite28.equals((java.lang.Object) objList80);
        java.io.DataOutputStream dataOutputStream82 = composite28.out;
        byte[] byteArray83 = compositeSerializer0.toBytes(composite28);
        composite28.startOffset = 63;
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(randomAccessArray12);
        org.junit.Assert.assertNotNull(composite14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(compositeType30);
        org.junit.Assert.assertNotNull(byteBufferArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(indexInfoComparator35);
        org.junit.Assert.assertNotNull(compositeType36);
        org.junit.Assert.assertNotNull(byteBufferArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteBufferComparator41);
        org.junit.Assert.assertNotNull(compositeType42);
        org.junit.Assert.assertNotNull(byteBufferArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(compositeType48);
        org.junit.Assert.assertNotNull(byteBufferArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(indexInfoComparator53);
        org.junit.Assert.assertNotNull(compositeType54);
        org.junit.Assert.assertNotNull(byteBufferArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteBufferComparator59);
        org.junit.Assert.assertNotNull(compositeType60);
        org.junit.Assert.assertNotNull(byteBufferArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(abstractListArray67);
        org.junit.Assert.assertNotNull(byteBufferListArray68);
        org.junit.Assert.assertNotNull(byteBufferListArray73);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(objList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(dataOutputStream82);
        org.junit.Assert.assertNull(byteArray83);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        comparators.Composite composite36 = composite9.addBytes(byteArray34);
        java.util.List<java.lang.Object> objList37 = comparators.Composite.deserialize(byteArray34);
        comparators.Composite composite38 = new comparators.Composite(objList37);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray45 = new byte[] {};
        int int46 = comparators.Composite.compare(byteArray44, byteArray45);
        boolean boolean48 = comparators.Composite.validate((int) ' ', byteArray45, true);
        boolean boolean49 = comparators.Composite.validate((int) (short) 0, byteArray45);
        boolean boolean50 = composite38.contains((java.lang.Object) boolean49);
        java.io.DataOutputStream dataOutputStream51 = composite38.out;
        int int52 = composite38.startOffset;
        java.util.UUID uUID53 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite54 = composite38.addLexicalUUID(uUID53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(objList37);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(dataOutputStream51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        byte[] byteArray38 = null;
        comparators.Composite composite39 = new comparators.Composite(byteArray38);
        boolean boolean40 = composite25.containsAll((java.util.Collection<java.lang.Object>) composite39);
        java.lang.CharSequence[] charSequenceArray41 = new java.lang.CharSequence[] {};
        java.lang.CharSequence[] charSequenceArray42 = composite39.toArray(charSequenceArray41);
        java.lang.Object[] objArray43 = composite39.toArray();
        byte[] byteArray44 = comparators.Composite.serialize(objArray43);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(charSequenceArray41);
        org.junit.Assert.assertNotNull(charSequenceArray42);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNull(byteArray44);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        comparators.hector.CompositeListSerializer compositeListSerializer19 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator25 = compositeType20.indexComparator;
        comparators.CompositeType compositeType26 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray27 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList28 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28, byteBufferArray27);
        java.lang.String str30 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType20.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType26);
        comparators.CompositeType compositeType32 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray33 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList34 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34, byteBufferArray33);
        java.lang.String str36 = compositeType32.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34);
        java.lang.String str37 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34);
        java.util.List<java.util.List<java.lang.Object>> objListList38 = compositeListSerializer19.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList34);
        comparators.hector.CompositeListSerializer compositeListSerializer39 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator45 = compositeType40.indexComparator;
        comparators.CompositeType compositeType46 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray47 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList48 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48, byteBufferArray47);
        java.lang.String str50 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator51 = compositeType40.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType46);
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray53 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList54 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54, byteBufferArray53);
        java.lang.String str56 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        java.lang.String str57 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        java.util.List<java.util.List<java.lang.Object>> objListList58 = compositeListSerializer39.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList54);
        int int60 = compositeListSerializer39.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer61 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType62 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray63 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList64 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64, byteBufferArray63);
        java.lang.String str66 = compositeType62.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator67 = compositeType62.indexComparator;
        comparators.CompositeType compositeType68 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray69 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList70 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList70, byteBufferArray69);
        java.lang.String str72 = compositeType68.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList70);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator73 = compositeType62.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType68);
        comparators.CompositeType compositeType74 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray75 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList76 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList76, byteBufferArray75);
        java.lang.String str78 = compositeType74.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList76);
        java.lang.String str79 = compositeType68.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList76);
        java.util.List<java.util.List<java.lang.Object>> objListList80 = compositeListSerializer61.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList76);
        java.util.List<java.nio.ByteBuffer> byteBufferList81 = compositeListSerializer39.toBytesList(objListList80);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet82 = compositeListSerializer19.toBytesSet(objListList80);
        java.util.List<comparators.Composite> compositeList83 = compositeSerializer0.fromBytesSet(byteBufferSet82);
        int int85 = compositeSerializer0.computeInitialHashSize(8);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexInfoComparator25);
        org.junit.Assert.assertNotNull(compositeType26);
        org.junit.Assert.assertNotNull(byteBufferArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(compositeType32);
        org.junit.Assert.assertNotNull(byteBufferArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(objListList38);
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(indexInfoComparator45);
        org.junit.Assert.assertNotNull(compositeType46);
        org.junit.Assert.assertNotNull(byteBufferArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteBufferComparator51);
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(objListList58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 6 + "'", int60 == 6);
        org.junit.Assert.assertNotNull(compositeType62);
        org.junit.Assert.assertNotNull(byteBufferArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(indexInfoComparator67);
        org.junit.Assert.assertNotNull(compositeType68);
        org.junit.Assert.assertNotNull(byteBufferArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(byteBufferComparator73);
        org.junit.Assert.assertNotNull(compositeType74);
        org.junit.Assert.assertNotNull(byteBufferArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(objListList80);
        org.junit.Assert.assertNotNull(byteBufferList81);
        org.junit.Assert.assertNotNull(byteBufferSet82);
        org.junit.Assert.assertNotNull(compositeList83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 11 + "'", int85 == 11);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MINIMUM;
        int int1 = placeholder0.type;
        placeholder0.type = (byte) 100;
        placeholder0.type = (short) 100;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        java.lang.String str8 = placeholder0.toString();
        java.lang.String str9 = placeholder0.toString();
        org.junit.Assert.assertNotNull(placeholder0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Placeholder(100)" + "'", str8, "Placeholder(100)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Placeholder(100)" + "'", str9, "Placeholder(100)");
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        int int13 = composite10.startOffset;
        byte[] byteArray14 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        comparators.Composite composite30 = composite24.addBool(true);
        java.util.Iterator<java.lang.Object> objItor31 = composite24.iterator();
        comparators.Composite composite33 = composite24.addReal((java.lang.Double) 100.0d);
        comparators.Composite composite35 = composite33.addLong((long) '#');
        byte[] byteArray36 = compositeSerializer0.toBytes(composite35);
        byte[] byteArray37 = null;
        comparators.Composite composite38 = compositeSerializer0.fromBytes(byteArray37);
        comparators.Composite composite39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer40 = compositeSerializer0.toByteBuffer(composite39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[67, 77, 80, 1, 2, 1, 0, 4, 64, 89, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 35, 0]");
        org.junit.Assert.assertNotNull(composite38);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray28 = comparators.Composite.serialize(objList27);
        java.util.stream.Stream<java.lang.Object> objStream29 = objList27.parallelStream();
        comparators.Composite composite30 = new comparators.Composite(objList27);
        java.lang.Object[] objArray31 = composite30.toArray();
        int int32 = composite30.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream33 = composite30.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream34 = composite30.parallelStream();
        comparators.Composite composite36 = composite30.addBool(true);
        java.io.DataOutputStream dataOutputStream37 = composite30.out;
        composite9.out = dataOutputStream37;
        byte[] byteArray39 = composite9.serialize();
        java.io.DataOutputStream dataOutputStream40 = composite9.out;
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray45 = new byte[] {};
        int int46 = comparators.Composite.compare(byteArray44, byteArray45);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray45);
        byte[] byteArray48 = comparators.Composite.serialize(objList47);
        java.util.stream.Stream<java.lang.Object> objStream49 = objList47.parallelStream();
        comparators.Composite composite50 = new comparators.Composite(objList47);
        java.util.RandomAccess[] randomAccessArray51 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray52 = composite50.toArray(randomAccessArray51);
        comparators.Composite composite54 = composite50.addLong((long) 67);
        comparators.Composite composite56 = composite54.addBool(true);
        comparators.Composite composite58 = composite54.addLong((long) 2);
        java.io.ByteArrayOutputStream byteArrayOutputStream59 = composite58.byteStream;
        composite9.byteStream = byteArrayOutputStream59;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(dataOutputStream37);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNull(byteArray48);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(randomAccessArray51);
        org.junit.Assert.assertNotNull(randomAccessArray52);
        org.junit.Assert.assertNotNull(composite54);
        org.junit.Assert.assertNotNull(composite56);
        org.junit.Assert.assertNotNull(composite58);
        org.junit.Assert.assertNotNull(byteArrayOutputStream59);
// flaky:         org.junit.Assert.assertEquals(byteArrayOutputStream59.toString(), "CMP\001\003\000\000\000\000\000\000\000C\002\001\003\000\000\000\000\000\000\000\002\000");
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        int int1 = placeholder0.type;
        placeholder0.type = ' ';
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray9 = new byte[] {};
        int int10 = comparators.Composite.compare(byteArray8, byteArray9);
        java.util.List<java.lang.Object> objList11 = comparators.Composite.deserialize(byteArray9);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        java.util.stream.Stream<java.lang.Object> objStream20 = objList18.parallelStream();
        comparators.Composite composite21 = new comparators.Composite(objList18);
        java.util.RandomAccess[] randomAccessArray22 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray23 = composite21.toArray(randomAccessArray22);
        comparators.Composite composite25 = composite21.addLong((long) 67);
        byte[] byteArray26 = composite25.serialize();
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray26);
        int int28 = comparators.Composite.compare(byteArray9, byteArray26);
        boolean boolean29 = comparators.Composite.validate((int) (short) -1, byteArray9);
        boolean boolean30 = placeholder0.equals((java.lang.Object) (short) -1);
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 100 + "'", int1 == 100);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(objList11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(randomAccessArray22);
        org.junit.Assert.assertNotNull(randomAccessArray23);
        org.junit.Assert.assertNotNull(composite25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        comparators.Composite composite17 = composite15.addLong((long) 6);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.util.RandomAccess[] randomAccessArray28 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray29 = composite27.toArray(randomAccessArray28);
        comparators.Composite composite31 = composite27.addLong((long) 67);
        byte[] byteArray32 = composite31.serialize();
        comparators.Composite composite33 = composite15.addBytes(byteArray32);
        comparators.Composite composite34 = new comparators.Composite(byteArray32);
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.lang.Object[] objArray45 = composite44.toArray();
        int int46 = composite44.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream47 = composite44.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream48 = composite44.parallelStream();
        int int49 = composite44.startOffset;
        composite44.clear();
        boolean boolean52 = composite44.equals((java.lang.Object) 1L);
        comparators.Composite composite54 = composite44.addLong(0L);
        comparators.Composite composite56 = composite54.addUTF8("Placeholder(6)");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean57 = composite34.removeAll((java.util.Collection<java.lang.Object>) composite56);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(randomAccessArray28);
        org.junit.Assert.assertNotNull(randomAccessArray29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(composite54);
        org.junit.Assert.assertNotNull(composite56);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        byte[] byteArray14 = composite13.serialize();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        comparators.Composite composite30 = composite24.addBool(true);
        java.util.Iterator<java.lang.Object> objItor31 = composite24.iterator();
        comparators.Composite composite32 = new comparators.Composite();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite32.compareTo(composite42);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        boolean boolean66 = comparators.Composite.validate((int) ' ', byteArray63, true);
        boolean boolean67 = composite57.contains((java.lang.Object) boolean66);
        java.util.stream.Stream<java.lang.Object> objStream68 = composite57.parallelStream();
        boolean boolean69 = composite32.contains((java.lang.Object) composite57);
        boolean boolean70 = composite24.addAll((java.util.Collection<java.lang.Object>) composite32);
        int int71 = composite32.startOffset;
        boolean boolean72 = composite13.add((java.lang.Object) composite32);
        comparators.Composite composite74 = composite32.addUTF8("434d500103000000000000004300");
        comparators.Composite composite75 = new comparators.Composite();
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        java.util.List<java.lang.Object> objList82 = comparators.Composite.deserialize(byteArray80);
        byte[] byteArray83 = comparators.Composite.serialize(objList82);
        java.util.stream.Stream<java.lang.Object> objStream84 = objList82.parallelStream();
        comparators.Composite composite85 = new comparators.Composite(objList82);
        java.lang.Object[] objArray86 = composite85.toArray();
        int int87 = composite85.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream88 = composite85.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream89 = composite85.parallelStream();
        int int90 = composite75.compareTo(composite85);
        int int91 = composite75.size();
        byte[] byteArray92 = composite75.serialize();
        byte[] byteArray93 = composite75.bytes;
        boolean boolean94 = composite74.contains((java.lang.Object) byteArray93);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(objList82);
        org.junit.Assert.assertNull(byteArray83);
        org.junit.Assert.assertNotNull(objStream84);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(objStream88);
        org.junit.Assert.assertNotNull(objStream89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNull(byteArray92);
        org.junit.Assert.assertNull(byteArray93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        comparators.Composite composite34 = composite28.addBool(true);
        comparators.Composite composite36 = composite34.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream37 = composite34.byteStream;
        java.nio.ByteBuffer byteBuffer38 = compositeSerializer0.toByteBuffer(composite34);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        java.util.RandomAccess[] randomAccessArray49 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray50 = composite48.toArray(randomAccessArray49);
        comparators.Composite composite52 = composite48.addLong((long) 67);
        comparators.Composite composite54 = composite52.addBool(true);
        java.util.Iterator<java.lang.Object> objItor55 = composite52.iterator();
        java.nio.ByteBuffer byteBuffer56 = composite52.serializeToByteBuffer();
        java.nio.ByteBuffer byteBuffer57 = compositeSerializer0.toByteBuffer(composite52);
        boolean boolean58 = comparators.Composite.validate(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArrayOutputStream37);
        org.junit.Assert.assertEquals(byteArrayOutputStream37.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(randomAccessArray49);
        org.junit.Assert.assertNotNull(randomAccessArray50);
        org.junit.Assert.assertNotNull(composite52);
        org.junit.Assert.assertNotNull(composite54);
        org.junit.Assert.assertNotNull(objItor55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        comparators.Composite composite37 = composite10.addBytes(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = composite37.serializeToByteBuffer();
        compositeType0.validate(byteBuffer38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteBuffer38);
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.nio.ByteBuffer byteBuffer79 = composite78.serializeToByteBuffer();
        compositeType41.validate(byteBuffer79);
        int int81 = comparators.Composite.compare(byteBuffer38, byteBuffer79);
        boolean boolean83 = comparators.Composite.validate(byteBuffer38, true);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (short) 1;
        java.lang.String str3 = placeholder0.toString();
        boolean boolean5 = placeholder0.equals((java.lang.Object) 10L);
        java.lang.String str6 = placeholder0.toString();
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray12 = new byte[] {};
        int int13 = comparators.Composite.compare(byteArray11, byteArray12);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray12);
        byte[] byteArray15 = comparators.Composite.serialize(objList14);
        java.util.stream.Stream<java.lang.Object> objStream16 = objList14.parallelStream();
        comparators.Composite composite17 = new comparators.Composite(objList14);
        java.lang.Object[] objArray18 = composite17.toArray();
        int int19 = composite17.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream20 = composite17.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream21 = composite17.parallelStream();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream35 = composite31.parallelStream();
        int int36 = composite31.startOffset;
        int int37 = composite17.compareTo(composite31);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        comparators.Composite composite44 = composite17.addBytes(byteArray42);
        java.nio.ByteBuffer byteBuffer45 = composite44.serializeToByteBuffer();
        compositeType7.validate(byteBuffer45);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteBuffer45);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteBuffer45);
        comparators.Composite composite49 = new comparators.Composite(objList48);
        comparators.Composite composite50 = new comparators.Composite(objList48);
        boolean boolean51 = placeholder0.equals((java.lang.Object) composite50);
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Placeholder(1)" + "'", str3, "Placeholder(1)");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Placeholder(1)" + "'", str6, "Placeholder(1)");
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNull(byteArray15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(composite44);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer22 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator28 = compositeType23.indexComparator;
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator34 = compositeType23.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.lang.String str40 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.List<java.util.List<java.lang.Object>> objListList41 = compositeListSerializer22.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList37);
        java.util.List<java.nio.ByteBuffer> byteBufferList42 = compositeListSerializer0.toBytesList(objListList41);
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        comparators.CompositeType compositeType44 = new comparators.CompositeType();
        comparators.CompositeType compositeType45 = comparators.CompositeType.instance;
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        java.util.List<java.lang.Object> objList52 = comparators.Composite.deserialize(byteArray50);
        byte[] byteArray53 = comparators.Composite.serialize(objList52);
        java.util.stream.Stream<java.lang.Object> objStream54 = objList52.parallelStream();
        comparators.Composite composite55 = new comparators.Composite(objList52);
        java.lang.Object[] objArray56 = composite55.toArray();
        int int57 = composite55.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream58 = composite55.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream59 = composite55.parallelStream();
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(byteArray64);
        byte[] byteArray67 = comparators.Composite.serialize(objList66);
        java.util.stream.Stream<java.lang.Object> objStream68 = objList66.parallelStream();
        comparators.Composite composite69 = new comparators.Composite(objList66);
        java.lang.Object[] objArray70 = composite69.toArray();
        int int71 = composite69.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream72 = composite69.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream73 = composite69.parallelStream();
        int int74 = composite69.startOffset;
        int int75 = composite55.compareTo(composite69);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        comparators.Composite composite82 = composite55.addBytes(byteArray80);
        java.nio.ByteBuffer byteBuffer83 = composite82.serializeToByteBuffer();
        compositeType45.validate(byteBuffer83);
        boolean boolean85 = comparators.Composite.validate(byteBuffer83);
        comparators.Composite composite86 = new comparators.Composite(byteBuffer83);
        java.nio.ByteBuffer byteBuffer87 = null;
        int int88 = compositeType44.compare(byteBuffer83, byteBuffer87);
        compositeType43.validate(byteBuffer83);
        java.util.List<java.lang.Object> objList90 = comparators.Composite.deserialize(byteBuffer83);
        java.nio.ByteBuffer byteBuffer91 = compositeListSerializer0.toByteBuffer(objList90);
        java.nio.ByteBuffer byteBuffer92 = comparators.Composite.serializeToByteBuffer(objList90);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(indexInfoComparator28);
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteBufferComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(objListList41);
        org.junit.Assert.assertNotNull(byteBufferList42);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(compositeType45);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(objList52);
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(objList66);
        org.junit.Assert.assertNull(byteArray67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(composite82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(objList90);
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertNotNull(byteBuffer92);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 11;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj83 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.len = 58;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj88 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        comparators.CompositeType compositeType19 = comparators.CompositeType.instance;
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        int int48 = composite43.startOffset;
        int int49 = composite29.compareTo(composite43);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        comparators.Composite composite56 = composite29.addBytes(byteArray54);
        java.nio.ByteBuffer byteBuffer57 = composite56.serializeToByteBuffer();
        compositeType19.validate(byteBuffer57);
        boolean boolean59 = comparators.Composite.validate(byteBuffer57);
        boolean boolean60 = comparators.Composite.validate(byteBuffer57);
        comparators.Composite composite61 = compositeSerializer0.fromByteBuffer(byteBuffer57);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        java.util.List<java.lang.Object> objList68 = comparators.Composite.deserialize(byteArray66);
        byte[] byteArray69 = comparators.Composite.serialize(objList68);
        java.util.stream.Stream<java.lang.Object> objStream70 = objList68.parallelStream();
        comparators.Composite composite71 = new comparators.Composite(objList68);
        java.util.RandomAccess[] randomAccessArray72 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray73 = composite71.toArray(randomAccessArray72);
        comparators.Composite composite75 = composite71.addLong((long) 67);
        byte[] byteArray76 = composite75.serialize();
        java.util.List<java.lang.Object> objList77 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite composite78 = new comparators.Composite(byteArray76);
        comparators.Composite composite79 = compositeSerializer0.fromBytes(byteArray76);
        java.nio.ByteBuffer byteBuffer80 = composite79.serializeToByteBuffer();
        java.io.DataOutputStream dataOutputStream81 = composite79.out;
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(composite56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(objList68);
        org.junit.Assert.assertNull(byteArray69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(randomAccessArray72);
        org.junit.Assert.assertNotNull(randomAccessArray73);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList77);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNull(dataOutputStream81);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(4);
        comparators.CompositeType compositeType22 = comparators.CompositeType.instance;
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        java.util.List<java.lang.Object> objList29 = comparators.Composite.deserialize(byteArray27);
        byte[] byteArray30 = comparators.Composite.serialize(objList29);
        java.util.stream.Stream<java.lang.Object> objStream31 = objList29.parallelStream();
        comparators.Composite composite32 = new comparators.Composite(objList29);
        java.lang.Object[] objArray33 = composite32.toArray();
        int int34 = composite32.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream35 = composite32.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream36 = composite32.parallelStream();
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray41 = new byte[] {};
        int int42 = comparators.Composite.compare(byteArray40, byteArray41);
        java.util.List<java.lang.Object> objList43 = comparators.Composite.deserialize(byteArray41);
        byte[] byteArray44 = comparators.Composite.serialize(objList43);
        java.util.stream.Stream<java.lang.Object> objStream45 = objList43.parallelStream();
        comparators.Composite composite46 = new comparators.Composite(objList43);
        java.lang.Object[] objArray47 = composite46.toArray();
        int int48 = composite46.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream49 = composite46.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream50 = composite46.parallelStream();
        int int51 = composite46.startOffset;
        int int52 = composite32.compareTo(composite46);
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        comparators.Composite composite59 = composite32.addBytes(byteArray57);
        java.nio.ByteBuffer byteBuffer60 = composite59.serializeToByteBuffer();
        compositeType22.validate(byteBuffer60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteBuffer60);
        java.util.List<java.lang.Object> objList63 = comparators.Composite.deserialize(byteBuffer60);
        java.util.List<java.lang.Object> objList64 = compositeListSerializer0.fromByteBuffer(byteBuffer60);
        boolean boolean66 = comparators.Composite.validate(byteBuffer60, true);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(compositeType22);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(objList29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(objList43);
        org.junit.Assert.assertNull(byteArray44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(composite59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNotNull(objList63);
        org.junit.Assert.assertNotNull(objList64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        comparators.CompositeType compositeType5 = new comparators.CompositeType();
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray11 = new byte[] {};
        int int12 = comparators.Composite.compare(byteArray10, byteArray11);
        java.util.List<java.lang.Object> objList13 = comparators.Composite.deserialize(byteArray11);
        byte[] byteArray14 = comparators.Composite.serialize(objList13);
        java.util.stream.Stream<java.lang.Object> objStream15 = objList13.parallelStream();
        comparators.Composite composite16 = new comparators.Composite(objList13);
        java.lang.Object[] objArray17 = composite16.toArray();
        int int18 = composite16.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream19 = composite16.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream20 = composite16.parallelStream();
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray28 = comparators.Composite.serialize(objList27);
        java.util.stream.Stream<java.lang.Object> objStream29 = objList27.parallelStream();
        comparators.Composite composite30 = new comparators.Composite(objList27);
        java.lang.Object[] objArray31 = composite30.toArray();
        int int32 = composite30.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream33 = composite30.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream34 = composite30.parallelStream();
        int int35 = composite30.startOffset;
        int int36 = composite16.compareTo(composite30);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray41 = new byte[] {};
        int int42 = comparators.Composite.compare(byteArray40, byteArray41);
        comparators.Composite composite43 = composite16.addBytes(byteArray41);
        java.nio.ByteBuffer byteBuffer44 = composite43.serializeToByteBuffer();
        compositeType6.validate(byteBuffer44);
        boolean boolean46 = comparators.Composite.validate(byteBuffer44);
        comparators.Composite composite47 = new comparators.Composite(byteBuffer44);
        java.nio.ByteBuffer byteBuffer48 = null;
        int int49 = compositeType5.compare(byteBuffer44, byteBuffer48);
        comparators.Composite composite50 = new comparators.Composite(byteBuffer44);
        comparators.Composite composite51 = new comparators.Composite(byteBuffer44);
        comparators.Composite composite52 = new comparators.Composite(byteBuffer44);
        boolean boolean54 = comparators.Composite.validate(byteBuffer44, true);
        comparators.CompositeType compositeType55 = comparators.CompositeType.instance;
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray74 = new byte[] {};
        int int75 = comparators.Composite.compare(byteArray73, byteArray74);
        java.util.List<java.lang.Object> objList76 = comparators.Composite.deserialize(byteArray74);
        byte[] byteArray77 = comparators.Composite.serialize(objList76);
        java.util.stream.Stream<java.lang.Object> objStream78 = objList76.parallelStream();
        comparators.Composite composite79 = new comparators.Composite(objList76);
        java.lang.Object[] objArray80 = composite79.toArray();
        int int81 = composite79.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream82 = composite79.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream83 = composite79.parallelStream();
        int int84 = composite79.startOffset;
        int int85 = composite65.compareTo(composite79);
        byte[] byteArray89 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray90 = new byte[] {};
        int int91 = comparators.Composite.compare(byteArray89, byteArray90);
        comparators.Composite composite92 = composite65.addBytes(byteArray90);
        java.nio.ByteBuffer byteBuffer93 = composite92.serializeToByteBuffer();
        compositeType55.validate(byteBuffer93);
        int int95 = compositeType0.compare(byteBuffer44, byteBuffer93);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer97 = compositeType0.fromString("Placeholder(95)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(objList13);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(objStream19);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(composite43);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(compositeType55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertNull(byteArray77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(objStream82);
        org.junit.Assert.assertNotNull(objStream83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(composite92);
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        comparators.CompositeType compositeType12 = new comparators.CompositeType();
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray32 = new byte[] {};
        int int33 = comparators.Composite.compare(byteArray31, byteArray32);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray32);
        byte[] byteArray35 = comparators.Composite.serialize(objList34);
        java.util.stream.Stream<java.lang.Object> objStream36 = objList34.parallelStream();
        comparators.Composite composite37 = new comparators.Composite(objList34);
        java.lang.Object[] objArray38 = composite37.toArray();
        int int39 = composite37.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream40 = composite37.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream41 = composite37.parallelStream();
        int int42 = composite37.startOffset;
        int int43 = composite23.compareTo(composite37);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        comparators.Composite composite50 = composite23.addBytes(byteArray48);
        java.nio.ByteBuffer byteBuffer51 = composite50.serializeToByteBuffer();
        compositeType13.validate(byteBuffer51);
        boolean boolean53 = comparators.Composite.validate(byteBuffer51);
        comparators.Composite composite54 = new comparators.Composite(byteBuffer51);
        java.nio.ByteBuffer byteBuffer55 = null;
        int int56 = compositeType12.compare(byteBuffer51, byteBuffer55);
        comparators.Composite composite57 = new comparators.Composite(byteBuffer51);
        java.util.List<java.lang.Object> objList58 = compositeListSerializer0.fromByteBuffer(byteBuffer51);
        int int60 = compositeListSerializer0.computeInitialHashSize(0);
        java.util.List<java.nio.ByteBuffer> byteBufferList61 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.List<java.lang.Object>> objListList62 = compositeListSerializer0.fromBytesList(byteBufferList61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(composite50);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(objList58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray28 = comparators.Composite.serialize(objList27);
        java.util.stream.Stream<java.lang.Object> objStream29 = objList27.parallelStream();
        comparators.Composite composite30 = new comparators.Composite(objList27);
        java.lang.Object[] objArray31 = composite30.toArray();
        int int32 = composite30.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream33 = composite30.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream34 = composite30.parallelStream();
        comparators.Composite composite36 = composite30.addBool(true);
        java.io.DataOutputStream dataOutputStream37 = composite30.out;
        composite9.out = dataOutputStream37;
        byte[] byteArray39 = composite9.serialize();
        composite9.clear();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(dataOutputStream37);
        org.junit.Assert.assertNull(byteArray39);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        comparators.Composite composite0 = new comparators.Composite();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        int int15 = composite0.compareTo(composite10);
        int int16 = composite0.size();
        byte[] byteArray17 = composite0.serialize();
        byte[] byteArray18 = composite0.bytes;
        comparators.CompositeType compositeType19 = new comparators.CompositeType();
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator25 = compositeType20.indexComparator;
        comparators.CompositeType compositeType26 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray27 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList28 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28, byteBufferArray27);
        java.lang.String str30 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType20.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType26);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray36);
        byte[] byteArray39 = comparators.Composite.serialize(objList38);
        java.util.stream.Stream<java.lang.Object> objStream40 = objList38.parallelStream();
        comparators.Composite composite41 = new comparators.Composite(objList38);
        java.lang.Object[] objArray42 = composite41.toArray();
        int int43 = composite41.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream44 = composite41.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream45 = composite41.parallelStream();
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        java.util.List<java.lang.Object> objList52 = comparators.Composite.deserialize(byteArray50);
        byte[] byteArray53 = comparators.Composite.serialize(objList52);
        java.util.stream.Stream<java.lang.Object> objStream54 = objList52.parallelStream();
        comparators.Composite composite55 = new comparators.Composite(objList52);
        java.lang.Object[] objArray56 = composite55.toArray();
        int int57 = composite55.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream58 = composite55.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream59 = composite55.parallelStream();
        int int60 = composite55.startOffset;
        int int61 = composite41.compareTo(composite55);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        comparators.Composite composite68 = composite41.addBytes(byteArray66);
        java.nio.ByteBuffer byteBuffer69 = composite68.serializeToByteBuffer();
        compositeType26.validate(byteBuffer69);
        java.lang.String str71 = compositeType19.getString(byteBuffer69);
        java.util.List<java.lang.Object> objList72 = comparators.Composite.deserialize(byteBuffer69);
        boolean boolean73 = composite0.contains((java.lang.Object) byteBuffer69);
        boolean boolean75 = comparators.Composite.validate(byteBuffer69, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNull(byteArray18);
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexInfoComparator25);
        org.junit.Assert.assertNotNull(compositeType26);
        org.junit.Assert.assertNotNull(byteBufferArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(objList52);
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(composite68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(objList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        composite9.startOffset = (byte) 1;
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.hector.CompositeSerializer compositeSerializer17 = new comparators.hector.CompositeSerializer();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        comparators.Composite composite33 = composite27.addBool(true);
        java.io.DataOutputStream dataOutputStream34 = composite27.out;
        byte[] byteArray35 = compositeSerializer17.toBytes(composite27);
        comparators.CompositeType compositeType36 = comparators.CompositeType.instance;
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray41 = new byte[] {};
        int int42 = comparators.Composite.compare(byteArray40, byteArray41);
        java.util.List<java.lang.Object> objList43 = comparators.Composite.deserialize(byteArray41);
        byte[] byteArray44 = comparators.Composite.serialize(objList43);
        java.util.stream.Stream<java.lang.Object> objStream45 = objList43.parallelStream();
        comparators.Composite composite46 = new comparators.Composite(objList43);
        java.lang.Object[] objArray47 = composite46.toArray();
        int int48 = composite46.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream49 = composite46.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream50 = composite46.parallelStream();
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        java.util.List<java.lang.Object> objList57 = comparators.Composite.deserialize(byteArray55);
        byte[] byteArray58 = comparators.Composite.serialize(objList57);
        java.util.stream.Stream<java.lang.Object> objStream59 = objList57.parallelStream();
        comparators.Composite composite60 = new comparators.Composite(objList57);
        java.lang.Object[] objArray61 = composite60.toArray();
        int int62 = composite60.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream63 = composite60.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream64 = composite60.parallelStream();
        int int65 = composite60.startOffset;
        int int66 = composite46.compareTo(composite60);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray71 = new byte[] {};
        int int72 = comparators.Composite.compare(byteArray70, byteArray71);
        comparators.Composite composite73 = composite46.addBytes(byteArray71);
        java.nio.ByteBuffer byteBuffer74 = composite73.serializeToByteBuffer();
        compositeType36.validate(byteBuffer74);
        boolean boolean76 = comparators.Composite.validate(byteBuffer74);
        boolean boolean77 = comparators.Composite.validate(byteBuffer74);
        comparators.Composite composite78 = compositeSerializer17.fromByteBuffer(byteBuffer74);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray83 = new byte[] {};
        int int84 = comparators.Composite.compare(byteArray82, byteArray83);
        java.util.List<java.lang.Object> objList85 = comparators.Composite.deserialize(byteArray83);
        byte[] byteArray86 = comparators.Composite.serialize(objList85);
        java.util.stream.Stream<java.lang.Object> objStream87 = objList85.parallelStream();
        comparators.Composite composite88 = new comparators.Composite(objList85);
        java.util.RandomAccess[] randomAccessArray89 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray90 = composite88.toArray(randomAccessArray89);
        comparators.Composite composite92 = composite88.addLong((long) 67);
        byte[] byteArray93 = composite92.serialize();
        java.util.List<java.lang.Object> objList94 = comparators.Composite.deserialize(byteArray93);
        comparators.Composite composite95 = new comparators.Composite(byteArray93);
        comparators.Composite composite96 = compositeSerializer17.fromBytes(byteArray93);
        comparators.Composite composite97 = composite9.addBytes(byteArray93);
        java.lang.Object[] objArray98 = composite97.toArray();
        java.io.ByteArrayOutputStream byteArrayOutputStream99 = composite97.byteStream;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(dataOutputStream34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(objList43);
        org.junit.Assert.assertNull(byteArray44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(objList57);
        org.junit.Assert.assertNull(byteArray58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(composite73);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(objList85);
        org.junit.Assert.assertNull(byteArray86);
        org.junit.Assert.assertNotNull(objStream87);
        org.junit.Assert.assertNotNull(randomAccessArray89);
        org.junit.Assert.assertNotNull(randomAccessArray90);
        org.junit.Assert.assertNotNull(composite92);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList94);
        org.junit.Assert.assertNotNull(composite96);
        org.junit.Assert.assertNotNull(composite97);
        org.junit.Assert.assertNotNull(objArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray98), "[[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]]");
        org.junit.Assert.assertNull(byteArrayOutputStream99);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        composite9.clear();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream28 = null;
        composite25.byteStream = byteArrayOutputStream28;
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        int int41 = composite39.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream42 = composite39.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream43 = composite39.parallelStream();
        comparators.Composite composite45 = composite39.addBool(true);
        java.util.Iterator<java.lang.Object> objItor46 = composite39.iterator();
        int int47 = composite25.compareTo(composite39);
        boolean boolean48 = composite9.addAll((java.util.Collection<java.lang.Object>) composite25);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer49 = composite9.serializeToByteBuffer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(composite45);
        org.junit.Assert.assertNotNull(objItor46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        boolean boolean6 = comparators.Composite.isValidType((java.lang.Object) compositeType0);
        org.apache.cassandra.db.IColumn[] iColumnArray7 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList8 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList8, iColumnArray7);
        java.lang.String str10 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList8);
        comparators.CompositeType compositeType11 = new comparators.CompositeType();
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType12.validate(byteBuffer50);
        boolean boolean52 = comparators.Composite.validate(byteBuffer50);
        comparators.Composite composite53 = new comparators.Composite(byteBuffer50);
        java.nio.ByteBuffer byteBuffer54 = null;
        int int55 = compositeType11.compare(byteBuffer50, byteBuffer54);
        comparators.Composite composite56 = new comparators.Composite(byteBuffer50);
        comparators.Composite composite57 = new comparators.Composite(byteBuffer50);
        java.lang.String str58 = compositeType0.getString(byteBuffer50);
        boolean boolean59 = comparators.Composite.validate(byteBuffer50);
        boolean boolean61 = comparators.Composite.validate(byteBuffer50, false);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(iColumnArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.lang.Class<?> wildcardClass16 = composite9.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        comparators.Composite composite34 = composite28.addBool(true);
        comparators.Composite composite36 = composite34.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream37 = composite34.byteStream;
        java.nio.ByteBuffer byteBuffer38 = compositeSerializer0.toByteBuffer(composite34);
        byte[] byteArray39 = composite34.serialize();
        int int40 = composite34.size();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArrayOutputStream37);
        org.junit.Assert.assertEquals(byteArrayOutputStream37.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[67, 77, 80, 1, 2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 6, 0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.len = 58;
        byte[] byteArray88 = compositeTypeIterator80.bytes;
        comparators.Composite composite89 = null;
        compositeTypeIterator80.collection = composite89;
        int int91 = compositeTypeIterator80.len;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 58 + "'", int91 == 58);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        java.util.stream.Stream<java.lang.Object> objStream20 = objList18.parallelStream();
        comparators.Composite composite21 = new comparators.Composite(objList18);
        java.lang.Object[] objArray22 = composite21.toArray();
        int int23 = composite21.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream24 = composite21.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream25 = composite21.parallelStream();
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray30);
        byte[] byteArray33 = comparators.Composite.serialize(objList32);
        java.util.stream.Stream<java.lang.Object> objStream34 = objList32.parallelStream();
        comparators.Composite composite35 = new comparators.Composite(objList32);
        java.lang.Object[] objArray36 = composite35.toArray();
        int int37 = composite35.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream38 = composite35.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream39 = composite35.parallelStream();
        int int40 = composite35.startOffset;
        int int41 = composite21.compareTo(composite35);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        comparators.Composite composite48 = composite21.addBytes(byteArray46);
        java.nio.ByteBuffer byteBuffer49 = composite48.serializeToByteBuffer();
        compositeType6.validate(byteBuffer49);
        comparators.Composite composite51 = new comparators.Composite(byteBuffer49);
        comparators.Composite composite52 = new comparators.Composite(byteBuffer49);
        boolean boolean53 = comparators.Composite.validate(byteBuffer49);
        java.nio.ByteBuffer byteBuffer54 = null;
        int int55 = comparators.Composite.compare(byteBuffer49, byteBuffer54);
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite56 = new comparators.Composite(byteBuffer54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(composite48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.offset;
        int int85 = compositeTypeIterator80.offset;
        boolean boolean86 = compositeTypeIterator80.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj87 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 67 + "'", int84 == 67);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        comparators.hector.CompositeSerializer compositeSerializer1 = new comparators.hector.CompositeSerializer();
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        comparators.Composite composite17 = composite11.addBool(true);
        java.io.DataOutputStream dataOutputStream18 = composite11.out;
        byte[] byteArray19 = compositeSerializer1.toBytes(composite11);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        comparators.Composite composite35 = composite29.addBool(true);
        comparators.Composite composite37 = composite35.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream38 = composite35.byteStream;
        java.nio.ByteBuffer byteBuffer39 = compositeSerializer1.toByteBuffer(composite35);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList46.parallelStream();
        comparators.Composite composite49 = new comparators.Composite(objList46);
        java.lang.Object[] objArray50 = composite49.toArray();
        int int51 = composite49.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream52 = composite49.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream53 = composite49.parallelStream();
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray58 = new byte[] {};
        int int59 = comparators.Composite.compare(byteArray57, byteArray58);
        java.util.List<java.lang.Object> objList60 = comparators.Composite.deserialize(byteArray58);
        byte[] byteArray61 = comparators.Composite.serialize(objList60);
        java.util.stream.Stream<java.lang.Object> objStream62 = objList60.parallelStream();
        comparators.Composite composite63 = new comparators.Composite(objList60);
        java.lang.Object[] objArray64 = composite63.toArray();
        int int65 = composite63.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream66 = composite63.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream67 = composite63.parallelStream();
        int int68 = composite63.startOffset;
        int int69 = composite49.compareTo(composite63);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray74 = new byte[] {};
        int int75 = comparators.Composite.compare(byteArray73, byteArray74);
        java.util.List<java.lang.Object> objList76 = comparators.Composite.deserialize(byteArray74);
        byte[] byteArray77 = comparators.Composite.serialize(objList76);
        java.util.stream.Stream<java.lang.Object> objStream78 = objList76.parallelStream();
        comparators.Composite composite79 = new comparators.Composite(objList76);
        java.util.RandomAccess[] randomAccessArray80 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray81 = composite79.toArray(randomAccessArray80);
        comparators.Composite composite83 = composite79.addLong((long) 67);
        byte[] byteArray84 = composite83.serialize();
        java.util.List<java.lang.Object> objList85 = comparators.Composite.deserialize(byteArray84);
        comparators.Composite composite86 = new comparators.Composite(byteArray84);
        boolean boolean87 = composite63.equals((java.lang.Object) byteArray84);
        comparators.Composite composite88 = compositeSerializer1.fromBytes(byteArray84);
        comparators.CompositeType compositeType89 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray90 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList91 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList91, byteBufferArray90);
        java.lang.String str93 = compositeType89.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList91);
        java.util.List<comparators.Composite> compositeList94 = compositeSerializer1.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList91);
        java.util.List<comparators.Composite> compositeList95 = compositeSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList91);
        int int97 = compositeSerializer0.computeInitialHashSize(67);
        int int99 = compositeSerializer0.computeInitialHashSize(0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(dataOutputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteArrayOutputStream38);
        org.junit.Assert.assertEquals(byteArrayOutputStream38.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(objList60);
        org.junit.Assert.assertNull(byteArray61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertNull(byteArray77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(randomAccessArray80);
        org.junit.Assert.assertNotNull(randomAccessArray81);
        org.junit.Assert.assertNotNull(composite83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(composite88);
        org.junit.Assert.assertNotNull(compositeType89);
        org.junit.Assert.assertNotNull(byteBufferArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(compositeList94);
        org.junit.Assert.assertNotNull(compositeList95);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 90 + "'", int97 == 90);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (byte) -1;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray8 = new byte[] {};
        int int9 = comparators.Composite.compare(byteArray7, byteArray8);
        java.util.List<java.lang.Object> objList10 = comparators.Composite.deserialize(byteArray8);
        byte[] byteArray11 = comparators.Composite.serialize(objList10);
        java.util.stream.Stream<java.lang.Object> objStream12 = objList10.parallelStream();
        comparators.Composite composite13 = new comparators.Composite(objList10);
        java.lang.Object[] objArray14 = composite13.toArray();
        int int15 = composite13.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream16 = composite13.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream17 = composite13.parallelStream();
        int int18 = composite13.startOffset;
        int int19 = composite13.startOffset;
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        boolean boolean38 = comparators.Composite.validate((int) ' ', byteArray35, true);
        boolean boolean39 = composite29.contains((java.lang.Object) boolean38);
        java.util.Spliterator<java.lang.Object> objSpliterator40 = composite29.spliterator();
        boolean boolean41 = composite13.containsAll((java.util.Collection<java.lang.Object>) composite29);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray42 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray43 = composite13.toArray(compositeListSerializerArray42);
        boolean boolean44 = placeholder0.equals((java.lang.Object) composite13);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray49 = new byte[] {};
        int int50 = comparators.Composite.compare(byteArray48, byteArray49);
        java.util.List<java.lang.Object> objList51 = comparators.Composite.deserialize(byteArray49);
        byte[] byteArray52 = comparators.Composite.serialize(objList51);
        java.util.stream.Stream<java.lang.Object> objStream53 = objList51.parallelStream();
        comparators.Composite composite54 = new comparators.Composite(objList51);
        java.util.RandomAccess[] randomAccessArray55 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray56 = composite54.toArray(randomAccessArray55);
        comparators.Composite composite58 = composite54.addUTF8("UTF-8");
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(byteArray64);
        byte[] byteArray67 = comparators.Composite.serialize(objList66);
        java.util.stream.Stream<java.lang.Object> objStream68 = objList66.parallelStream();
        comparators.Composite composite69 = new comparators.Composite(objList66);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray75 = new byte[] {};
        int int76 = comparators.Composite.compare(byteArray74, byteArray75);
        boolean boolean78 = comparators.Composite.validate((int) ' ', byteArray75, true);
        boolean boolean79 = composite69.contains((java.lang.Object) boolean78);
        java.util.stream.Stream<java.lang.Object> objStream80 = composite69.parallelStream();
        composite69.startOffset = 8;
        comparators.Composite composite84 = composite69.addAscii("hi!");
        comparators.Composite composite86 = composite69.addLong((long) 4);
        int int87 = composite86.size();
        java.lang.Object[] objArray88 = composite86.toArray();
        byte[] byteArray89 = comparators.Composite.serialize(objArray88);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator90 = composite13.new CompositeTypeIterator(composite54, (int) (byte) 1, byteArray89);
        byte[] byteArray91 = composite13.bytes;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(objList10);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(objStream17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objSpliterator40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray42);
        org.junit.Assert.assertNotNull(compositeListSerializerArray43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(objList51);
        org.junit.Assert.assertNull(byteArray52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(randomAccessArray55);
        org.junit.Assert.assertNotNull(randomAccessArray56);
        org.junit.Assert.assertNotNull(composite58);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(objList66);
        org.junit.Assert.assertNull(byteArray67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objStream80);
        org.junit.Assert.assertNotNull(composite84);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[hi!, 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[hi!, 4]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[67, 77, 80, 1, 8, 0, 3, 104, 105, 33, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0]");
        org.junit.Assert.assertNull(byteArray91);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite65.startOffset;
        int int72 = composite17.compareTo(composite65);
        comparators.Composite composite74 = composite17.addLong((long) 80);
        java.util.Iterator<java.lang.Object> objItor75 = composite74.iterator();
        java.util.UUID uUID76 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite77 = composite74.addLexicalUUID(uUID76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(objItor75);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        java.util.List<java.lang.Object> objList37 = comparators.Composite.deserialize(byteArray35);
        byte[] byteArray38 = comparators.Composite.serialize(objList37);
        java.util.stream.Stream<java.lang.Object> objStream39 = objList37.parallelStream();
        comparators.Composite composite40 = new comparators.Composite(objList37);
        java.util.RandomAccess[] randomAccessArray41 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray42 = composite40.toArray(randomAccessArray41);
        comparators.Composite composite44 = composite40.addLong((long) 67);
        byte[] byteArray45 = composite44.serialize();
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray45);
        comparators.Composite composite47 = new comparators.Composite(byteArray45);
        boolean boolean48 = composite24.equals((java.lang.Object) byteArray45);
        comparators.Composite composite49 = new comparators.Composite(byteArray45);
        java.util.List<java.lang.Object> objList50 = comparators.Composite.deserialize(byteArray45);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray58 = new byte[] {};
        int int59 = comparators.Composite.compare(byteArray57, byteArray58);
        java.util.List<java.lang.Object> objList60 = comparators.Composite.deserialize(byteArray58);
        boolean boolean61 = comparators.Composite.validate(0, byteArray58);
        boolean boolean63 = comparators.Composite.validate((int) 'a', byteArray58, true);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = comparators.Composite.compare(0, byteArray45, 6, byteArray58);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(objList37);
        org.junit.Assert.assertNull(byteArray38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(randomAccessArray41);
        org.junit.Assert.assertNotNull(randomAccessArray42);
        org.junit.Assert.assertNotNull(composite44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(objList50);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(objList60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        java.lang.Object[] objArray13 = composite9.toArray();
        comparators.Composite composite15 = composite9.addAscii("");
        int int16 = composite15.size();
        comparators.Composite composite17 = composite15.addMatchMaximum();
        java.lang.Object[] objArray18 = composite15.toArray();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.offset = 100;
        int int88 = compositeTypeIterator80.type;
        java.lang.Class<?> wildcardClass89 = compositeTypeIterator80.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        int int81 = compositeTypeIterator80.start;
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 67 + "'", int81 == 67);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        comparators.Composite composite17 = composite15.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream18 = composite15.byteStream;
        java.util.stream.Stream<java.lang.Object> objStream19 = composite15.parallelStream();
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        int int33 = comparators.Composite.compare(byteArray24, byteArray31);
        boolean boolean35 = comparators.Composite.validate(0, byteArray31, false);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray31);
        composite15.bytes = byteArray31;
        comparators.Composite composite39 = composite15.addAscii("UTF-8");
        comparators.hector.CompositeListSerializer compositeListSerializer40 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray42 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList43 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43, byteBufferArray42);
        java.lang.String str45 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator46 = compositeType41.indexComparator;
        comparators.CompositeType compositeType47 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray48 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList49 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList49, byteBufferArray48);
        java.lang.String str51 = compositeType47.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList49);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator52 = compositeType41.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType47);
        comparators.CompositeType compositeType53 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray54 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList55 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList55, byteBufferArray54);
        java.lang.String str57 = compositeType53.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList55);
        java.lang.String str58 = compositeType47.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList55);
        java.util.List<java.util.List<java.lang.Object>> objListList59 = compositeListSerializer40.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList55);
        int int61 = compositeListSerializer40.computeInitialHashSize(9);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        java.util.List<java.lang.Object> objList68 = comparators.Composite.deserialize(byteArray66);
        byte[] byteArray69 = comparators.Composite.serialize(objList68);
        java.util.stream.Stream<java.lang.Object> objStream70 = objList68.parallelStream();
        comparators.Composite composite71 = new comparators.Composite(objList68);
        byte[] byteArray72 = compositeListSerializer40.toBytes(objList68);
        int int74 = compositeListSerializer40.computeInitialHashSize((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean75 = composite15.remove((java.lang.Object) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(byteArrayOutputStream18);
        org.junit.Assert.assertEquals(byteArrayOutputStream18.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\007\000\005UTF-8");
        org.junit.Assert.assertNotNull(objStream19);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteBufferArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(indexInfoComparator46);
        org.junit.Assert.assertNotNull(compositeType47);
        org.junit.Assert.assertNotNull(byteBufferArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteBufferComparator52);
        org.junit.Assert.assertNotNull(compositeType53);
        org.junit.Assert.assertNotNull(byteBufferArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(objListList59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 13 + "'", int61 == 13);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(objList68);
        org.junit.Assert.assertNull(byteArray69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNull(byteArray72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        comparators.hector.CompositeListSerializer compositeListSerializer1 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType2 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray3 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList4 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList4, byteBufferArray3);
        java.lang.String str6 = compositeType2.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList4);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator7 = compositeType2.indexComparator;
        comparators.CompositeType compositeType8 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray9 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList10 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList10, byteBufferArray9);
        java.lang.String str12 = compositeType8.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList10);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = compositeType2.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType8);
        comparators.CompositeType compositeType14 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray15 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList16 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16, byteBufferArray15);
        java.lang.String str18 = compositeType14.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16);
        java.lang.String str19 = compositeType8.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16);
        java.util.List<java.util.List<java.lang.Object>> objListList20 = compositeListSerializer1.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList16);
        int int22 = compositeListSerializer1.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer23 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType24 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray25 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList26 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList26, byteBufferArray25);
        java.lang.String str28 = compositeType24.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList26);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator29 = compositeType24.indexComparator;
        comparators.CompositeType compositeType30 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray31 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList32 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32, byteBufferArray31);
        java.lang.String str34 = compositeType30.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator35 = compositeType24.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType30);
        comparators.CompositeType compositeType36 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray37 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList38 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38, byteBufferArray37);
        java.lang.String str40 = compositeType36.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38);
        java.lang.String str41 = compositeType30.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38);
        java.util.List<java.util.List<java.lang.Object>> objListList42 = compositeListSerializer23.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList38);
        java.util.List<java.nio.ByteBuffer> byteBufferList43 = compositeListSerializer1.toBytesList(objListList42);
        java.lang.String str44 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        comparators.CompositeType compositeType45 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray46 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList47 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47, byteBufferArray46);
        java.lang.String str49 = compositeType45.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47);
        org.apache.cassandra.db.IColumn[] iColumnArray50 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList51 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList51, iColumnArray50);
        java.lang.String str53 = compositeType45.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList51);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator54 = compositeType45.getReverseComparator();
        comparators.CompositeType compositeType55 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray56 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList57 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57, byteBufferArray56);
        java.lang.String str59 = compositeType55.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        org.apache.cassandra.db.IColumn[] iColumnArray60 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList61 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList61, iColumnArray60);
        java.lang.String str63 = compositeType55.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList61);
        java.lang.String str64 = compositeType45.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList61);
        comparators.hector.CompositeListSerializer compositeListSerializer65 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType66 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray67 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList68 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList68, byteBufferArray67);
        java.lang.String str70 = compositeType66.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList68);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator71 = compositeType66.indexComparator;
        comparators.CompositeType compositeType72 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray73 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList74 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList74, byteBufferArray73);
        java.lang.String str76 = compositeType72.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList74);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator77 = compositeType66.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType72);
        comparators.CompositeType compositeType78 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray79 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList80 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList80, byteBufferArray79);
        java.lang.String str82 = compositeType78.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList80);
        java.lang.String str83 = compositeType72.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList80);
        java.util.List<java.util.List<java.lang.Object>> objListList84 = compositeListSerializer65.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList80);
        java.lang.String str85 = compositeType45.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList80);
        java.lang.String str86 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList80);
        boolean boolean87 = comparators.Composite.isValidType((java.lang.Object) str86);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(compositeType2);
        org.junit.Assert.assertNotNull(byteBufferArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(indexInfoComparator7);
        org.junit.Assert.assertNotNull(compositeType8);
        org.junit.Assert.assertNotNull(byteBufferArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteBufferComparator13);
        org.junit.Assert.assertNotNull(compositeType14);
        org.junit.Assert.assertNotNull(byteBufferArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(objListList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertNotNull(compositeType24);
        org.junit.Assert.assertNotNull(byteBufferArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(indexInfoComparator29);
        org.junit.Assert.assertNotNull(compositeType30);
        org.junit.Assert.assertNotNull(byteBufferArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteBufferComparator35);
        org.junit.Assert.assertNotNull(compositeType36);
        org.junit.Assert.assertNotNull(byteBufferArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(objListList42);
        org.junit.Assert.assertNotNull(byteBufferList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(compositeType45);
        org.junit.Assert.assertNotNull(byteBufferArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(iColumnArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteBufferComparator54);
        org.junit.Assert.assertNotNull(compositeType55);
        org.junit.Assert.assertNotNull(byteBufferArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(iColumnArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(compositeType66);
        org.junit.Assert.assertNotNull(byteBufferArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(indexInfoComparator71);
        org.junit.Assert.assertNotNull(compositeType72);
        org.junit.Assert.assertNotNull(byteBufferArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(byteBufferComparator77);
        org.junit.Assert.assertNotNull(compositeType78);
        org.junit.Assert.assertNotNull(byteBufferArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(objListList84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        boolean boolean6 = comparators.Composite.isValidType((java.lang.Object) compositeType0);
        org.apache.cassandra.db.IColumn[] iColumnArray7 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList8 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList8, iColumnArray7);
        java.lang.String str10 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList8);
        comparators.CompositeType compositeType11 = new comparators.CompositeType();
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType12.validate(byteBuffer50);
        boolean boolean52 = comparators.Composite.validate(byteBuffer50);
        comparators.Composite composite53 = new comparators.Composite(byteBuffer50);
        java.nio.ByteBuffer byteBuffer54 = null;
        int int55 = compositeType11.compare(byteBuffer50, byteBuffer54);
        comparators.Composite composite56 = new comparators.Composite(byteBuffer50);
        comparators.Composite composite57 = new comparators.Composite(byteBuffer50);
        java.lang.String str58 = compositeType0.getString(byteBuffer50);
        boolean boolean59 = comparators.Composite.validate(byteBuffer50);
        comparators.Composite composite60 = new comparators.Composite(byteBuffer50);
        comparators.Composite composite61 = new comparators.Composite(byteBuffer50);
        java.util.Iterator<java.lang.Object> objItor62 = composite61.iterator();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(iColumnArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objItor62);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        int int13 = composite10.startOffset;
        byte[] byteArray14 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        java.util.List<java.lang.Object> objList29 = comparators.Composite.deserialize(byteArray27);
        byte[] byteArray30 = comparators.Composite.serialize(objList29);
        java.util.stream.Stream<java.lang.Object> objStream31 = objList29.parallelStream();
        comparators.Composite composite32 = new comparators.Composite(objList29);
        java.util.RandomAccess[] randomAccessArray33 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray34 = composite32.toArray(randomAccessArray33);
        comparators.Composite composite36 = composite32.addLong((long) 67);
        byte[] byteArray37 = composite36.serialize();
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray37);
        int int39 = comparators.Composite.compare(byteArray20, byteArray37);
        comparators.hector.CompositeSerializer compositeSerializer40 = new comparators.hector.CompositeSerializer();
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray45 = new byte[] {};
        int int46 = comparators.Composite.compare(byteArray44, byteArray45);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray45);
        byte[] byteArray48 = comparators.Composite.serialize(objList47);
        java.util.stream.Stream<java.lang.Object> objStream49 = objList47.parallelStream();
        comparators.Composite composite50 = new comparators.Composite(objList47);
        java.lang.Object[] objArray51 = composite50.toArray();
        int int52 = composite50.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream53 = composite50.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream54 = composite50.parallelStream();
        comparators.Composite composite56 = composite50.addBool(true);
        java.io.DataOutputStream dataOutputStream57 = composite50.out;
        byte[] byteArray58 = compositeSerializer40.toBytes(composite50);
        int int59 = comparators.Composite.compare(byteArray37, byteArray58);
        boolean boolean60 = comparators.Composite.validate(1, byteArray58);
        java.util.List<java.lang.Object> objList61 = comparators.Composite.deserialize(byteArray58);
        byte[] byteArray62 = comparators.Composite.serialize(objList61);
        byte[] byteArray63 = comparators.Composite.serialize(objList61);
        comparators.Composite composite64 = compositeSerializer0.fromBytes(byteArray63);
        int int66 = compositeSerializer0.computeInitialHashSize(130);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(objList29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(randomAccessArray33);
        org.junit.Assert.assertNotNull(randomAccessArray34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNull(byteArray48);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(composite56);
        org.junit.Assert.assertNotNull(dataOutputStream57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(objList61);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(composite64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 174 + "'", int66 == 174);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite65.startOffset;
        int int72 = composite17.compareTo(composite65);
        comparators.Composite composite74 = composite17.addLong((long) 80);
        java.io.ByteArrayOutputStream byteArrayOutputStream75 = composite74.byteStream;
        java.util.Spliterator<java.lang.Object> objSpliterator76 = composite74.spliterator();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(byteArrayOutputStream75);
// flaky:         org.junit.Assert.assertEquals(byteArrayOutputStream75.toString(), "CMP\001\003\000\000\000\000\000\000\000P\000");
        org.junit.Assert.assertNotNull(objSpliterator76);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        byte[] byteArray12 = composite9.bytes;
        java.io.ByteArrayOutputStream byteArrayOutputStream13 = composite9.byteStream;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray29 = new byte[] {};
        int int30 = comparators.Composite.compare(byteArray28, byteArray29);
        boolean boolean32 = comparators.Composite.validate((int) ' ', byteArray29, true);
        boolean boolean33 = composite23.contains((java.lang.Object) boolean32);
        java.util.stream.Stream<java.lang.Object> objStream34 = composite23.parallelStream();
        boolean boolean35 = composite23.isEmpty();
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(byteArray40);
        byte[] byteArray43 = comparators.Composite.serialize(objList42);
        java.util.stream.Stream<java.lang.Object> objStream44 = objList42.parallelStream();
        comparators.Composite composite45 = new comparators.Composite(objList42);
        java.lang.Object[] objArray46 = composite45.toArray();
        int int47 = composite45.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream48 = composite45.parallelStream();
        boolean boolean49 = composite23.containsAll((java.util.Collection<java.lang.Object>) composite45);
        comparators.Composite composite51 = composite23.addLong((long) (short) 1);
        comparators.Composite composite53 = composite51.addBool(true);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray58 = new byte[] {};
        int int59 = comparators.Composite.compare(byteArray57, byteArray58);
        java.util.List<java.lang.Object> objList60 = comparators.Composite.deserialize(byteArray58);
        byte[] byteArray61 = comparators.Composite.serialize(objList60);
        java.util.stream.Stream<java.lang.Object> objStream62 = objList60.parallelStream();
        comparators.Composite composite63 = new comparators.Composite(objList60);
        java.lang.Object[] objArray64 = composite63.toArray();
        int int65 = composite63.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream66 = composite63.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream67 = composite63.parallelStream();
        comparators.Composite composite69 = composite63.addBool(true);
        java.util.Iterator<java.lang.Object> objItor70 = composite63.iterator();
        comparators.Composite composite72 = composite63.addReal((java.lang.Double) 100.0d);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray77);
        byte[] byteArray80 = comparators.Composite.serialize(objList79);
        java.util.stream.Stream<java.lang.Object> objStream81 = objList79.parallelStream();
        comparators.Composite composite82 = new comparators.Composite(objList79);
        java.lang.Object[] objArray83 = composite82.toArray();
        int int84 = composite82.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream85 = composite82.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream86 = composite82.parallelStream();
        int int87 = composite82.startOffset;
        composite82.clear();
        boolean boolean89 = composite72.containsAll((java.util.Collection<java.lang.Object>) composite82);
        java.util.Iterator<java.lang.Object> objItor90 = composite72.iterator();
        boolean boolean91 = composite51.add((java.lang.Object) composite72);
        comparators.Composite composite93 = composite72.addBool(true);
        comparators.Composite composite94 = composite72.addMatchMinimum();
        int int95 = comparators.Composite.compare(composite9, composite72);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNull(byteArrayOutputStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(objList42);
        org.junit.Assert.assertNull(byteArray43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(composite51);
        org.junit.Assert.assertNotNull(composite53);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(objList60);
        org.junit.Assert.assertNull(byteArray61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(composite69);
        org.junit.Assert.assertNotNull(objItor70);
        org.junit.Assert.assertNotNull(composite72);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNull(byteArray80);
        org.junit.Assert.assertNotNull(objStream81);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(objStream85);
        org.junit.Assert.assertNotNull(objStream86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(objItor90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(composite93);
        org.junit.Assert.assertNotNull(composite94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        int int81 = compositeTypeIterator80.start;
        compositeTypeIterator80.len = 3;
        compositeTypeIterator80.start = 80;
        byte[] byteArray86 = compositeTypeIterator80.bytes;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 67 + "'", int81 == 67);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.util.RandomAccess[] randomAccessArray11 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray12 = composite10.toArray(randomAccessArray11);
        comparators.Composite composite14 = composite10.addLong((long) 67);
        byte[] byteArray15 = composite14.serialize();
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray15);
        comparators.Composite composite17 = new comparators.Composite(byteArray15);
        comparators.Composite composite18 = compositeSerializer0.fromBytes(byteArray15);
        byte[] byteArray20 = null;
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray32 = new byte[] {};
        int int33 = comparators.Composite.compare(byteArray31, byteArray32);
        int int34 = comparators.Composite.compare(byteArray25, byteArray32);
        int int35 = comparators.Composite.compare((int) (byte) 1, byteArray20, 10, byteArray25);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(byteArray40);
        byte[] byteArray43 = comparators.Composite.serialize(objList42);
        java.util.stream.Stream<java.lang.Object> objStream44 = objList42.parallelStream();
        comparators.Composite composite45 = new comparators.Composite(objList42);
        java.util.RandomAccess[] randomAccessArray46 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray47 = composite45.toArray(randomAccessArray46);
        comparators.Composite composite49 = composite45.addLong((long) 67);
        byte[] byteArray50 = composite49.serialize();
        java.util.List<java.lang.Object> objList51 = comparators.Composite.deserialize(byteArray50);
        int int52 = comparators.Composite.compare(byteArray20, byteArray50);
        byte[] byteArray54 = null;
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        int int68 = comparators.Composite.compare(byteArray59, byteArray66);
        int int69 = comparators.Composite.compare((int) (byte) 1, byteArray54, 10, byteArray59);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray75 = new byte[] {};
        int int76 = comparators.Composite.compare(byteArray74, byteArray75);
        java.util.List<java.lang.Object> objList77 = comparators.Composite.deserialize(byteArray75);
        boolean boolean78 = comparators.Composite.validate(0, byteArray75);
        byte[] byteArray79 = null;
        int int80 = comparators.Composite.compare(byteArray75, byteArray79);
        int int81 = comparators.Composite.compare(byteArray59, byteArray75);
        comparators.Composite composite82 = new comparators.Composite(byteArray75);
        int int83 = comparators.Composite.compare(byteArray20, byteArray75);
        comparators.Composite composite84 = compositeSerializer0.fromBytes(byteArray20);
        java.util.UUID uUID85 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite86 = composite84.addLexicalUUID(uUID85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(randomAccessArray12);
        org.junit.Assert.assertNotNull(composite14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(objList42);
        org.junit.Assert.assertNull(byteArray43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(randomAccessArray46);
        org.junit.Assert.assertNotNull(randomAccessArray47);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(objList77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(composite84);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        int int21 = composite9.startOffset;
        java.lang.Object[] objArray22 = composite9.toArray();
        comparators.Composite composite23 = new comparators.Composite(objArray22);
        java.lang.Object obj24 = null;
        boolean boolean25 = composite23.contains(obj24);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer26 = composite23.serializeToByteBuffer();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        comparators.Composite composite38 = composite11.addBytes(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = composite38.serializeToByteBuffer();
        compositeType1.validate(byteBuffer39);
        boolean boolean41 = comparators.Composite.validate(byteBuffer39);
        comparators.Composite composite42 = new comparators.Composite(byteBuffer39);
        java.nio.ByteBuffer byteBuffer43 = null;
        int int44 = compositeType0.compare(byteBuffer39, byteBuffer43);
        comparators.Composite composite45 = new comparators.Composite(byteBuffer39);
        java.util.Spliterator<java.lang.Object> objSpliterator46 = composite45.spliterator();
        int int47 = composite45.startOffset;
        composite45.clear();
        int int49 = composite45.size();
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objSpliterator46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        compositeTypeIterator80.offset = (short) 0;
        boolean boolean85 = compositeTypeIterator80.hasNext();
        int int86 = compositeTypeIterator80.offset;
        compositeTypeIterator80.type = 47;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        java.util.List<java.lang.Object> objList9 = comparators.Composite.deserialize(byteArray7);
        byte[] byteArray10 = comparators.Composite.serialize(objList9);
        java.util.stream.Stream<java.lang.Object> objStream11 = objList9.parallelStream();
        comparators.Composite composite12 = new comparators.Composite(objList9);
        java.lang.Object[] objArray13 = composite12.toArray();
        int int14 = composite12.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream15 = null;
        composite12.byteStream = byteArrayOutputStream15;
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        comparators.Composite composite32 = composite26.addBool(true);
        java.util.Iterator<java.lang.Object> objItor33 = composite26.iterator();
        int int34 = composite12.compareTo(composite26);
        java.lang.Object[][][] objArray35 = new java.lang.Object[][][] {};
        java.lang.Object[][][] objArray36 = composite12.toArray(objArray35);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray41 = new byte[] {};
        int int42 = comparators.Composite.compare(byteArray40, byteArray41);
        java.util.List<java.lang.Object> objList43 = comparators.Composite.deserialize(byteArray41);
        byte[] byteArray44 = comparators.Composite.serialize(objList43);
        java.util.stream.Stream<java.lang.Object> objStream45 = objList43.parallelStream();
        comparators.Composite composite46 = new comparators.Composite(objList43);
        java.util.RandomAccess[] randomAccessArray47 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray48 = composite46.toArray(randomAccessArray47);
        comparators.Composite composite50 = composite46.addLong((long) 67);
        byte[] byteArray51 = composite50.serialize();
        java.util.List<java.lang.Object> objList52 = comparators.Composite.deserialize(byteArray51);
        comparators.Composite composite53 = composite12.addBytes(byteArray51);
        boolean boolean54 = comparators.Composite.validate(13, byteArray51);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(0, byteArray51);
        boolean boolean56 = comparators.Composite.validate(35, byteArray51);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(composite32);
        org.junit.Assert.assertNotNull(objItor33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(objList43);
        org.junit.Assert.assertNull(byteArray44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(randomAccessArray47);
        org.junit.Assert.assertNotNull(randomAccessArray48);
        org.junit.Assert.assertNotNull(composite50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList52);
        org.junit.Assert.assertNotNull(composite53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator10 = compositeType0.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator11 = compositeType0.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator12 = compositeType0.indexReverseComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator13 = compositeType0.indexReverseComparator;
        comparators.CompositeType compositeType14 = comparators.CompositeType.instance;
        comparators.CompositeType compositeType15 = new comparators.CompositeType();
        comparators.CompositeType compositeType16 = comparators.CompositeType.instance;
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        java.util.List<java.lang.Object> objList37 = comparators.Composite.deserialize(byteArray35);
        byte[] byteArray38 = comparators.Composite.serialize(objList37);
        java.util.stream.Stream<java.lang.Object> objStream39 = objList37.parallelStream();
        comparators.Composite composite40 = new comparators.Composite(objList37);
        java.lang.Object[] objArray41 = composite40.toArray();
        int int42 = composite40.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream43 = composite40.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream44 = composite40.parallelStream();
        int int45 = composite40.startOffset;
        int int46 = composite26.compareTo(composite40);
        byte[] byteArray50 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray51 = new byte[] {};
        int int52 = comparators.Composite.compare(byteArray50, byteArray51);
        comparators.Composite composite53 = composite26.addBytes(byteArray51);
        java.nio.ByteBuffer byteBuffer54 = composite53.serializeToByteBuffer();
        compositeType16.validate(byteBuffer54);
        boolean boolean56 = comparators.Composite.validate(byteBuffer54);
        comparators.Composite composite57 = new comparators.Composite(byteBuffer54);
        java.nio.ByteBuffer byteBuffer58 = null;
        int int59 = compositeType15.compare(byteBuffer54, byteBuffer58);
        compositeType14.validate(byteBuffer54);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator61 = compositeType14.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator62 = compositeType14.getReverseComparator();
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray67 = new byte[] {};
        int int68 = comparators.Composite.compare(byteArray66, byteArray67);
        java.util.List<java.lang.Object> objList69 = comparators.Composite.deserialize(byteArray67);
        byte[] byteArray70 = comparators.Composite.serialize(objList69);
        java.util.stream.Stream<java.lang.Object> objStream71 = objList69.parallelStream();
        comparators.Composite composite72 = new comparators.Composite(objList69);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray78 = new byte[] {};
        int int79 = comparators.Composite.compare(byteArray77, byteArray78);
        boolean boolean81 = comparators.Composite.validate((int) ' ', byteArray78, true);
        boolean boolean82 = composite72.contains((java.lang.Object) boolean81);
        java.util.stream.Stream<java.lang.Object> objStream83 = composite72.parallelStream();
        composite72.startOffset = 8;
        comparators.Composite composite87 = composite72.addAscii("hi!");
        comparators.Composite composite89 = composite72.addLong((long) 4);
        int int90 = composite89.size();
        java.lang.Object[] objArray91 = composite89.toArray();
        java.nio.ByteBuffer byteBuffer92 = comparators.Composite.serializeToByteBuffer(objArray91);
        java.nio.ByteBuffer byteBuffer93 = null;
        int int94 = compositeType14.compare(byteBuffer92, byteBuffer93);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator95 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType14);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer97 = compositeType0.fromString("Placeholder(77)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(indexInfoComparator10);
        org.junit.Assert.assertNotNull(indexInfoComparator11);
        org.junit.Assert.assertNotNull(indexInfoComparator12);
        org.junit.Assert.assertNotNull(indexInfoComparator13);
        org.junit.Assert.assertNotNull(compositeType14);
        org.junit.Assert.assertNotNull(compositeType16);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(objList37);
        org.junit.Assert.assertNull(byteArray38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(composite53);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(byteBufferComparator61);
        org.junit.Assert.assertNotNull(byteBufferComparator62);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(objList69);
        org.junit.Assert.assertNull(byteArray70);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objStream83);
        org.junit.Assert.assertNotNull(composite87);
        org.junit.Assert.assertNotNull(composite89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[hi!, 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[hi!, 4]");
        org.junit.Assert.assertNotNull(byteBuffer92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(byteBufferComparator95);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray38 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray39 = composite9.toArray(compositeListSerializerArray38);
        byte[] byteArray40 = comparators.Composite.serialize((java.lang.Object[]) compositeListSerializerArray39);
        comparators.Composite composite41 = new comparators.Composite((java.lang.Object[]) compositeListSerializerArray39);
        boolean boolean43 = composite41.contains((java.lang.Object) 97);
        java.util.UUID uUID44 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite45 = composite41.addLexicalUUID(uUID44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray38);
        org.junit.Assert.assertNotNull(compositeListSerializerArray39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer22 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator28 = compositeType23.indexComparator;
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator34 = compositeType23.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.lang.String str40 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.List<java.util.List<java.lang.Object>> objListList41 = compositeListSerializer22.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList37);
        comparators.hector.CompositeListSerializer compositeListSerializer42 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray44 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList45 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45, byteBufferArray44);
        java.lang.String str47 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator48 = compositeType43.indexComparator;
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray50 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList51 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51, byteBufferArray50);
        java.lang.String str53 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator54 = compositeType43.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType49);
        comparators.CompositeType compositeType55 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray56 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList57 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57, byteBufferArray56);
        java.lang.String str59 = compositeType55.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        java.lang.String str60 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        java.util.List<java.util.List<java.lang.Object>> objListList61 = compositeListSerializer42.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList57);
        int int63 = compositeListSerializer42.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer64 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType65 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray66 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList67 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList67, byteBufferArray66);
        java.lang.String str69 = compositeType65.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList67);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator70 = compositeType65.indexComparator;
        comparators.CompositeType compositeType71 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray72 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList73 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList73, byteBufferArray72);
        java.lang.String str75 = compositeType71.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList73);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator76 = compositeType65.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType71);
        comparators.CompositeType compositeType77 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray78 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList79 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList79, byteBufferArray78);
        java.lang.String str81 = compositeType77.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList79);
        java.lang.String str82 = compositeType71.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList79);
        java.util.List<java.util.List<java.lang.Object>> objListList83 = compositeListSerializer64.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList79);
        java.util.List<java.nio.ByteBuffer> byteBufferList84 = compositeListSerializer42.toBytesList(objListList83);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet85 = compositeListSerializer22.toBytesSet(objListList83);
        java.util.List<java.util.List<java.lang.Object>> objListList86 = compositeListSerializer0.fromBytesSet(byteBufferSet85);
        java.util.List<java.nio.ByteBuffer> byteBufferList87 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.List<java.lang.Object>> objListList88 = compositeListSerializer0.fromBytesList(byteBufferList87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(indexInfoComparator28);
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteBufferComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(objListList41);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(byteBufferArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(indexInfoComparator48);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteBufferComparator54);
        org.junit.Assert.assertNotNull(compositeType55);
        org.junit.Assert.assertNotNull(byteBufferArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(objListList61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(compositeType65);
        org.junit.Assert.assertNotNull(byteBufferArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(indexInfoComparator70);
        org.junit.Assert.assertNotNull(compositeType71);
        org.junit.Assert.assertNotNull(byteBufferArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(byteBufferComparator76);
        org.junit.Assert.assertNotNull(compositeType77);
        org.junit.Assert.assertNotNull(byteBufferArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(objListList83);
        org.junit.Assert.assertNotNull(byteBufferList84);
        org.junit.Assert.assertNotNull(byteBufferSet85);
        org.junit.Assert.assertNotNull(objListList86);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray12 = new byte[] {};
        int int13 = comparators.Composite.compare(byteArray11, byteArray12);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray12);
        byte[] byteArray15 = comparators.Composite.serialize(objList14);
        java.util.stream.Stream<java.lang.Object> objStream16 = objList14.parallelStream();
        comparators.Composite composite17 = new comparators.Composite(objList14);
        java.util.RandomAccess[] randomAccessArray18 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray19 = composite17.toArray(randomAccessArray18);
        comparators.Composite composite21 = composite17.addLong((long) 67);
        byte[] byteArray22 = composite21.serialize();
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray22);
        int int24 = comparators.Composite.compare(byteArray5, byteArray22);
        comparators.hector.CompositeSerializer compositeSerializer25 = new comparators.hector.CompositeSerializer();
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray30);
        byte[] byteArray33 = comparators.Composite.serialize(objList32);
        java.util.stream.Stream<java.lang.Object> objStream34 = objList32.parallelStream();
        comparators.Composite composite35 = new comparators.Composite(objList32);
        java.lang.Object[] objArray36 = composite35.toArray();
        int int37 = composite35.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream38 = composite35.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream39 = composite35.parallelStream();
        comparators.Composite composite41 = composite35.addBool(true);
        java.io.DataOutputStream dataOutputStream42 = composite35.out;
        byte[] byteArray43 = compositeSerializer25.toBytes(composite35);
        int int44 = comparators.Composite.compare(byteArray22, byteArray43);
        boolean boolean46 = comparators.Composite.validate(67, byteArray43, true);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray43);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList47.stream();
        comparators.Composite composite49 = new comparators.Composite(objList47);
        byte[] byteArray50 = composite49.bytes;
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNull(byteArray15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(randomAccessArray18);
        org.junit.Assert.assertNotNull(randomAccessArray19);
        org.junit.Assert.assertNotNull(composite21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(composite41);
        org.junit.Assert.assertNotNull(dataOutputStream42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNull(byteArray50);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        java.lang.Object[] objArray13 = composite9.toArray();
        int int14 = composite9.startOffset;
        composite9.clear();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray28 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList29 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29, byteBufferArray28);
        java.lang.String str31 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator32 = compositeType27.indexComparator;
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator38 = compositeType27.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType33);
        comparators.CompositeType compositeType39 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray40 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList41 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41, byteBufferArray40);
        java.lang.String str43 = compositeType39.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41);
        java.lang.String str44 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41);
        comparators.CompositeType compositeType45 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray46 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList47 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47, byteBufferArray46);
        java.lang.String str49 = compositeType45.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator50 = compositeType45.indexComparator;
        comparators.CompositeType compositeType51 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray52 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList53 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53, byteBufferArray52);
        java.lang.String str55 = compositeType51.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator56 = compositeType45.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType51);
        comparators.CompositeType compositeType57 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray58 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList59 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList59, byteBufferArray58);
        java.lang.String str61 = compositeType57.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList59);
        java.lang.String str62 = compositeType51.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList59);
        java.util.AbstractList[] abstractListArray64 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray65 = (java.util.AbstractList<java.nio.ByteBuffer>[]) abstractListArray64;
        byteBufferListArray65[0] = byteBufferList41;
        byteBufferListArray65[1] = byteBufferList59;
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray70 = composite25.toArray(byteBufferListArray65);
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray71 = composite9.toArray(byteBufferListArray70);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteBufferArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(indexInfoComparator32);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteBufferComparator38);
        org.junit.Assert.assertNotNull(compositeType39);
        org.junit.Assert.assertNotNull(byteBufferArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(compositeType45);
        org.junit.Assert.assertNotNull(byteBufferArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(indexInfoComparator50);
        org.junit.Assert.assertNotNull(compositeType51);
        org.junit.Assert.assertNotNull(byteBufferArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(byteBufferComparator56);
        org.junit.Assert.assertNotNull(compositeType57);
        org.junit.Assert.assertNotNull(byteBufferArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(abstractListArray64);
        org.junit.Assert.assertNotNull(byteBufferListArray65);
        org.junit.Assert.assertNotNull(byteBufferListArray70);
        org.junit.Assert.assertNotNull(byteBufferListArray71);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        comparators.Composite composite10 = new comparators.Composite(objList6);
        byte[] byteArray11 = composite10.serialize();
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        comparators.CompositeType compositeType13 = new comparators.CompositeType();
        comparators.CompositeType compositeType14 = comparators.CompositeType.instance;
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        int int40 = composite38.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream41 = composite38.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream42 = composite38.parallelStream();
        int int43 = composite38.startOffset;
        int int44 = composite24.compareTo(composite38);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray49 = new byte[] {};
        int int50 = comparators.Composite.compare(byteArray48, byteArray49);
        comparators.Composite composite51 = composite24.addBytes(byteArray49);
        java.nio.ByteBuffer byteBuffer52 = composite51.serializeToByteBuffer();
        compositeType14.validate(byteBuffer52);
        boolean boolean54 = comparators.Composite.validate(byteBuffer52);
        comparators.Composite composite55 = new comparators.Composite(byteBuffer52);
        java.nio.ByteBuffer byteBuffer56 = null;
        int int57 = compositeType13.compare(byteBuffer52, byteBuffer56);
        compositeType12.validate(byteBuffer52);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator59 = compositeType12.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator60 = compositeType12.getReverseComparator();
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray65 = new byte[] {};
        int int66 = comparators.Composite.compare(byteArray64, byteArray65);
        java.util.List<java.lang.Object> objList67 = comparators.Composite.deserialize(byteArray65);
        byte[] byteArray68 = comparators.Composite.serialize(objList67);
        java.util.stream.Stream<java.lang.Object> objStream69 = objList67.parallelStream();
        comparators.Composite composite70 = new comparators.Composite(objList67);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        boolean boolean79 = comparators.Composite.validate((int) ' ', byteArray76, true);
        boolean boolean80 = composite70.contains((java.lang.Object) boolean79);
        java.util.stream.Stream<java.lang.Object> objStream81 = composite70.parallelStream();
        composite70.startOffset = 8;
        comparators.Composite composite85 = composite70.addAscii("hi!");
        comparators.Composite composite87 = composite70.addLong((long) 4);
        int int88 = composite87.size();
        java.lang.Object[] objArray89 = composite87.toArray();
        java.nio.ByteBuffer byteBuffer90 = comparators.Composite.serializeToByteBuffer(objArray89);
        java.nio.ByteBuffer byteBuffer91 = null;
        int int92 = compositeType12.compare(byteBuffer90, byteBuffer91);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean93 = composite10.add((java.lang.Object) compositeType12);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(compositeType14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(composite51);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(byteBufferComparator59);
        org.junit.Assert.assertNotNull(byteBufferComparator60);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(objList67);
        org.junit.Assert.assertNull(byteArray68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objStream81);
        org.junit.Assert.assertNotNull(composite85);
        org.junit.Assert.assertNotNull(composite87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[hi!, 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[hi!, 4]");
        org.junit.Assert.assertNotNull(byteBuffer90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        comparators.hector.CompositeListSerializer compositeListSerializer20 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType21 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray22 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList23 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23, byteBufferArray22);
        java.lang.String str25 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator26 = compositeType21.indexComparator;
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray28 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList29 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29, byteBufferArray28);
        java.lang.String str31 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator32 = compositeType21.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType27);
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.lang.String str38 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.List<java.util.List<java.lang.Object>> objListList39 = compositeListSerializer20.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList35);
        int int41 = compositeListSerializer20.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer42 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray44 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList45 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45, byteBufferArray44);
        java.lang.String str47 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator48 = compositeType43.indexComparator;
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray50 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList51 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51, byteBufferArray50);
        java.lang.String str53 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator54 = compositeType43.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType49);
        comparators.CompositeType compositeType55 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray56 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList57 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57, byteBufferArray56);
        java.lang.String str59 = compositeType55.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        java.lang.String str60 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        java.util.List<java.util.List<java.lang.Object>> objListList61 = compositeListSerializer42.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList57);
        java.util.List<java.nio.ByteBuffer> byteBufferList62 = compositeListSerializer20.toBytesList(objListList61);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet63 = compositeListSerializer0.toBytesSet(objListList61);
        comparators.hector.CompositeListSerializer compositeListSerializer64 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        java.util.List<java.lang.Object> objList71 = comparators.Composite.deserialize(byteArray69);
        byte[] byteArray72 = comparators.Composite.serialize(objList71);
        java.util.stream.Stream<java.lang.Object> objStream73 = objList71.parallelStream();
        comparators.Composite composite74 = new comparators.Composite(objList71);
        byte[] byteArray75 = compositeListSerializer64.toBytes(objList71);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        java.util.List<java.lang.Object> objList82 = comparators.Composite.deserialize(byteArray80);
        byte[] byteArray83 = comparators.Composite.serialize(objList82);
        byte[] byteArray84 = comparators.Composite.serialize(objList82);
        byte[] byteArray85 = compositeListSerializer64.toBytes(objList82);
        byte[] byteArray86 = compositeListSerializer0.toBytes(objList82);
        comparators.Composite composite87 = new comparators.Composite(objList82);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertNotNull(compositeType21);
        org.junit.Assert.assertNotNull(byteBufferArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(indexInfoComparator26);
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteBufferArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteBufferComparator32);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(objListList39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(byteBufferArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(indexInfoComparator48);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteBufferComparator54);
        org.junit.Assert.assertNotNull(compositeType55);
        org.junit.Assert.assertNotNull(byteBufferArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(objListList61);
        org.junit.Assert.assertNotNull(byteBufferList62);
        org.junit.Assert.assertNotNull(byteBufferSet63);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(objList71);
        org.junit.Assert.assertNull(byteArray72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertNull(byteArray75);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(objList82);
        org.junit.Assert.assertNull(byteArray83);
        org.junit.Assert.assertNull(byteArray84);
        org.junit.Assert.assertNull(byteArray85);
        org.junit.Assert.assertNull(byteArray86);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType6.reversed();
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray32 = new byte[] {};
        int int33 = comparators.Composite.compare(byteArray31, byteArray32);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray32);
        byte[] byteArray35 = comparators.Composite.serialize(objList34);
        java.util.stream.Stream<java.lang.Object> objStream36 = objList34.parallelStream();
        comparators.Composite composite37 = new comparators.Composite(objList34);
        java.lang.Object[] objArray38 = composite37.toArray();
        int int39 = composite37.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream40 = composite37.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream41 = composite37.parallelStream();
        int int42 = composite37.startOffset;
        int int43 = composite23.compareTo(composite37);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        comparators.Composite composite50 = composite23.addBytes(byteArray48);
        java.nio.ByteBuffer byteBuffer51 = composite50.serializeToByteBuffer();
        compositeType13.validate(byteBuffer51);
        java.util.List<java.lang.Object> objList53 = comparators.Composite.deserialize(byteBuffer51);
        comparators.CompositeType compositeType54 = comparators.CompositeType.instance;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        java.util.List<java.lang.Object> objList61 = comparators.Composite.deserialize(byteArray59);
        byte[] byteArray62 = comparators.Composite.serialize(objList61);
        java.util.stream.Stream<java.lang.Object> objStream63 = objList61.parallelStream();
        comparators.Composite composite64 = new comparators.Composite(objList61);
        java.lang.Object[] objArray65 = composite64.toArray();
        int int66 = composite64.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream67 = composite64.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream68 = composite64.parallelStream();
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        java.util.List<java.lang.Object> objList75 = comparators.Composite.deserialize(byteArray73);
        byte[] byteArray76 = comparators.Composite.serialize(objList75);
        java.util.stream.Stream<java.lang.Object> objStream77 = objList75.parallelStream();
        comparators.Composite composite78 = new comparators.Composite(objList75);
        java.lang.Object[] objArray79 = composite78.toArray();
        int int80 = composite78.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream81 = composite78.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream82 = composite78.parallelStream();
        int int83 = composite78.startOffset;
        int int84 = composite64.compareTo(composite78);
        byte[] byteArray88 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray89 = new byte[] {};
        int int90 = comparators.Composite.compare(byteArray88, byteArray89);
        comparators.Composite composite91 = composite64.addBytes(byteArray89);
        java.nio.ByteBuffer byteBuffer92 = composite91.serializeToByteBuffer();
        compositeType54.validate(byteBuffer92);
        int int94 = comparators.Composite.compare(byteBuffer51, byteBuffer92);
        java.lang.String str95 = compositeType6.getString(byteBuffer92);
        comparators.Composite composite96 = new comparators.Composite(byteBuffer92);
        boolean boolean97 = comparators.Composite.validate(byteBuffer92);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(composite50);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(objList53);
        org.junit.Assert.assertNotNull(compositeType54);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(objList61);
        org.junit.Assert.assertNull(byteArray62);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(objList75);
        org.junit.Assert.assertNull(byteArray76);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(objStream81);
        org.junit.Assert.assertNotNull(objStream82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(composite91);
        org.junit.Assert.assertNotNull(byteBuffer92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        compositeTypeIterator80.type = 14;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer2 = compositeType0.fromString("Placeholder(1)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        int int1 = placeholder0.type;
        placeholder0.type = 6;
        java.lang.String str4 = placeholder0.toString();
        comparators.hector.CompositeSerializer compositeSerializer5 = new comparators.hector.CompositeSerializer();
        byte[] byteArray9 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray10 = new byte[] {};
        int int11 = comparators.Composite.compare(byteArray9, byteArray10);
        java.util.List<java.lang.Object> objList12 = comparators.Composite.deserialize(byteArray10);
        byte[] byteArray13 = comparators.Composite.serialize(objList12);
        java.util.stream.Stream<java.lang.Object> objStream14 = objList12.parallelStream();
        comparators.Composite composite15 = new comparators.Composite(objList12);
        java.lang.Object[] objArray16 = composite15.toArray();
        int int17 = composite15.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream18 = composite15.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream19 = composite15.parallelStream();
        comparators.Composite composite21 = composite15.addBool(true);
        java.io.DataOutputStream dataOutputStream22 = composite15.out;
        byte[] byteArray23 = compositeSerializer5.toBytes(composite15);
        boolean boolean24 = placeholder0.equals((java.lang.Object) composite15);
        int int25 = placeholder0.type;
        org.junit.Assert.assertNotNull(placeholder0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 100 + "'", int1 == 100);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Placeholder(6)" + "'", str4, "Placeholder(6)");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(objList12);
        org.junit.Assert.assertNull(byteArray13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(objStream19);
        org.junit.Assert.assertNotNull(composite21);
        org.junit.Assert.assertNotNull(dataOutputStream22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray12 = new byte[] {};
        int int13 = comparators.Composite.compare(byteArray11, byteArray12);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray12);
        byte[] byteArray15 = comparators.Composite.serialize(objList14);
        java.util.stream.Stream<java.lang.Object> objStream16 = objList14.parallelStream();
        comparators.Composite composite17 = new comparators.Composite(objList14);
        java.util.RandomAccess[] randomAccessArray18 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray19 = composite17.toArray(randomAccessArray18);
        comparators.Composite composite21 = composite17.addLong((long) 67);
        byte[] byteArray22 = composite21.serialize();
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray22);
        int int24 = comparators.Composite.compare(byteArray5, byteArray22);
        comparators.hector.CompositeSerializer compositeSerializer25 = new comparators.hector.CompositeSerializer();
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray30);
        byte[] byteArray33 = comparators.Composite.serialize(objList32);
        java.util.stream.Stream<java.lang.Object> objStream34 = objList32.parallelStream();
        comparators.Composite composite35 = new comparators.Composite(objList32);
        java.lang.Object[] objArray36 = composite35.toArray();
        int int37 = composite35.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream38 = composite35.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream39 = composite35.parallelStream();
        comparators.Composite composite41 = composite35.addBool(true);
        java.io.DataOutputStream dataOutputStream42 = composite35.out;
        byte[] byteArray43 = compositeSerializer25.toBytes(composite35);
        int int44 = comparators.Composite.compare(byteArray22, byteArray43);
        boolean boolean46 = comparators.Composite.validate(67, byteArray43, true);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray43);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList47.stream();
        comparators.Composite composite49 = new comparators.Composite(objList47);
        comparators.Composite composite50 = new comparators.Composite(objList47);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        java.util.List<java.lang.Object> objList57 = comparators.Composite.deserialize(byteArray55);
        byte[] byteArray58 = comparators.Composite.serialize(objList57);
        java.util.stream.Stream<java.lang.Object> objStream59 = objList57.parallelStream();
        comparators.Composite composite60 = new comparators.Composite(objList57);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        boolean boolean69 = comparators.Composite.validate((int) ' ', byteArray66, true);
        boolean boolean70 = composite60.contains((java.lang.Object) boolean69);
        java.util.Spliterator<java.lang.Object> objSpliterator71 = composite60.spliterator();
        comparators.Composite composite73 = composite60.addUTF8("Placeholder(1)");
        int int74 = comparators.Composite.compare(composite50, composite73);
        java.lang.Class<?> wildcardClass75 = composite50.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNull(byteArray15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(randomAccessArray18);
        org.junit.Assert.assertNotNull(randomAccessArray19);
        org.junit.Assert.assertNotNull(composite21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(composite41);
        org.junit.Assert.assertNotNull(dataOutputStream42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(objList57);
        org.junit.Assert.assertNull(byteArray58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objSpliterator71);
        org.junit.Assert.assertNotNull(composite73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        java.util.List<java.lang.Object> objList9 = comparators.Composite.deserialize(byteArray7);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray14);
        byte[] byteArray17 = comparators.Composite.serialize(objList16);
        java.util.stream.Stream<java.lang.Object> objStream18 = objList16.parallelStream();
        comparators.Composite composite19 = new comparators.Composite(objList16);
        java.util.RandomAccess[] randomAccessArray20 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray21 = composite19.toArray(randomAccessArray20);
        comparators.Composite composite23 = composite19.addLong((long) 67);
        byte[] byteArray24 = composite23.serialize();
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray24);
        int int26 = comparators.Composite.compare(byteArray7, byteArray24);
        comparators.hector.CompositeSerializer compositeSerializer27 = new comparators.hector.CompositeSerializer();
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray32 = new byte[] {};
        int int33 = comparators.Composite.compare(byteArray31, byteArray32);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray32);
        byte[] byteArray35 = comparators.Composite.serialize(objList34);
        java.util.stream.Stream<java.lang.Object> objStream36 = objList34.parallelStream();
        comparators.Composite composite37 = new comparators.Composite(objList34);
        java.lang.Object[] objArray38 = composite37.toArray();
        int int39 = composite37.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream40 = composite37.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream41 = composite37.parallelStream();
        comparators.Composite composite43 = composite37.addBool(true);
        java.io.DataOutputStream dataOutputStream44 = composite37.out;
        byte[] byteArray45 = compositeSerializer27.toBytes(composite37);
        int int46 = comparators.Composite.compare(byteArray24, byteArray45);
        boolean boolean47 = comparators.Composite.validate(1, byteArray45);
        boolean boolean49 = comparators.Composite.validate(43, byteArray45, false);
        byte[] byteArray53 = null;
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray65 = new byte[] {};
        int int66 = comparators.Composite.compare(byteArray64, byteArray65);
        int int67 = comparators.Composite.compare(byteArray58, byteArray65);
        int int68 = comparators.Composite.compare((int) (byte) 1, byteArray53, 10, byteArray58);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray74 = new byte[] {};
        int int75 = comparators.Composite.compare(byteArray73, byteArray74);
        java.util.List<java.lang.Object> objList76 = comparators.Composite.deserialize(byteArray74);
        boolean boolean77 = comparators.Composite.validate(0, byteArray74);
        byte[] byteArray78 = null;
        int int79 = comparators.Composite.compare(byteArray74, byteArray78);
        int int80 = comparators.Composite.compare(byteArray58, byteArray74);
        boolean boolean82 = comparators.Composite.validate((int) (short) 1, byteArray74, true);
        // The following exception was thrown during execution in test generation
        try {
            int int83 = comparators.Composite.compare(103, byteArray45, 100, byteArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(randomAccessArray20);
        org.junit.Assert.assertNotNull(randomAccessArray21);
        org.junit.Assert.assertNotNull(composite23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(composite43);
        org.junit.Assert.assertNotNull(dataOutputStream44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        int int13 = composite10.startOffset;
        byte[] byteArray14 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        comparators.Composite composite30 = composite24.addBool(true);
        java.util.Iterator<java.lang.Object> objItor31 = composite24.iterator();
        comparators.Composite composite33 = composite24.addReal((java.lang.Double) 100.0d);
        comparators.Composite composite35 = composite33.addLong((long) '#');
        byte[] byteArray36 = compositeSerializer0.toBytes(composite35);
        comparators.Composite composite38 = composite35.addReal((java.lang.Double) 1.0d);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        boolean boolean57 = comparators.Composite.validate((int) ' ', byteArray54, true);
        boolean boolean58 = composite48.contains((java.lang.Object) boolean57);
        java.util.Spliterator<java.lang.Object> objSpliterator59 = composite48.spliterator();
        byte[] byteArray60 = composite48.bytes;
        int int61 = composite35.compareTo(composite48);
        java.util.stream.Stream<java.lang.Object> objStream62 = composite35.parallelStream();
        comparators.Composite composite63 = composite35.addMatchMaximum();
        composite63.clear();
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        java.util.List<java.lang.Object> objList71 = comparators.Composite.deserialize(byteArray69);
        byte[] byteArray72 = comparators.Composite.serialize(objList71);
        java.util.stream.Stream<java.lang.Object> objStream73 = objList71.parallelStream();
        comparators.Composite composite74 = new comparators.Composite(objList71);
        java.lang.Object[] objArray75 = composite74.toArray();
        int int76 = composite74.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream77 = composite74.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream78 = composite74.parallelStream();
        int int79 = composite74.startOffset;
        composite74.clear();
        boolean boolean82 = composite74.equals((java.lang.Object) 1L);
        comparators.Composite composite84 = composite74.addLong(0L);
        java.io.ByteArrayOutputStream byteArrayOutputStream85 = composite74.byteStream;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean86 = composite63.retainAll((java.util.Collection<java.lang.Object>) composite74);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[67, 77, 80, 1, 2, 1, 0, 4, 64, 89, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 35, 0]");
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objSpliterator59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(composite63);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(objList71);
        org.junit.Assert.assertNull(byteArray72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(composite84);
        org.junit.Assert.assertNotNull(byteArrayOutputStream85);
        org.junit.Assert.assertEquals(byteArrayOutputStream85.toString(), "CMP\001\003\000\000\000\000\000\000\000\000");
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator10 = compositeType0.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator11 = compositeType0.indexComparator;
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        org.apache.cassandra.db.IColumn[] iColumnArray17 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList18 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList18, iColumnArray17);
        java.lang.String str20 = compositeType12.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList18);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator21 = compositeType12.getReverseComparator();
        comparators.CompositeType compositeType22 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray23 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList24 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24, byteBufferArray23);
        java.lang.String str26 = compositeType22.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24);
        org.apache.cassandra.db.IColumn[] iColumnArray27 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList28 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList28, iColumnArray27);
        java.lang.String str30 = compositeType22.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList28);
        java.lang.String str31 = compositeType12.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList28);
        java.lang.String str32 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList28);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator33 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator34 = compositeType0.indexComparator;
        comparators.hector.CompositeSerializer compositeSerializer35 = new comparators.hector.CompositeSerializer();
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(byteArray40);
        byte[] byteArray43 = comparators.Composite.serialize(objList42);
        java.util.stream.Stream<java.lang.Object> objStream44 = objList42.parallelStream();
        comparators.Composite composite45 = new comparators.Composite(objList42);
        java.lang.Object[] objArray46 = composite45.toArray();
        int int47 = composite45.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream48 = composite45.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream49 = composite45.parallelStream();
        comparators.Composite composite51 = composite45.addBool(true);
        java.io.DataOutputStream dataOutputStream52 = composite45.out;
        byte[] byteArray53 = compositeSerializer35.toBytes(composite45);
        comparators.CompositeType compositeType54 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray55 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList56 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList56, byteBufferArray55);
        java.lang.String str58 = compositeType54.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList56);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator59 = compositeType54.indexComparator;
        comparators.CompositeType compositeType60 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray61 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList62 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList62, byteBufferArray61);
        java.lang.String str64 = compositeType60.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList62);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator65 = compositeType54.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType60);
        comparators.CompositeType compositeType66 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray67 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList68 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList68, byteBufferArray67);
        java.lang.String str70 = compositeType66.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList68);
        java.lang.String str71 = compositeType60.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList68);
        comparators.CompositeType compositeType72 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray73 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList74 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList74, byteBufferArray73);
        java.lang.String str76 = compositeType72.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList74);
        java.lang.String str77 = compositeType60.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList74);
        java.util.List<comparators.Composite> compositeList78 = compositeSerializer35.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList74);
        java.lang.String str79 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList74);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(indexInfoComparator10);
        org.junit.Assert.assertNotNull(indexInfoComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(iColumnArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteBufferComparator21);
        org.junit.Assert.assertNotNull(compositeType22);
        org.junit.Assert.assertNotNull(byteBufferArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(iColumnArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteBufferComparator33);
        org.junit.Assert.assertNotNull(indexInfoComparator34);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(objList42);
        org.junit.Assert.assertNull(byteArray43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(composite51);
        org.junit.Assert.assertNotNull(dataOutputStream52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType54);
        org.junit.Assert.assertNotNull(byteBufferArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(indexInfoComparator59);
        org.junit.Assert.assertNotNull(compositeType60);
        org.junit.Assert.assertNotNull(byteBufferArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(byteBufferComparator65);
        org.junit.Assert.assertNotNull(compositeType66);
        org.junit.Assert.assertNotNull(byteBufferArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(compositeType72);
        org.junit.Assert.assertNotNull(byteBufferArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(compositeList78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        java.lang.Object[] objArray13 = composite9.toArray();
        int int14 = composite9.startOffset;
        composite9.startOffset = (byte) 10;
        java.util.stream.Stream<java.lang.Object> objStream17 = composite9.parallelStream();
        composite9.startOffset = 0;
        java.util.UUID uUID20 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite21 = composite9.addTimeUUID(uUID20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objStream17);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (short) 1;
        java.lang.String str3 = placeholder0.toString();
        boolean boolean5 = placeholder0.equals((java.lang.Object) 10L);
        int int6 = placeholder0.type;
        java.lang.String str7 = placeholder0.toString();
        placeholder0.type = 0;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        java.lang.String str11 = placeholder0.toString();
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Placeholder(1)" + "'", str3, "Placeholder(1)");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Placeholder(1)" + "'", str7, "Placeholder(1)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Placeholder(0)" + "'", str11, "Placeholder(0)");
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        boolean boolean9 = comparators.Composite.validate(0, byteArray6);
        boolean boolean11 = comparators.Composite.validate(77, byteArray6, false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType7.validate(byteBuffer50);
        java.lang.String str52 = compositeType0.getString(byteBuffer50);
        java.nio.ByteBuffer byteBuffer53 = null;
        int int54 = comparators.Composite.compare(byteBuffer50, byteBuffer53);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = comparators.Composite.validate(byteBuffer53, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        comparators.Composite composite37 = composite9.addLong((long) (short) 1);
        comparators.Composite composite39 = composite37.addBool(true);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList46.parallelStream();
        comparators.Composite composite49 = new comparators.Composite(objList46);
        java.lang.Object[] objArray50 = composite49.toArray();
        int int51 = composite49.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream52 = composite49.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream53 = composite49.parallelStream();
        comparators.Composite composite55 = composite49.addBool(true);
        java.util.Iterator<java.lang.Object> objItor56 = composite49.iterator();
        comparators.Composite composite58 = composite49.addReal((java.lang.Double) 100.0d);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        java.util.List<java.lang.Object> objList65 = comparators.Composite.deserialize(byteArray63);
        byte[] byteArray66 = comparators.Composite.serialize(objList65);
        java.util.stream.Stream<java.lang.Object> objStream67 = objList65.parallelStream();
        comparators.Composite composite68 = new comparators.Composite(objList65);
        java.lang.Object[] objArray69 = composite68.toArray();
        int int70 = composite68.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream71 = composite68.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream72 = composite68.parallelStream();
        int int73 = composite68.startOffset;
        composite68.clear();
        boolean boolean75 = composite58.containsAll((java.util.Collection<java.lang.Object>) composite68);
        java.util.Iterator<java.lang.Object> objItor76 = composite58.iterator();
        boolean boolean77 = composite37.add((java.lang.Object) composite58);
        comparators.Composite composite79 = composite58.addBool(true);
        java.lang.Object[] objArray80 = composite58.toArray();
        comparators.Composite composite82 = composite58.addUTF8("341");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(objItor56);
        org.junit.Assert.assertNotNull(composite58);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(objList65);
        org.junit.Assert.assertNull(byteArray66);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[true]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[true]");
        org.junit.Assert.assertNotNull(composite82);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        int int86 = compositeTypeIterator80.type;
        int int87 = compositeTypeIterator80.start;
        int int88 = compositeTypeIterator80.start;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 67 + "'", int87 == 67);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 67 + "'", int88 == 67);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator12 = compositeType0.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = compositeType0.getReverseComparator();
        comparators.CompositeType compositeType14 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray15 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList16 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16, byteBufferArray15);
        java.lang.String str18 = compositeType14.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator19 = compositeType14.indexComparator;
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator25 = compositeType14.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType20);
        comparators.CompositeType compositeType26 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray27 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList28 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28, byteBufferArray27);
        java.lang.String str30 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28);
        java.lang.String str31 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28);
        comparators.CompositeType compositeType32 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray33 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList34 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34, byteBufferArray33);
        java.lang.String str36 = compositeType32.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34);
        java.lang.String str37 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34);
        comparators.CompositeType compositeType38 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray39 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList40 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList40, byteBufferArray39);
        java.lang.String str42 = compositeType38.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList40);
        org.apache.cassandra.db.IColumn[] iColumnArray43 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList44 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList44, iColumnArray43);
        java.lang.String str46 = compositeType38.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList44);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator47 = compositeType38.getReverseComparator();
        comparators.CompositeType compositeType48 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray49 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList50 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList50, byteBufferArray49);
        java.lang.String str52 = compositeType48.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList50);
        org.apache.cassandra.db.IColumn[] iColumnArray53 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList54 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList54, iColumnArray53);
        java.lang.String str56 = compositeType48.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList54);
        java.lang.String str57 = compositeType38.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList54);
        java.lang.String str58 = compositeType20.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList54);
        java.lang.String str59 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList54);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator60 = compositeType0.indexComparator;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer62 = compositeType0.fromString("341");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(indexInfoComparator12);
        org.junit.Assert.assertNotNull(byteBufferComparator13);
        org.junit.Assert.assertNotNull(compositeType14);
        org.junit.Assert.assertNotNull(byteBufferArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(indexInfoComparator19);
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteBufferComparator25);
        org.junit.Assert.assertNotNull(compositeType26);
        org.junit.Assert.assertNotNull(byteBufferArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(compositeType32);
        org.junit.Assert.assertNotNull(byteBufferArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(compositeType38);
        org.junit.Assert.assertNotNull(byteBufferArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(iColumnArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteBufferComparator47);
        org.junit.Assert.assertNotNull(compositeType48);
        org.junit.Assert.assertNotNull(byteBufferArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(iColumnArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(indexInfoComparator60);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        comparators.Composite composite7 = new comparators.Composite(byteArray4);
        int int8 = composite7.startOffset;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        byte[] byteArray20 = comparators.Composite.serialize(objList18);
        byte[] byteArray21 = compositeListSerializer0.toBytes(objList18);
        byte[] byteArray22 = null;
        java.util.List<java.lang.Object> objList23 = compositeListSerializer0.fromBytes(byteArray22);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray29 = new byte[] {};
        int int30 = comparators.Composite.compare(byteArray28, byteArray29);
        java.util.List<java.lang.Object> objList31 = comparators.Composite.deserialize(byteArray29);
        boolean boolean32 = comparators.Composite.validate(0, byteArray29);
        java.util.List<java.lang.Object> objList33 = compositeListSerializer0.fromBytes(byteArray29);
        int int35 = compositeListSerializer0.computeInitialHashSize(15);
        comparators.hector.CompositeListSerializer compositeListSerializer36 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType37 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray38 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList39 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList39, byteBufferArray38);
        java.lang.String str41 = compositeType37.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList39);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator42 = compositeType37.indexComparator;
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray44 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList45 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45, byteBufferArray44);
        java.lang.String str47 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator48 = compositeType37.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType43);
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray50 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList51 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51, byteBufferArray50);
        java.lang.String str53 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        java.lang.String str54 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        java.util.List<java.util.List<java.lang.Object>> objListList55 = compositeListSerializer36.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList51);
        int int57 = compositeListSerializer36.computeInitialHashSize(9);
        comparators.hector.CompositeListSerializer compositeListSerializer58 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        java.util.List<java.lang.Object> objList65 = comparators.Composite.deserialize(byteArray63);
        byte[] byteArray66 = comparators.Composite.serialize(objList65);
        java.util.stream.Stream<java.lang.Object> objStream67 = objList65.parallelStream();
        comparators.Composite composite68 = new comparators.Composite(objList65);
        byte[] byteArray69 = compositeListSerializer58.toBytes(objList65);
        int int71 = compositeListSerializer58.computeInitialHashSize((int) ' ');
        comparators.hector.CompositeListSerializer compositeListSerializer72 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType73 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray74 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList75 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList75, byteBufferArray74);
        java.lang.String str77 = compositeType73.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList75);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator78 = compositeType73.indexComparator;
        comparators.CompositeType compositeType79 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray80 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList81 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList81, byteBufferArray80);
        java.lang.String str83 = compositeType79.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList81);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator84 = compositeType73.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType79);
        comparators.CompositeType compositeType85 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray86 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList87 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList87, byteBufferArray86);
        java.lang.String str89 = compositeType85.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList87);
        java.lang.String str90 = compositeType79.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList87);
        java.util.List<java.util.List<java.lang.Object>> objListList91 = compositeListSerializer72.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList87);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet92 = compositeListSerializer58.toBytesSet(objListList91);
        java.util.List<java.nio.ByteBuffer> byteBufferList93 = compositeListSerializer36.toBytesList(objListList91);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet94 = compositeListSerializer0.toBytesSet(objListList91);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(objList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 21 + "'", int35 == 21);
        org.junit.Assert.assertNotNull(compositeType37);
        org.junit.Assert.assertNotNull(byteBufferArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(indexInfoComparator42);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(byteBufferArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteBufferComparator48);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(objListList55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 13 + "'", int57 == 13);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(objList65);
        org.junit.Assert.assertNull(byteArray66);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNull(byteArray69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 43 + "'", int71 == 43);
        org.junit.Assert.assertNotNull(compositeType73);
        org.junit.Assert.assertNotNull(byteBufferArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(indexInfoComparator78);
        org.junit.Assert.assertNotNull(compositeType79);
        org.junit.Assert.assertNotNull(byteBufferArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(byteBufferComparator84);
        org.junit.Assert.assertNotNull(compositeType85);
        org.junit.Assert.assertNotNull(byteBufferArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(objListList91);
        org.junit.Assert.assertNotNull(byteBufferSet92);
        org.junit.Assert.assertNotNull(byteBufferList93);
        org.junit.Assert.assertNotNull(byteBufferSet94);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        compositeTypeIterator80.offset = (short) 0;
        boolean boolean85 = compositeTypeIterator80.hasNext();
        int int86 = compositeTypeIterator80.offset;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj87 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        byte[] byteArray1 = null;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray13 = new byte[] {};
        int int14 = comparators.Composite.compare(byteArray12, byteArray13);
        int int15 = comparators.Composite.compare(byteArray6, byteArray13);
        int int16 = comparators.Composite.compare((int) (byte) 1, byteArray1, 10, byteArray6);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        int int29 = comparators.Composite.compare(byteArray20, byteArray27);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray27);
        int int31 = comparators.Composite.compare(byteArray6, byteArray27);
        comparators.Composite composite32 = new comparators.Composite(byteArray27);
        boolean boolean34 = composite32.contains((java.lang.Object) '4');
        boolean boolean35 = comparators.Composite.isValidType((java.lang.Object) composite32);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray11 = new byte[] {};
        int int12 = comparators.Composite.compare(byteArray10, byteArray11);
        int int13 = comparators.Composite.compare(byteArray4, byteArray11);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray11);
        comparators.Composite composite15 = compositeSerializer0.fromBytes(byteArray11);
        int int17 = compositeSerializer0.computeInitialHashSize(1);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.util.RandomAccess[] randomAccessArray28 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray29 = composite27.toArray(randomAccessArray28);
        comparators.Composite composite31 = composite27.addLong((long) 67);
        comparators.Composite composite33 = composite31.addBool(true);
        comparators.Composite composite35 = composite31.addLong((long) 2);
        java.nio.ByteBuffer byteBuffer36 = composite31.serializeToByteBuffer();
        comparators.Composite composite37 = compositeSerializer0.fromByteBuffer(byteBuffer36);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        java.util.List<java.lang.Object> objList44 = comparators.Composite.deserialize(byteArray42);
        byte[] byteArray45 = comparators.Composite.serialize(objList44);
        java.util.stream.Stream<java.lang.Object> objStream46 = objList44.parallelStream();
        comparators.Composite composite47 = new comparators.Composite(objList44);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        boolean boolean56 = comparators.Composite.validate((int) ' ', byteArray53, true);
        boolean boolean57 = composite47.contains((java.lang.Object) boolean56);
        java.util.stream.Stream<java.lang.Object> objStream58 = composite47.parallelStream();
        composite47.startOffset = 8;
        comparators.Composite composite62 = composite47.addAscii("hi!");
        comparators.Composite composite64 = composite47.addLong((long) 4);
        byte[] byteArray65 = compositeSerializer0.toBytes(composite64);
        comparators.Composite composite67 = composite64.addUTF8("UTF-8");
        int int68 = composite64.size();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(randomAccessArray28);
        org.junit.Assert.assertNotNull(randomAccessArray29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(objList44);
        org.junit.Assert.assertNull(byteArray45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(composite62);
        org.junit.Assert.assertNotNull(composite64);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[67, 77, 80, 1, 7, 0, 3, 104, 105, 33, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0]");
        org.junit.Assert.assertNotNull(composite67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        byte[] byteArray12 = composite9.bytes;
        java.io.DataOutputStream dataOutputStream13 = null;
        composite9.out = dataOutputStream13;
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.util.RandomAccess[] randomAccessArray25 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray26 = composite24.toArray(randomAccessArray25);
        comparators.Composite composite27 = new comparators.Composite((java.lang.Object[]) randomAccessArray26);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = composite9.retainAll((java.util.Collection<java.lang.Object>) composite27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(randomAccessArray25);
        org.junit.Assert.assertNotNull(randomAccessArray26);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        comparators.CompositeType compositeType12 = new comparators.CompositeType();
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray32 = new byte[] {};
        int int33 = comparators.Composite.compare(byteArray31, byteArray32);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray32);
        byte[] byteArray35 = comparators.Composite.serialize(objList34);
        java.util.stream.Stream<java.lang.Object> objStream36 = objList34.parallelStream();
        comparators.Composite composite37 = new comparators.Composite(objList34);
        java.lang.Object[] objArray38 = composite37.toArray();
        int int39 = composite37.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream40 = composite37.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream41 = composite37.parallelStream();
        int int42 = composite37.startOffset;
        int int43 = composite23.compareTo(composite37);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        comparators.Composite composite50 = composite23.addBytes(byteArray48);
        java.nio.ByteBuffer byteBuffer51 = composite50.serializeToByteBuffer();
        compositeType13.validate(byteBuffer51);
        boolean boolean53 = comparators.Composite.validate(byteBuffer51);
        comparators.Composite composite54 = new comparators.Composite(byteBuffer51);
        java.nio.ByteBuffer byteBuffer55 = null;
        int int56 = compositeType12.compare(byteBuffer51, byteBuffer55);
        comparators.Composite composite57 = new comparators.Composite(byteBuffer51);
        java.util.List<java.lang.Object> objList58 = compositeListSerializer0.fromByteBuffer(byteBuffer51);
        boolean boolean60 = comparators.Composite.validate(byteBuffer51, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(composite50);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(objList58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        comparators.CompositeType compositeType1 = new comparators.CompositeType();
        comparators.CompositeType compositeType2 = comparators.CompositeType.instance;
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        java.util.List<java.lang.Object> objList9 = comparators.Composite.deserialize(byteArray7);
        byte[] byteArray10 = comparators.Composite.serialize(objList9);
        java.util.stream.Stream<java.lang.Object> objStream11 = objList9.parallelStream();
        comparators.Composite composite12 = new comparators.Composite(objList9);
        java.lang.Object[] objArray13 = composite12.toArray();
        int int14 = composite12.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream15 = composite12.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream16 = composite12.parallelStream();
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        int int31 = composite26.startOffset;
        int int32 = composite12.compareTo(composite26);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        comparators.Composite composite39 = composite12.addBytes(byteArray37);
        java.nio.ByteBuffer byteBuffer40 = composite39.serializeToByteBuffer();
        compositeType2.validate(byteBuffer40);
        boolean boolean42 = comparators.Composite.validate(byteBuffer40);
        comparators.Composite composite43 = new comparators.Composite(byteBuffer40);
        java.nio.ByteBuffer byteBuffer44 = null;
        int int45 = compositeType1.compare(byteBuffer40, byteBuffer44);
        compositeType0.validate(byteBuffer40);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteBuffer40);
        comparators.CompositeType compositeType48 = new comparators.CompositeType();
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        java.lang.Object[] objArray60 = composite59.toArray();
        int int61 = composite59.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream62 = composite59.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream63 = composite59.parallelStream();
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray68 = new byte[] {};
        int int69 = comparators.Composite.compare(byteArray67, byteArray68);
        java.util.List<java.lang.Object> objList70 = comparators.Composite.deserialize(byteArray68);
        byte[] byteArray71 = comparators.Composite.serialize(objList70);
        java.util.stream.Stream<java.lang.Object> objStream72 = objList70.parallelStream();
        comparators.Composite composite73 = new comparators.Composite(objList70);
        java.lang.Object[] objArray74 = composite73.toArray();
        int int75 = composite73.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream76 = composite73.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream77 = composite73.parallelStream();
        int int78 = composite73.startOffset;
        int int79 = composite59.compareTo(composite73);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray84 = new byte[] {};
        int int85 = comparators.Composite.compare(byteArray83, byteArray84);
        comparators.Composite composite86 = composite59.addBytes(byteArray84);
        java.nio.ByteBuffer byteBuffer87 = composite86.serializeToByteBuffer();
        compositeType49.validate(byteBuffer87);
        boolean boolean89 = comparators.Composite.validate(byteBuffer87);
        comparators.Composite composite90 = new comparators.Composite(byteBuffer87);
        java.nio.ByteBuffer byteBuffer91 = null;
        int int92 = compositeType48.compare(byteBuffer87, byteBuffer91);
        comparators.Composite composite93 = new comparators.Composite(byteBuffer87);
        comparators.Composite composite94 = new comparators.Composite(byteBuffer87);
        comparators.Composite composite95 = new comparators.Composite(byteBuffer87);
        boolean boolean97 = comparators.Composite.validate(byteBuffer87, true);
        int int98 = comparators.Composite.compare(byteBuffer40, byteBuffer87);
        boolean boolean99 = comparators.Composite.validate(byteBuffer87);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(compositeType2);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(objList70);
        org.junit.Assert.assertNull(byteArray71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(objStream76);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        boolean boolean1 = comparators.Composite.isValidType((java.lang.Object) compositeType0);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer3 = compositeType0.fromString("Placeholder(32)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray28 = comparators.Composite.serialize(objList27);
        java.util.stream.Stream<java.lang.Object> objStream29 = objList27.parallelStream();
        comparators.Composite composite30 = new comparators.Composite(objList27);
        java.lang.Object[] objArray31 = composite30.toArray();
        int int32 = composite30.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream33 = composite30.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream34 = composite30.parallelStream();
        comparators.Composite composite36 = composite30.addBool(true);
        java.io.DataOutputStream dataOutputStream37 = composite30.out;
        composite9.out = dataOutputStream37;
        byte[] byteArray39 = composite9.serialize();
        java.io.DataOutputStream dataOutputStream40 = composite9.out;
        int int41 = composite9.startOffset;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(dataOutputStream37);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(dataOutputStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.io.DataOutputStream dataOutputStream16 = composite9.out;
        comparators.Composite composite18 = composite9.addAscii("Placeholder(6)");
        java.io.ByteArrayOutputStream byteArrayOutputStream19 = composite9.byteStream;
        java.util.UUID uUID20 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite21 = composite9.addTimeUUID(uUID20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(dataOutputStream16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArrayOutputStream19);
        org.junit.Assert.assertEquals(byteArrayOutputStream19.toString(), "CMP\001\002\001\007\000\016Placeholder(6)");
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        java.io.DataOutputStream dataOutputStream21 = composite9.out;
        java.lang.String str22 = composite9.toString();
        java.util.Iterator<java.lang.Object> objItor23 = composite9.iterator();
        comparators.Composite composite25 = composite9.addUTF8("Placeholder(0)");
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray30);
        byte[] byteArray33 = comparators.Composite.serialize(objList32);
        java.util.stream.Stream<java.lang.Object> objStream34 = objList32.parallelStream();
        comparators.Composite composite35 = new comparators.Composite(objList32);
        java.util.RandomAccess[] randomAccessArray36 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray37 = composite35.toArray(randomAccessArray36);
        byte[] byteArray38 = comparators.Composite.serialize((java.lang.Object[]) randomAccessArray37);
        comparators.Composite composite39 = new comparators.Composite((java.lang.Object[]) randomAccessArray37);
        // The following exception was thrown during execution in test generation
        try {
            java.util.RandomAccess[] randomAccessArray40 = composite25.toArray(randomAccessArray37);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(dataOutputStream21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(objItor23);
        org.junit.Assert.assertNotNull(composite25);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(randomAccessArray36);
        org.junit.Assert.assertNotNull(randomAccessArray37);
        org.junit.Assert.assertNull(byteArray38);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray12 = new byte[] {};
        int int13 = comparators.Composite.compare(byteArray11, byteArray12);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray12);
        byte[] byteArray15 = comparators.Composite.serialize(objList14);
        java.util.stream.Stream<java.lang.Object> objStream16 = objList14.parallelStream();
        comparators.Composite composite17 = new comparators.Composite(objList14);
        java.util.RandomAccess[] randomAccessArray18 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray19 = composite17.toArray(randomAccessArray18);
        comparators.Composite composite21 = composite17.addLong((long) 67);
        byte[] byteArray22 = composite21.serialize();
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray22);
        int int24 = comparators.Composite.compare(byteArray5, byteArray22);
        comparators.hector.CompositeSerializer compositeSerializer25 = new comparators.hector.CompositeSerializer();
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray30);
        byte[] byteArray33 = comparators.Composite.serialize(objList32);
        java.util.stream.Stream<java.lang.Object> objStream34 = objList32.parallelStream();
        comparators.Composite composite35 = new comparators.Composite(objList32);
        java.lang.Object[] objArray36 = composite35.toArray();
        int int37 = composite35.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream38 = composite35.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream39 = composite35.parallelStream();
        comparators.Composite composite41 = composite35.addBool(true);
        java.io.DataOutputStream dataOutputStream42 = composite35.out;
        byte[] byteArray43 = compositeSerializer25.toBytes(composite35);
        int int44 = comparators.Composite.compare(byteArray22, byteArray43);
        boolean boolean46 = comparators.Composite.validate(67, byteArray43, true);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray43);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList47.stream();
        comparators.Composite composite49 = new comparators.Composite(objList47);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        java.util.RandomAccess[] randomAccessArray60 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray61 = composite59.toArray(randomAccessArray60);
        comparators.Composite composite63 = composite59.addUTF8("UTF-8");
        boolean boolean64 = composite49.containsAll((java.util.Collection<java.lang.Object>) composite63);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNull(byteArray15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(randomAccessArray18);
        org.junit.Assert.assertNotNull(randomAccessArray19);
        org.junit.Assert.assertNotNull(composite21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(composite41);
        org.junit.Assert.assertNotNull(dataOutputStream42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(randomAccessArray60);
        org.junit.Assert.assertNotNull(randomAccessArray61);
        org.junit.Assert.assertNotNull(composite63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        comparators.Composite composite37 = composite9.addLong((long) (short) 1);
        comparators.Composite composite39 = composite37.addBool(true);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList46.parallelStream();
        comparators.Composite composite49 = new comparators.Composite(objList46);
        java.lang.Object[] objArray50 = composite49.toArray();
        int int51 = composite49.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream52 = composite49.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream53 = composite49.parallelStream();
        comparators.Composite composite55 = composite49.addBool(true);
        java.util.Iterator<java.lang.Object> objItor56 = composite49.iterator();
        comparators.Composite composite58 = composite49.addReal((java.lang.Double) 100.0d);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        java.util.List<java.lang.Object> objList65 = comparators.Composite.deserialize(byteArray63);
        byte[] byteArray66 = comparators.Composite.serialize(objList65);
        java.util.stream.Stream<java.lang.Object> objStream67 = objList65.parallelStream();
        comparators.Composite composite68 = new comparators.Composite(objList65);
        java.lang.Object[] objArray69 = composite68.toArray();
        int int70 = composite68.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream71 = composite68.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream72 = composite68.parallelStream();
        int int73 = composite68.startOffset;
        composite68.clear();
        boolean boolean75 = composite58.containsAll((java.util.Collection<java.lang.Object>) composite68);
        java.util.Iterator<java.lang.Object> objItor76 = composite58.iterator();
        boolean boolean77 = composite37.add((java.lang.Object) composite58);
        comparators.CompositeType compositeType78 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray79 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList80 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList80, byteBufferArray79);
        java.lang.String str82 = compositeType78.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList80);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator83 = compositeType78.indexComparator;
        comparators.CompositeType compositeType84 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray85 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList86 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList86, byteBufferArray85);
        java.lang.String str88 = compositeType84.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList86);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator89 = compositeType78.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType84);
        comparators.CompositeType compositeType90 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray91 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList92 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList92, byteBufferArray91);
        java.lang.String str94 = compositeType90.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList92);
        java.lang.String str95 = compositeType84.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList92);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator96 = compositeType84.getReverseComparator();
        boolean boolean97 = composite58.contains((java.lang.Object) byteBufferComparator96);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(objItor56);
        org.junit.Assert.assertNotNull(composite58);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(objList65);
        org.junit.Assert.assertNull(byteArray66);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(compositeType78);
        org.junit.Assert.assertNotNull(byteBufferArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(indexInfoComparator83);
        org.junit.Assert.assertNotNull(compositeType84);
        org.junit.Assert.assertNotNull(byteBufferArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(byteBufferComparator89);
        org.junit.Assert.assertNotNull(compositeType90);
        org.junit.Assert.assertNotNull(byteBufferArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertNotNull(byteBufferComparator96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        boolean boolean45 = comparators.Composite.validate((int) ' ', byteArray42, true);
        boolean boolean46 = composite36.contains((java.lang.Object) boolean45);
        java.util.stream.Stream<java.lang.Object> objStream47 = composite36.parallelStream();
        composite36.startOffset = 8;
        comparators.Composite composite51 = composite36.addAscii("hi!");
        java.lang.String str52 = composite36.toString();
        composite36.startOffset = 2;
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        boolean boolean64 = comparators.Composite.validate((int) ' ', byteArray61, true);
        boolean boolean65 = comparators.Composite.validate(100, byteArray61);
        byte[] byteArray69 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray70 = new byte[] {};
        int int71 = comparators.Composite.compare(byteArray69, byteArray70);
        java.util.List<java.lang.Object> objList72 = comparators.Composite.deserialize(byteArray70);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray77);
        byte[] byteArray80 = comparators.Composite.serialize(objList79);
        java.util.stream.Stream<java.lang.Object> objStream81 = objList79.parallelStream();
        comparators.Composite composite82 = new comparators.Composite(objList79);
        java.util.RandomAccess[] randomAccessArray83 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray84 = composite82.toArray(randomAccessArray83);
        comparators.Composite composite86 = composite82.addLong((long) 67);
        byte[] byteArray87 = composite86.serialize();
        java.util.List<java.lang.Object> objList88 = comparators.Composite.deserialize(byteArray87);
        int int89 = comparators.Composite.compare(byteArray70, byteArray87);
        int int90 = comparators.Composite.compare(byteArray61, byteArray87);
        composite36.bytes = byteArray61;
        composite9.bytes = byteArray61;
        comparators.Composite composite94 = composite9.addUTF8("Placeholder(1)");
        composite9.startOffset = 43;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(composite51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objList72);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNull(byteArray80);
        org.junit.Assert.assertNotNull(objStream81);
        org.junit.Assert.assertNotNull(randomAccessArray83);
        org.junit.Assert.assertNotNull(randomAccessArray84);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(composite94);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (short) 1;
        comparators.CompositeType compositeType3 = new comparators.CompositeType();
        comparators.CompositeType compositeType4 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray5 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList6 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList6, byteBufferArray5);
        java.lang.String str8 = compositeType4.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList6);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator9 = compositeType4.indexComparator;
        comparators.CompositeType compositeType10 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray11 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList12 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12, byteBufferArray11);
        java.lang.String str14 = compositeType10.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator15 = compositeType4.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType10);
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        int int41 = composite39.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream42 = composite39.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream43 = composite39.parallelStream();
        int int44 = composite39.startOffset;
        int int45 = composite25.compareTo(composite39);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        comparators.Composite composite52 = composite25.addBytes(byteArray50);
        java.nio.ByteBuffer byteBuffer53 = composite52.serializeToByteBuffer();
        compositeType10.validate(byteBuffer53);
        java.lang.String str55 = compositeType3.getString(byteBuffer53);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator56 = compositeType3.indexComparator;
        boolean boolean57 = placeholder0.equals((java.lang.Object) compositeType3);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator58 = compositeType3.reversed();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer60 = compositeType3.fromString("Placeholder(58)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertNotNull(compositeType4);
        org.junit.Assert.assertNotNull(byteBufferArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(indexInfoComparator9);
        org.junit.Assert.assertNotNull(compositeType10);
        org.junit.Assert.assertNotNull(byteBufferArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteBufferComparator15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(composite52);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(indexInfoComparator56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(byteBufferComparator58);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        byte[] byteArray12 = composite9.bytes;
        java.io.DataOutputStream dataOutputStream13 = null;
        composite9.out = dataOutputStream13;
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        int int27 = comparators.Composite.compare(byteArray18, byteArray25);
        boolean boolean28 = comparators.Composite.isValidType((java.lang.Object) byteArray18);
        comparators.Composite composite29 = composite9.addBytes(byteArray18);
        byte[] byteArray30 = composite9.bytes;
        comparators.Composite.Placeholder placeholder31 = comparators.Composite.MATCH_MINIMUM;
        placeholder31.type = '#';
        int int34 = placeholder31.type;
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.lang.Object[] objArray45 = composite44.toArray();
        int int46 = composite44.startOffset;
        int int47 = composite44.startOffset;
        java.lang.Object[] objArray48 = composite44.toArray();
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        int int61 = comparators.Composite.compare(byteArray52, byteArray59);
        composite44.bytes = byteArray59;
        boolean boolean63 = placeholder31.equals((java.lang.Object) byteArray59);
        comparators.Composite composite64 = composite9.addBytes(byteArray59);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        java.util.List<java.lang.Object> objList71 = comparators.Composite.deserialize(byteArray69);
        byte[] byteArray72 = comparators.Composite.serialize(objList71);
        java.util.stream.Stream<java.lang.Object> objStream73 = objList71.parallelStream();
        comparators.Composite composite74 = new comparators.Composite(objList71);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        boolean boolean83 = comparators.Composite.validate((int) ' ', byteArray80, true);
        boolean boolean84 = composite74.contains((java.lang.Object) boolean83);
        java.util.Spliterator<java.lang.Object> objSpliterator85 = composite74.spliterator();
        int int86 = composite74.startOffset;
        comparators.Composite composite88 = composite74.addAscii("hi!");
        java.util.stream.Stream<java.lang.Object> objStream89 = composite74.stream();
        int int90 = composite9.compareTo(composite74);
        java.util.UUID uUID91 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite92 = composite9.addLexicalUUID(uUID91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNotNull(placeholder31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(composite64);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(objList71);
        org.junit.Assert.assertNull(byteArray72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objSpliterator85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(composite88);
        org.junit.Assert.assertNotNull(objStream89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.lang.String str17 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite42.startOffset;
        int int48 = composite28.compareTo(composite42);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        comparators.Composite composite55 = composite28.addBytes(byteArray53);
        java.nio.ByteBuffer byteBuffer56 = composite55.serializeToByteBuffer();
        compositeType18.validate(byteBuffer56);
        java.lang.String str58 = compositeType6.getString(byteBuffer56);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator59 = compositeType6.indexReverseComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator60 = compositeType6.indexReverseComparator;
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(indexInfoComparator59);
        org.junit.Assert.assertNotNull(indexInfoComparator60);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        comparators.CompositeType compositeType9 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray10 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList11 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11, byteBufferArray10);
        java.lang.String str13 = compositeType9.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType9.indexComparator;
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator20 = compositeType9.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType15);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator21 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType9);
        comparators.CompositeType compositeType22 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray23 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList24 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24, byteBufferArray23);
        java.lang.String str26 = compositeType22.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator27 = compositeType22.indexComparator;
        boolean boolean28 = comparators.Composite.isValidType((java.lang.Object) compositeType22);
        comparators.CompositeType compositeType29 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator30 = compositeType29.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType22.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        comparators.CompositeType compositeType32 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray33 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList34 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34, byteBufferArray33);
        java.lang.String str36 = compositeType32.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator37 = compositeType32.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator38 = compositeType29.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType32);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator39 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        org.apache.cassandra.db.IColumn[] iColumnArray45 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList46 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList46, iColumnArray45);
        java.lang.String str48 = compositeType40.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList46);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator49 = compositeType40.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator50 = compositeType40.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator51 = compositeType40.indexComparator;
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray53 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList54 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54, byteBufferArray53);
        java.lang.String str56 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        org.apache.cassandra.db.IColumn[] iColumnArray57 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList58 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58, iColumnArray57);
        java.lang.String str60 = compositeType52.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator61 = compositeType52.getReverseComparator();
        comparators.CompositeType compositeType62 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray63 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList64 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64, byteBufferArray63);
        java.lang.String str66 = compositeType62.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList64);
        org.apache.cassandra.db.IColumn[] iColumnArray67 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList68 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68, iColumnArray67);
        java.lang.String str70 = compositeType62.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68);
        java.lang.String str71 = compositeType52.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68);
        java.lang.String str72 = compositeType40.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68);
        java.lang.String str73 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList68);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator74 = compositeType0.getReverseComparator();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer76 = compositeType0.fromString("Placeholder(90)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(compositeType9);
        org.junit.Assert.assertNotNull(byteBufferArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteBufferComparator20);
        org.junit.Assert.assertNotNull(byteBufferComparator21);
        org.junit.Assert.assertNotNull(compositeType22);
        org.junit.Assert.assertNotNull(byteBufferArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(indexInfoComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(indexInfoComparator30);
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(compositeType32);
        org.junit.Assert.assertNotNull(byteBufferArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(indexInfoComparator37);
        org.junit.Assert.assertNotNull(byteBufferComparator38);
        org.junit.Assert.assertNotNull(byteBufferComparator39);
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(iColumnArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteBufferComparator49);
        org.junit.Assert.assertNotNull(indexInfoComparator50);
        org.junit.Assert.assertNotNull(indexInfoComparator51);
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(iColumnArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteBufferComparator61);
        org.junit.Assert.assertNotNull(compositeType62);
        org.junit.Assert.assertNotNull(byteBufferArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(iColumnArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(byteBufferComparator74);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        comparators.CompositeType compositeType19 = comparators.CompositeType.instance;
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        int int48 = composite43.startOffset;
        int int49 = composite29.compareTo(composite43);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        comparators.Composite composite56 = composite29.addBytes(byteArray54);
        java.nio.ByteBuffer byteBuffer57 = composite56.serializeToByteBuffer();
        compositeType19.validate(byteBuffer57);
        boolean boolean59 = comparators.Composite.validate(byteBuffer57);
        boolean boolean60 = comparators.Composite.validate(byteBuffer57);
        comparators.Composite composite61 = compositeSerializer0.fromByteBuffer(byteBuffer57);
        int int63 = compositeSerializer0.computeInitialHashSize(8);
        int int65 = compositeSerializer0.computeInitialHashSize(11);
        java.util.List<comparators.Composite> compositeList66 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Set<java.nio.ByteBuffer> byteBufferSet67 = compositeSerializer0.toBytesSet(compositeList66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(composite56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 11 + "'", int63 == 11);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 15 + "'", int65 == 15);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        comparators.CompositeType compositeType9 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray10 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList11 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11, byteBufferArray10);
        java.lang.String str13 = compositeType9.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType9.indexComparator;
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator20 = compositeType9.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType15);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator21 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType0.reversed();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer24 = compositeType0.fromString("Placeholder(-1)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(compositeType9);
        org.junit.Assert.assertNotNull(byteBufferArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteBufferComparator20);
        org.junit.Assert.assertNotNull(byteBufferComparator21);
        org.junit.Assert.assertNotNull(byteBufferComparator22);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        int int13 = composite10.startOffset;
        byte[] byteArray14 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        comparators.Composite composite30 = composite24.addBool(true);
        java.util.Iterator<java.lang.Object> objItor31 = composite24.iterator();
        comparators.Composite composite33 = composite24.addReal((java.lang.Double) 100.0d);
        comparators.Composite composite35 = composite33.addLong((long) '#');
        byte[] byteArray36 = compositeSerializer0.toBytes(composite35);
        comparators.Composite composite38 = composite35.addReal((java.lang.Double) 1.0d);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        boolean boolean57 = comparators.Composite.validate((int) ' ', byteArray54, true);
        boolean boolean58 = composite48.contains((java.lang.Object) boolean57);
        java.util.Spliterator<java.lang.Object> objSpliterator59 = composite48.spliterator();
        byte[] byteArray60 = composite48.bytes;
        int int61 = composite35.compareTo(composite48);
        java.util.stream.Stream<java.lang.Object> objStream62 = composite35.parallelStream();
        comparators.Composite composite63 = composite35.addMatchMaximum();
        composite63.clear();
        java.lang.Object[] objArray65 = composite63.toArray();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[67, 77, 80, 1, 2, 1, 0, 4, 64, 89, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 35, 0]");
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objSpliterator59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(composite63);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        byte[] byteArray82 = compositeTypeIterator80.bytes;
        int int83 = compositeTypeIterator80.type;
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray88 = new byte[] {};
        int int89 = comparators.Composite.compare(byteArray87, byteArray88);
        byte[] byteArray93 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray94 = new byte[] {};
        int int95 = comparators.Composite.compare(byteArray93, byteArray94);
        int int96 = comparators.Composite.compare(byteArray87, byteArray94);
        compositeTypeIterator80.bytes = byteArray87;
        byte[] byteArray98 = compositeTypeIterator80.bytes;
        int int99 = compositeTypeIterator80.offset;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertNotNull(byteArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray98), "[10, 10, -1]");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 67 + "'", int99 == 67);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        comparators.Composite composite34 = composite28.addBool(true);
        comparators.Composite composite36 = composite34.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream37 = composite34.byteStream;
        java.nio.ByteBuffer byteBuffer38 = compositeSerializer0.toByteBuffer(composite34);
        boolean boolean39 = comparators.Composite.validate(byteBuffer38);
        boolean boolean41 = comparators.Composite.validate(byteBuffer38, true);
        boolean boolean43 = comparators.Composite.validate(byteBuffer38, true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArrayOutputStream37);
        org.junit.Assert.assertEquals(byteArrayOutputStream37.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        comparators.Composite composite37 = composite10.addBytes(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = composite37.serializeToByteBuffer();
        compositeType0.validate(byteBuffer38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteBuffer38);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteBuffer38);
        comparators.Composite composite42 = new comparators.Composite(objList41);
        java.nio.ByteBuffer byteBuffer43 = comparators.Composite.serializeToByteBuffer(objList41);
        java.nio.ByteBuffer byteBuffer44 = comparators.Composite.serializeToByteBuffer(objList41);
        byte[] byteArray45 = comparators.Composite.serialize(objList41);
        comparators.Composite composite46 = new comparators.Composite(objList41);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[67, 77, 80, 1, 9, 0, 0, 0]");
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        comparators.Composite composite22 = composite9.addUTF8("Placeholder(100)");
        java.lang.Class<?> wildcardClass23 = composite22.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNotNull(composite22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType7.validate(byteBuffer50);
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray53 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList54 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54, byteBufferArray53);
        java.lang.String str56 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        org.apache.cassandra.db.IColumn[] iColumnArray57 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList58 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58, iColumnArray57);
        java.lang.String str60 = compositeType52.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58);
        org.apache.cassandra.db.IColumn[] iColumnArray61 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList62 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62, iColumnArray61);
        java.lang.String str64 = compositeType52.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62);
        java.lang.String str65 = compositeType7.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62);
        boolean boolean66 = placeholder0.equals((java.lang.Object) str65);
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        java.lang.String str68 = placeholder0.toString();
        placeholder0.type = 0;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(iColumnArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(iColumnArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Placeholder(6)" + "'", str68, "Placeholder(6)");
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.util.RandomAccess[] randomAccessArray11 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray12 = composite10.toArray(randomAccessArray11);
        comparators.Composite composite14 = composite10.addLong((long) 67);
        byte[] byteArray15 = composite14.serialize();
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray15);
        comparators.Composite composite17 = new comparators.Composite(byteArray15);
        comparators.Composite composite18 = compositeSerializer0.fromBytes(byteArray15);
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray32 = new byte[] {};
        int int33 = comparators.Composite.compare(byteArray31, byteArray32);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray32);
        byte[] byteArray35 = comparators.Composite.serialize(objList34);
        java.util.stream.Stream<java.lang.Object> objStream36 = objList34.parallelStream();
        comparators.Composite composite37 = new comparators.Composite(objList34);
        java.util.RandomAccess[] randomAccessArray38 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray39 = composite37.toArray(randomAccessArray38);
        comparators.Composite composite41 = composite37.addLong((long) 67);
        byte[] byteArray42 = composite41.serialize();
        java.util.List<java.lang.Object> objList43 = comparators.Composite.deserialize(byteArray42);
        int int44 = comparators.Composite.compare(byteArray25, byteArray42);
        comparators.hector.CompositeSerializer compositeSerializer45 = new comparators.hector.CompositeSerializer();
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        java.util.List<java.lang.Object> objList52 = comparators.Composite.deserialize(byteArray50);
        byte[] byteArray53 = comparators.Composite.serialize(objList52);
        java.util.stream.Stream<java.lang.Object> objStream54 = objList52.parallelStream();
        comparators.Composite composite55 = new comparators.Composite(objList52);
        java.lang.Object[] objArray56 = composite55.toArray();
        int int57 = composite55.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream58 = composite55.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream59 = composite55.parallelStream();
        comparators.Composite composite61 = composite55.addBool(true);
        java.io.DataOutputStream dataOutputStream62 = composite55.out;
        byte[] byteArray63 = compositeSerializer45.toBytes(composite55);
        int int64 = comparators.Composite.compare(byteArray42, byteArray63);
        boolean boolean66 = comparators.Composite.validate(67, byteArray63, true);
        boolean boolean67 = comparators.Composite.validate(13, byteArray63);
        comparators.Composite composite68 = compositeSerializer0.fromBytes(byteArray63);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        java.util.List<java.lang.Object> objList75 = comparators.Composite.deserialize(byteArray73);
        byte[] byteArray76 = comparators.Composite.serialize(objList75);
        java.util.stream.Stream<java.lang.Object> objStream77 = objList75.parallelStream();
        comparators.Composite composite78 = new comparators.Composite(objList75);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray84 = new byte[] {};
        int int85 = comparators.Composite.compare(byteArray83, byteArray84);
        boolean boolean87 = comparators.Composite.validate((int) ' ', byteArray84, true);
        boolean boolean88 = composite78.contains((java.lang.Object) boolean87);
        java.util.Spliterator<java.lang.Object> objSpliterator89 = composite78.spliterator();
        byte[] byteArray90 = composite78.bytes;
        comparators.Composite composite92 = composite78.addLong((long) 5);
        int int93 = composite92.size();
        byte[] byteArray94 = compositeSerializer0.toBytes(composite92);
        byte[] byteArray95 = null;
        comparators.Composite composite96 = compositeSerializer0.fromBytes(byteArray95);
        int int98 = compositeSerializer0.computeInitialHashSize((int) (byte) 0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(randomAccessArray12);
        org.junit.Assert.assertNotNull(composite14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(randomAccessArray38);
        org.junit.Assert.assertNotNull(randomAccessArray39);
        org.junit.Assert.assertNotNull(composite41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(objList52);
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertNotNull(dataOutputStream62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(composite68);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(objList75);
        org.junit.Assert.assertNull(byteArray76);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objSpliterator89);
        org.junit.Assert.assertNull(byteArray90);
        org.junit.Assert.assertNotNull(composite92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 5, 0]");
        org.junit.Assert.assertNotNull(composite96);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        comparators.Composite composite17 = composite15.addLong((long) 6);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.util.RandomAccess[] randomAccessArray28 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray29 = composite27.toArray(randomAccessArray28);
        comparators.Composite composite31 = composite27.addLong((long) 67);
        byte[] byteArray32 = composite31.serialize();
        comparators.Composite composite33 = composite15.addBytes(byteArray32);
        java.lang.String str34 = composite33.toString();
        java.util.Iterator<java.lang.Object> objItor35 = composite33.iterator();
        byte[] byteArray37 = new byte[] { (byte) 0 };
        byte[][] byteArray38 = new byte[][] { byteArray37 };
        // The following exception was thrown during execution in test generation
        try {
            byte[][] byteArray39 = composite33.toArray(byteArray38);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(randomAccessArray28);
        org.junit.Assert.assertNotNull(randomAccessArray29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "true,6,434d500103000000000000004300" + "'", str34, "true,6,434d500103000000000000004300");
        org.junit.Assert.assertNotNull(objItor35);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0]");
        org.junit.Assert.assertNotNull(byteArray38);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        comparators.CompositeType compositeType27 = new comparators.CompositeType();
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        int int40 = composite38.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream41 = composite38.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream42 = composite38.parallelStream();
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.lang.Object[] objArray53 = composite52.toArray();
        int int54 = composite52.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream55 = composite52.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream56 = composite52.parallelStream();
        int int57 = composite52.startOffset;
        int int58 = composite38.compareTo(composite52);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        comparators.Composite composite65 = composite38.addBytes(byteArray63);
        java.nio.ByteBuffer byteBuffer66 = composite65.serializeToByteBuffer();
        compositeType28.validate(byteBuffer66);
        boolean boolean68 = comparators.Composite.validate(byteBuffer66);
        comparators.Composite composite69 = new comparators.Composite(byteBuffer66);
        java.nio.ByteBuffer byteBuffer70 = null;
        int int71 = compositeType27.compare(byteBuffer66, byteBuffer70);
        comparators.Composite composite72 = new comparators.Composite(byteBuffer66);
        java.util.Spliterator<java.lang.Object> objSpliterator73 = composite72.spliterator();
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray86 = new byte[] {};
        int int87 = comparators.Composite.compare(byteArray85, byteArray86);
        int int88 = comparators.Composite.compare(byteArray79, byteArray86);
        boolean boolean90 = comparators.Composite.validate((int) (byte) 0, byteArray86, true);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator91 = composite26.new CompositeTypeIterator(composite72, 97, byteArray86);
        compositeTypeIterator91.offset = (byte) -1;
        byte[] byteArray94 = compositeTypeIterator91.bytes;
        int int95 = compositeTypeIterator91.start;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objSpliterator73);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 97 + "'", int95 == 97);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        comparators.CompositeType compositeType10 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray11 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList12 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12, byteBufferArray11);
        java.lang.String str14 = compositeType10.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12);
        org.apache.cassandra.db.IColumn[] iColumnArray15 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList16 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16, iColumnArray15);
        java.lang.String str18 = compositeType10.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        java.lang.String str19 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        comparators.hector.CompositeListSerializer compositeListSerializer20 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType21 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray22 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList23 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23, byteBufferArray22);
        java.lang.String str25 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator26 = compositeType21.indexComparator;
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray28 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList29 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29, byteBufferArray28);
        java.lang.String str31 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator32 = compositeType21.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType27);
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.lang.String str38 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.List<java.util.List<java.lang.Object>> objListList39 = compositeListSerializer20.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList35);
        java.lang.String str40 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator41 = compositeType0.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator42 = compositeType0.reversed();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator43 = byteBufferComparator42.reversed();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(compositeType10);
        org.junit.Assert.assertNotNull(byteBufferArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(iColumnArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(compositeType21);
        org.junit.Assert.assertNotNull(byteBufferArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(indexInfoComparator26);
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteBufferArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteBufferComparator32);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(objListList39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteBufferComparator41);
        org.junit.Assert.assertNotNull(byteBufferComparator42);
        org.junit.Assert.assertNotNull(byteBufferComparator43);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer10 = compositeType0.fromString("Placeholder(100)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        java.lang.Object[][][] objArray32 = new java.lang.Object[][][] {};
        java.lang.Object[][][] objArray33 = composite9.toArray(objArray32);
        comparators.Composite composite34 = new comparators.Composite((java.lang.Object[]) objArray32);
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.lang.Object[] objArray45 = composite44.toArray();
        int int46 = composite44.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream47 = composite44.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream48 = composite44.parallelStream();
        int int49 = composite44.startOffset;
        int int50 = composite44.startOffset;
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        java.util.List<java.lang.Object> objList57 = comparators.Composite.deserialize(byteArray55);
        byte[] byteArray58 = comparators.Composite.serialize(objList57);
        java.util.stream.Stream<java.lang.Object> objStream59 = objList57.parallelStream();
        comparators.Composite composite60 = new comparators.Composite(objList57);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        boolean boolean69 = comparators.Composite.validate((int) ' ', byteArray66, true);
        boolean boolean70 = composite60.contains((java.lang.Object) boolean69);
        java.util.Spliterator<java.lang.Object> objSpliterator71 = composite60.spliterator();
        boolean boolean72 = composite44.containsAll((java.util.Collection<java.lang.Object>) composite60);
        boolean boolean74 = composite44.contains((java.lang.Object) (-1));
        int int75 = composite44.size();
        java.util.Spliterator<java.lang.Object> objSpliterator76 = composite44.spliterator();
        java.io.ByteArrayOutputStream byteArrayOutputStream77 = composite44.byteStream;
        composite44.clear();
        composite44.clear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = composite34.remove((java.lang.Object) composite44);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(objList57);
        org.junit.Assert.assertNull(byteArray58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objSpliterator71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(objSpliterator76);
        org.junit.Assert.assertNull(byteArrayOutputStream77);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        byte[] byteArray32 = composite23.bytes;
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        int int45 = composite42.startOffset;
        byte[] byteArray47 = null;
        comparators.Composite.CompositeTypeIterator compositeTypeIterator48 = composite23.new CompositeTypeIterator(composite42, 341, byteArray47);
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator48.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        boolean boolean8 = comparators.Composite.validate(0, byteArray5);
        byte[] byteArray9 = null;
        int int10 = comparators.Composite.compare(byteArray5, byteArray9);
        comparators.Composite composite11 = new comparators.Composite(byteArray9);
        comparators.hector.CompositeSerializer compositeSerializer12 = new comparators.hector.CompositeSerializer();
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.util.RandomAccess[] randomAccessArray23 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray24 = composite22.toArray(randomAccessArray23);
        comparators.Composite composite26 = composite22.addLong((long) 67);
        byte[] byteArray27 = composite26.serialize();
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray27);
        comparators.Composite composite29 = new comparators.Composite(byteArray27);
        comparators.Composite composite30 = compositeSerializer12.fromBytes(byteArray27);
        comparators.hector.CompositeSerializer compositeSerializer31 = new comparators.hector.CompositeSerializer();
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray36);
        byte[] byteArray39 = comparators.Composite.serialize(objList38);
        java.util.stream.Stream<java.lang.Object> objStream40 = objList38.parallelStream();
        comparators.Composite composite41 = new comparators.Composite(objList38);
        java.lang.Object[] objArray42 = composite41.toArray();
        int int43 = composite41.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream44 = composite41.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream45 = composite41.parallelStream();
        comparators.Composite composite47 = composite41.addBool(true);
        java.io.DataOutputStream dataOutputStream48 = composite41.out;
        byte[] byteArray49 = compositeSerializer31.toBytes(composite41);
        comparators.CompositeType compositeType50 = comparators.CompositeType.instance;
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        java.util.List<java.lang.Object> objList57 = comparators.Composite.deserialize(byteArray55);
        byte[] byteArray58 = comparators.Composite.serialize(objList57);
        java.util.stream.Stream<java.lang.Object> objStream59 = objList57.parallelStream();
        comparators.Composite composite60 = new comparators.Composite(objList57);
        java.lang.Object[] objArray61 = composite60.toArray();
        int int62 = composite60.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream63 = composite60.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream64 = composite60.parallelStream();
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        java.util.List<java.lang.Object> objList71 = comparators.Composite.deserialize(byteArray69);
        byte[] byteArray72 = comparators.Composite.serialize(objList71);
        java.util.stream.Stream<java.lang.Object> objStream73 = objList71.parallelStream();
        comparators.Composite composite74 = new comparators.Composite(objList71);
        java.lang.Object[] objArray75 = composite74.toArray();
        int int76 = composite74.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream77 = composite74.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream78 = composite74.parallelStream();
        int int79 = composite74.startOffset;
        int int80 = composite60.compareTo(composite74);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray85 = new byte[] {};
        int int86 = comparators.Composite.compare(byteArray84, byteArray85);
        comparators.Composite composite87 = composite60.addBytes(byteArray85);
        java.nio.ByteBuffer byteBuffer88 = composite87.serializeToByteBuffer();
        compositeType50.validate(byteBuffer88);
        boolean boolean90 = comparators.Composite.validate(byteBuffer88);
        boolean boolean91 = comparators.Composite.validate(byteBuffer88);
        comparators.Composite composite92 = compositeSerializer31.fromByteBuffer(byteBuffer88);
        byte[] byteArray93 = compositeSerializer12.toBytes(composite92);
        java.util.Spliterator<java.lang.Object> objSpliterator94 = composite92.spliterator();
        boolean boolean95 = composite92.isEmpty();
        byte[] byteArray96 = composite92.serialize();
        boolean boolean97 = composite11.addAll((java.util.Collection<java.lang.Object>) composite92);
        java.lang.Class<?> wildcardClass98 = composite92.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(randomAccessArray23);
        org.junit.Assert.assertNotNull(randomAccessArray24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(composite47);
        org.junit.Assert.assertNotNull(dataOutputStream48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType50);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(objList57);
        org.junit.Assert.assertNull(byteArray58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(objList71);
        org.junit.Assert.assertNull(byteArray72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(composite87);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(composite92);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[67, 77, 80, 1, 9, 0, 0, 0]");
        org.junit.Assert.assertNotNull(objSpliterator94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[67, 77, 80, 1, 9, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite12 = new comparators.Composite((java.lang.Object[]) randomAccessArray11);
        java.lang.Object obj13 = null;
        boolean boolean14 = composite12.equals(obj13);
        comparators.Composite composite16 = composite12.addLong(10L);
        java.lang.Object obj17 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = composite16.remove(obj17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(composite16);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        comparators.CompositeType compositeType9 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray10 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList11 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11, byteBufferArray10);
        java.lang.String str13 = compositeType9.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType9.indexComparator;
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator20 = compositeType9.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType15);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator21 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType9);
        comparators.CompositeType compositeType22 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray23 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList24 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24, byteBufferArray23);
        java.lang.String str26 = compositeType22.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator27 = compositeType22.indexComparator;
        boolean boolean28 = comparators.Composite.isValidType((java.lang.Object) compositeType22);
        comparators.CompositeType compositeType29 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator30 = compositeType29.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType22.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        comparators.CompositeType compositeType32 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray33 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList34 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34, byteBufferArray33);
        java.lang.String str36 = compositeType32.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator37 = compositeType32.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator38 = compositeType29.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType32);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator39 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator40 = compositeType0.getReverseComparator();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer42 = compositeType0.fromString("434d500103000000000000004300");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(compositeType9);
        org.junit.Assert.assertNotNull(byteBufferArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteBufferComparator20);
        org.junit.Assert.assertNotNull(byteBufferComparator21);
        org.junit.Assert.assertNotNull(compositeType22);
        org.junit.Assert.assertNotNull(byteBufferArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(indexInfoComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(indexInfoComparator30);
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(compositeType32);
        org.junit.Assert.assertNotNull(byteBufferArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(indexInfoComparator37);
        org.junit.Assert.assertNotNull(byteBufferComparator38);
        org.junit.Assert.assertNotNull(byteBufferComparator39);
        org.junit.Assert.assertNotNull(byteBufferComparator40);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        java.io.ByteArrayOutputStream byteArrayOutputStream56 = composite9.byteStream;
        java.io.DataOutputStream dataOutputStream57 = composite9.out;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(byteArrayOutputStream56);
        org.junit.Assert.assertNull(dataOutputStream57);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray28 = comparators.Composite.serialize(objList27);
        java.util.stream.Stream<java.lang.Object> objStream29 = objList27.parallelStream();
        comparators.Composite composite30 = new comparators.Composite(objList27);
        java.lang.Object[] objArray31 = composite30.toArray();
        comparators.Composite composite32 = new comparators.Composite();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite32.compareTo(composite42);
        comparators.hector.CompositeListSerializer compositeListSerializer48 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray50 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList51 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51, byteBufferArray50);
        java.lang.String str53 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator54 = compositeType49.indexComparator;
        comparators.CompositeType compositeType55 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray56 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList57 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57, byteBufferArray56);
        java.lang.String str59 = compositeType55.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator60 = compositeType49.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType55);
        comparators.CompositeType compositeType61 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray62 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList63 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList63, byteBufferArray62);
        java.lang.String str65 = compositeType61.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList63);
        java.lang.String str66 = compositeType55.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList63);
        java.util.List<java.util.List<java.lang.Object>> objListList67 = compositeListSerializer48.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList63);
        comparators.CompositeType compositeType68 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator69 = compositeType68.indexComparator;
        comparators.CompositeType compositeType70 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator71 = compositeType68.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType70);
        java.lang.Object[] objArray72 = new java.lang.Object[] { compositeListSerializer48, compositeType70 };
        java.lang.Object[][] objArray73 = new java.lang.Object[][] { objArray72 };
        java.lang.Object[][] objArray74 = composite32.toArray(objArray73);
        java.lang.Object[][] objArray75 = composite30.toArray(objArray74);
        boolean boolean76 = composite9.addAll((java.util.Collection<java.lang.Object>) composite30);
        java.util.UUID uUID77 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite78 = composite30.addTimeUUID(uUID77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(indexInfoComparator54);
        org.junit.Assert.assertNotNull(compositeType55);
        org.junit.Assert.assertNotNull(byteBufferArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteBufferComparator60);
        org.junit.Assert.assertNotNull(compositeType61);
        org.junit.Assert.assertNotNull(byteBufferArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(objListList67);
        org.junit.Assert.assertNotNull(indexInfoComparator69);
        org.junit.Assert.assertNotNull(compositeType70);
        org.junit.Assert.assertNotNull(byteBufferComparator71);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        comparators.Composite composite37 = composite9.addLong((long) (short) 1);
        comparators.Composite composite39 = composite37.addBool(true);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList46.parallelStream();
        comparators.Composite composite49 = new comparators.Composite(objList46);
        java.lang.Object[] objArray50 = composite49.toArray();
        int int51 = composite49.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream52 = composite49.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream53 = composite49.parallelStream();
        comparators.Composite composite55 = composite49.addBool(true);
        java.util.Iterator<java.lang.Object> objItor56 = composite49.iterator();
        comparators.Composite composite58 = composite49.addReal((java.lang.Double) 100.0d);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        java.util.List<java.lang.Object> objList65 = comparators.Composite.deserialize(byteArray63);
        byte[] byteArray66 = comparators.Composite.serialize(objList65);
        java.util.stream.Stream<java.lang.Object> objStream67 = objList65.parallelStream();
        comparators.Composite composite68 = new comparators.Composite(objList65);
        java.lang.Object[] objArray69 = composite68.toArray();
        int int70 = composite68.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream71 = composite68.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream72 = composite68.parallelStream();
        int int73 = composite68.startOffset;
        composite68.clear();
        boolean boolean75 = composite58.containsAll((java.util.Collection<java.lang.Object>) composite68);
        java.util.Iterator<java.lang.Object> objItor76 = composite58.iterator();
        boolean boolean77 = composite37.add((java.lang.Object) composite58);
        comparators.Composite composite79 = composite58.addBool(true);
        comparators.Composite composite80 = composite58.addMatchMinimum();
        comparators.Composite composite81 = composite58.addMatchMinimum();
        java.nio.ByteBuffer byteBuffer82 = composite58.serializeToByteBuffer();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(objItor56);
        org.junit.Assert.assertNotNull(composite58);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(objList65);
        org.junit.Assert.assertNull(byteArray66);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertNotNull(composite80);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(byteBuffer82);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        comparators.Composite composite36 = composite9.addBytes(byteArray34);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray41 = new byte[] {};
        int int42 = comparators.Composite.compare(byteArray40, byteArray41);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        int int49 = comparators.Composite.compare(byteArray40, byteArray47);
        composite9.bytes = byteArray47;
        comparators.Composite composite51 = new comparators.Composite(byteArray47);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        comparators.hector.CompositeListSerializer compositeListSerializer1 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType2 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray3 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList4 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList4, byteBufferArray3);
        java.lang.String str6 = compositeType2.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList4);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator7 = compositeType2.indexComparator;
        comparators.CompositeType compositeType8 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray9 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList10 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList10, byteBufferArray9);
        java.lang.String str12 = compositeType8.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList10);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = compositeType2.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType8);
        comparators.CompositeType compositeType14 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray15 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList16 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16, byteBufferArray15);
        java.lang.String str18 = compositeType14.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16);
        java.lang.String str19 = compositeType8.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16);
        java.util.List<java.util.List<java.lang.Object>> objListList20 = compositeListSerializer1.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList16);
        int int22 = compositeListSerializer1.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer23 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType24 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray25 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList26 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList26, byteBufferArray25);
        java.lang.String str28 = compositeType24.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList26);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator29 = compositeType24.indexComparator;
        comparators.CompositeType compositeType30 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray31 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList32 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32, byteBufferArray31);
        java.lang.String str34 = compositeType30.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator35 = compositeType24.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType30);
        comparators.CompositeType compositeType36 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray37 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList38 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38, byteBufferArray37);
        java.lang.String str40 = compositeType36.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38);
        java.lang.String str41 = compositeType30.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38);
        java.util.List<java.util.List<java.lang.Object>> objListList42 = compositeListSerializer23.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList38);
        java.util.List<java.nio.ByteBuffer> byteBufferList43 = compositeListSerializer1.toBytesList(objListList42);
        java.lang.String str44 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        comparators.CompositeType compositeType45 = comparators.CompositeType.instance;
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        java.util.List<java.lang.Object> objList52 = comparators.Composite.deserialize(byteArray50);
        byte[] byteArray53 = comparators.Composite.serialize(objList52);
        java.util.stream.Stream<java.lang.Object> objStream54 = objList52.parallelStream();
        comparators.Composite composite55 = new comparators.Composite(objList52);
        java.lang.Object[] objArray56 = composite55.toArray();
        int int57 = composite55.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream58 = composite55.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream59 = composite55.parallelStream();
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(byteArray64);
        byte[] byteArray67 = comparators.Composite.serialize(objList66);
        java.util.stream.Stream<java.lang.Object> objStream68 = objList66.parallelStream();
        comparators.Composite composite69 = new comparators.Composite(objList66);
        java.lang.Object[] objArray70 = composite69.toArray();
        int int71 = composite69.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream72 = composite69.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream73 = composite69.parallelStream();
        int int74 = composite69.startOffset;
        int int75 = composite55.compareTo(composite69);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        comparators.Composite composite82 = composite55.addBytes(byteArray80);
        java.nio.ByteBuffer byteBuffer83 = composite82.serializeToByteBuffer();
        compositeType45.validate(byteBuffer83);
        boolean boolean85 = comparators.Composite.validate(byteBuffer83);
        comparators.Composite composite86 = new comparators.Composite(byteBuffer83);
        boolean boolean87 = comparators.Composite.validate(byteBuffer83);
        compositeType0.validate(byteBuffer83);
        java.nio.ByteBuffer byteBuffer89 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str90 = compositeType0.getString(byteBuffer89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(compositeType2);
        org.junit.Assert.assertNotNull(byteBufferArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(indexInfoComparator7);
        org.junit.Assert.assertNotNull(compositeType8);
        org.junit.Assert.assertNotNull(byteBufferArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteBufferComparator13);
        org.junit.Assert.assertNotNull(compositeType14);
        org.junit.Assert.assertNotNull(byteBufferArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(objListList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertNotNull(compositeType24);
        org.junit.Assert.assertNotNull(byteBufferArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(indexInfoComparator29);
        org.junit.Assert.assertNotNull(compositeType30);
        org.junit.Assert.assertNotNull(byteBufferArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteBufferComparator35);
        org.junit.Assert.assertNotNull(compositeType36);
        org.junit.Assert.assertNotNull(byteBufferArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(objListList42);
        org.junit.Assert.assertNotNull(byteBufferList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(compositeType45);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(objList52);
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(objList66);
        org.junit.Assert.assertNull(byteArray67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(composite82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        comparators.Composite composite37 = composite9.addLong((long) (short) 1);
        composite37.startOffset = (byte) 100;
        comparators.CompositeType compositeType40 = new comparators.CompositeType();
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.nio.ByteBuffer byteBuffer79 = composite78.serializeToByteBuffer();
        compositeType41.validate(byteBuffer79);
        boolean boolean81 = comparators.Composite.validate(byteBuffer79);
        comparators.Composite composite82 = new comparators.Composite(byteBuffer79);
        java.nio.ByteBuffer byteBuffer83 = null;
        int int84 = compositeType40.compare(byteBuffer79, byteBuffer83);
        comparators.Composite composite85 = new comparators.Composite(byteBuffer79);
        boolean boolean86 = composite37.add((java.lang.Object) composite85);
        java.util.UUID uUID87 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite88 = composite85.addLexicalUUID(uUID87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.lang.String str17 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator18 = compositeType6.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator19 = compositeType6.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator20 = compositeType6.indexComparator;
        boolean boolean21 = comparators.Composite.isValidType((java.lang.Object) indexInfoComparator20);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteBufferComparator18);
        org.junit.Assert.assertNotNull(indexInfoComparator19);
        org.junit.Assert.assertNotNull(indexInfoComparator20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.offset;
        int int85 = compositeTypeIterator80.offset;
        comparators.Composite composite86 = compositeTypeIterator80.collection;
        byte[] byteArray87 = compositeTypeIterator80.bytes;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 67 + "'", int84 == 67);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        int int15 = composite10.startOffset;
        composite10.clear();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        int int44 = comparators.Composite.compare(byteArray35, byteArray42);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray42);
        composite27.bytes = byteArray42;
        boolean boolean47 = comparators.Composite.validate(1, byteArray42);
        composite10.bytes = byteArray42;
        comparators.Composite composite49 = compositeSerializer0.fromBytes(byteArray42);
        comparators.hector.CompositeSerializer compositeSerializer50 = new comparators.hector.CompositeSerializer();
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        java.util.List<java.lang.Object> objList57 = comparators.Composite.deserialize(byteArray55);
        byte[] byteArray58 = comparators.Composite.serialize(objList57);
        java.util.stream.Stream<java.lang.Object> objStream59 = objList57.parallelStream();
        comparators.Composite composite60 = new comparators.Composite(objList57);
        java.lang.Object[] objArray61 = composite60.toArray();
        int int62 = composite60.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream63 = composite60.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream64 = composite60.parallelStream();
        comparators.Composite composite66 = composite60.addBool(true);
        java.io.DataOutputStream dataOutputStream67 = composite60.out;
        byte[] byteArray68 = compositeSerializer50.toBytes(composite60);
        comparators.CompositeType compositeType69 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray70 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList71 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList71, byteBufferArray70);
        java.lang.String str73 = compositeType69.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList71);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator74 = compositeType69.indexComparator;
        comparators.CompositeType compositeType75 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray76 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList77 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList77, byteBufferArray76);
        java.lang.String str79 = compositeType75.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList77);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator80 = compositeType69.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType75);
        comparators.CompositeType compositeType81 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray82 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList83 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList83, byteBufferArray82);
        java.lang.String str85 = compositeType81.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList83);
        java.lang.String str86 = compositeType75.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList83);
        comparators.CompositeType compositeType87 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray88 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList89 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList89, byteBufferArray88);
        java.lang.String str91 = compositeType87.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList89);
        java.lang.String str92 = compositeType75.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList89);
        java.util.List<comparators.Composite> compositeList93 = compositeSerializer50.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList89);
        java.util.List<java.nio.ByteBuffer> byteBufferList94 = compositeSerializer0.toBytesList(compositeList93);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(objList57);
        org.junit.Assert.assertNull(byteArray58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(composite66);
        org.junit.Assert.assertNotNull(dataOutputStream67);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType69);
        org.junit.Assert.assertNotNull(byteBufferArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(indexInfoComparator74);
        org.junit.Assert.assertNotNull(compositeType75);
        org.junit.Assert.assertNotNull(byteBufferArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(byteBufferComparator80);
        org.junit.Assert.assertNotNull(compositeType81);
        org.junit.Assert.assertNotNull(byteBufferArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(compositeType87);
        org.junit.Assert.assertNotNull(byteBufferArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(compositeList93);
        org.junit.Assert.assertNotNull(byteBufferList94);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        byte[] byteArray32 = composite23.bytes;
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        int int45 = composite42.startOffset;
        byte[] byteArray47 = null;
        comparators.Composite.CompositeTypeIterator compositeTypeIterator48 = composite23.new CompositeTypeIterator(composite42, 341, byteArray47);
        java.lang.Object[] objArray49 = composite42.toArray();
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray65 = new byte[] {};
        int int66 = comparators.Composite.compare(byteArray64, byteArray65);
        boolean boolean68 = comparators.Composite.validate((int) ' ', byteArray65, true);
        boolean boolean69 = composite59.contains((java.lang.Object) boolean68);
        java.util.stream.Stream<java.lang.Object> objStream70 = composite59.parallelStream();
        composite59.startOffset = 8;
        composite59.startOffset = 4;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean75 = composite42.removeAll((java.util.Collection<java.lang.Object>) composite59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objStream70);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (short) 1;
        java.lang.String str3 = placeholder0.toString();
        java.lang.String str4 = placeholder0.toString();
        java.lang.String str5 = placeholder0.toString();
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Placeholder(1)" + "'", str3, "Placeholder(1)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Placeholder(1)" + "'", str4, "Placeholder(1)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Placeholder(1)" + "'", str5, "Placeholder(1)");
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        int int33 = composite28.startOffset;
        composite28.clear();
        boolean boolean35 = composite18.containsAll((java.util.Collection<java.lang.Object>) composite28);
        comparators.Composite composite37 = composite28.addAscii("hi!");
        comparators.hector.CompositeListSerializer compositeListSerializer38 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        byte[] byteArray49 = compositeListSerializer38.toBytes(objList45);
        comparators.CompositeType compositeType50 = new comparators.CompositeType();
        comparators.CompositeType compositeType51 = comparators.CompositeType.instance;
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray56 = new byte[] {};
        int int57 = comparators.Composite.compare(byteArray55, byteArray56);
        java.util.List<java.lang.Object> objList58 = comparators.Composite.deserialize(byteArray56);
        byte[] byteArray59 = comparators.Composite.serialize(objList58);
        java.util.stream.Stream<java.lang.Object> objStream60 = objList58.parallelStream();
        comparators.Composite composite61 = new comparators.Composite(objList58);
        java.lang.Object[] objArray62 = composite61.toArray();
        int int63 = composite61.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream64 = composite61.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream65 = composite61.parallelStream();
        byte[] byteArray69 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray70 = new byte[] {};
        int int71 = comparators.Composite.compare(byteArray69, byteArray70);
        java.util.List<java.lang.Object> objList72 = comparators.Composite.deserialize(byteArray70);
        byte[] byteArray73 = comparators.Composite.serialize(objList72);
        java.util.stream.Stream<java.lang.Object> objStream74 = objList72.parallelStream();
        comparators.Composite composite75 = new comparators.Composite(objList72);
        java.lang.Object[] objArray76 = composite75.toArray();
        int int77 = composite75.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream78 = composite75.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream79 = composite75.parallelStream();
        int int80 = composite75.startOffset;
        int int81 = composite61.compareTo(composite75);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray86 = new byte[] {};
        int int87 = comparators.Composite.compare(byteArray85, byteArray86);
        comparators.Composite composite88 = composite61.addBytes(byteArray86);
        java.nio.ByteBuffer byteBuffer89 = composite88.serializeToByteBuffer();
        compositeType51.validate(byteBuffer89);
        boolean boolean91 = comparators.Composite.validate(byteBuffer89);
        comparators.Composite composite92 = new comparators.Composite(byteBuffer89);
        java.nio.ByteBuffer byteBuffer93 = null;
        int int94 = compositeType50.compare(byteBuffer89, byteBuffer93);
        comparators.Composite composite95 = new comparators.Composite(byteBuffer89);
        java.util.List<java.lang.Object> objList96 = compositeListSerializer38.fromByteBuffer(byteBuffer89);
        boolean boolean97 = composite37.addAll((java.util.Collection<java.lang.Object>) objList96);
        java.util.stream.Stream<java.lang.Object> objStream98 = objList96.stream();
        comparators.Composite composite99 = new comparators.Composite(objList96);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(compositeType51);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(objList58);
        org.junit.Assert.assertNull(byteArray59);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objList72);
        org.junit.Assert.assertNull(byteArray73);
        org.junit.Assert.assertNotNull(objStream74);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(objStream79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(composite88);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(objList96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(objStream98);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        byte[] byteArray82 = compositeTypeIterator80.bytes;
        int int83 = compositeTypeIterator80.type;
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray88 = new byte[] {};
        int int89 = comparators.Composite.compare(byteArray87, byteArray88);
        byte[] byteArray93 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray94 = new byte[] {};
        int int95 = comparators.Composite.compare(byteArray93, byteArray94);
        int int96 = comparators.Composite.compare(byteArray87, byteArray94);
        compositeTypeIterator80.bytes = byteArray87;
        byte[] byteArray98 = compositeTypeIterator80.bytes;
        byte[] byteArray99 = compositeTypeIterator80.bytes;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertNotNull(byteArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray98), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray99), "[10, 10, -1]");
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        byte[] byteArray86 = compositeTypeIterator80.bytes;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(9);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        byte[] byteArray32 = compositeListSerializer0.toBytes(objList28);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.util.RandomAccess[] randomAccessArray43 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray44 = composite42.toArray(randomAccessArray43);
        comparators.Composite composite46 = composite42.addLong((long) 67);
        byte[] byteArray47 = composite46.serialize();
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray47);
        java.nio.ByteBuffer byteBuffer49 = compositeListSerializer0.toByteBuffer(objList48);
        comparators.Composite composite50 = new comparators.Composite(objList48);
        byte[] byteArray51 = composite50.bytes;
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNull(byteArray32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(randomAccessArray43);
        org.junit.Assert.assertNotNull(randomAccessArray44);
        org.junit.Assert.assertNotNull(composite46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNull(byteArray51);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray11 = new byte[] {};
        int int12 = comparators.Composite.compare(byteArray10, byteArray11);
        int int13 = comparators.Composite.compare(byteArray4, byteArray11);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray11);
        comparators.Composite composite15 = compositeSerializer0.fromBytes(byteArray11);
        int int17 = compositeSerializer0.computeInitialHashSize(1);
        comparators.hector.CompositeListSerializer compositeListSerializer18 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType19 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray20 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList21 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList21, byteBufferArray20);
        java.lang.String str23 = compositeType19.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList21);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator24 = compositeType19.indexComparator;
        comparators.CompositeType compositeType25 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray26 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList27 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList27, byteBufferArray26);
        java.lang.String str29 = compositeType25.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList27);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator30 = compositeType19.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType25);
        comparators.CompositeType compositeType31 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray32 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList33 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList33, byteBufferArray32);
        java.lang.String str35 = compositeType31.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList33);
        java.lang.String str36 = compositeType25.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList33);
        java.util.List<java.util.List<java.lang.Object>> objListList37 = compositeListSerializer18.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList33);
        int int39 = compositeListSerializer18.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer40 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray42 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList43 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43, byteBufferArray42);
        java.lang.String str45 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator46 = compositeType41.indexComparator;
        comparators.CompositeType compositeType47 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray48 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList49 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList49, byteBufferArray48);
        java.lang.String str51 = compositeType47.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList49);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator52 = compositeType41.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType47);
        comparators.CompositeType compositeType53 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray54 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList55 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList55, byteBufferArray54);
        java.lang.String str57 = compositeType53.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList55);
        java.lang.String str58 = compositeType47.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList55);
        java.util.List<java.util.List<java.lang.Object>> objListList59 = compositeListSerializer40.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList55);
        java.util.List<java.nio.ByteBuffer> byteBufferList60 = compositeListSerializer18.toBytesList(objListList59);
        java.util.List<comparators.Composite> compositeList61 = compositeSerializer0.fromBytesList(byteBufferList60);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        java.util.List<java.lang.Object> objList68 = comparators.Composite.deserialize(byteArray66);
        byte[] byteArray69 = comparators.Composite.serialize(objList68);
        java.util.stream.Stream<java.lang.Object> objStream70 = objList68.parallelStream();
        comparators.Composite composite71 = new comparators.Composite(objList68);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        boolean boolean80 = comparators.Composite.validate((int) ' ', byteArray77, true);
        boolean boolean81 = composite71.contains((java.lang.Object) boolean80);
        java.util.stream.Stream<java.lang.Object> objStream82 = composite71.parallelStream();
        composite71.startOffset = 8;
        comparators.Composite composite86 = composite71.addAscii("hi!");
        comparators.Composite composite88 = composite71.addLong((long) 4);
        int int89 = composite88.size();
        java.lang.Object[] objArray90 = composite88.toArray();
        java.nio.ByteBuffer byteBuffer91 = compositeSerializer0.toByteBuffer(composite88);
        java.util.List<java.nio.ByteBuffer> byteBufferList92 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<comparators.Composite> compositeList93 = compositeSerializer0.fromBytesList(byteBufferList92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(compositeType19);
        org.junit.Assert.assertNotNull(byteBufferArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(indexInfoComparator24);
        org.junit.Assert.assertNotNull(compositeType25);
        org.junit.Assert.assertNotNull(byteBufferArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteBufferComparator30);
        org.junit.Assert.assertNotNull(compositeType31);
        org.junit.Assert.assertNotNull(byteBufferArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(objListList37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteBufferArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(indexInfoComparator46);
        org.junit.Assert.assertNotNull(compositeType47);
        org.junit.Assert.assertNotNull(byteBufferArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteBufferComparator52);
        org.junit.Assert.assertNotNull(compositeType53);
        org.junit.Assert.assertNotNull(byteBufferArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(objListList59);
        org.junit.Assert.assertNotNull(byteBufferList60);
        org.junit.Assert.assertNotNull(compositeList61);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(objList68);
        org.junit.Assert.assertNull(byteArray69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objStream82);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertNotNull(composite88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
        org.junit.Assert.assertNotNull(objArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray90), "[hi!, 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray90), "[hi!, 4]");
        org.junit.Assert.assertNotNull(byteBuffer91);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        composite9.clear();
        java.util.stream.Stream<java.lang.Object> objStream16 = composite9.stream();
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.util.RandomAccess[] randomAccessArray27 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray28 = composite26.toArray(randomAccessArray27);
        comparators.Composite composite30 = composite26.addLong((long) 67);
        byte[] byteArray31 = composite30.serialize();
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray31);
        comparators.Composite composite33 = new comparators.Composite(objList32);
        java.util.Spliterator<java.lang.Object> objSpliterator34 = objList32.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean35 = composite9.add((java.lang.Object) objSpliterator34);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(randomAccessArray27);
        org.junit.Assert.assertNotNull(randomAccessArray28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNotNull(objSpliterator34);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean37 = composite23.retainAll((java.util.Collection<java.lang.Object>) objList36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite65.startOffset;
        int int72 = composite17.compareTo(composite65);
        comparators.Composite composite74 = composite17.addLong((long) 80);
        comparators.Composite composite76 = composite17.addLong((long) 6);
        java.util.Iterator<java.lang.Object> objItor77 = composite17.iterator();
        java.util.UUID uUID78 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite79 = composite17.addTimeUUID(uUID78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(composite76);
        org.junit.Assert.assertNotNull(objItor77);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (short) 1;
        java.lang.String str3 = placeholder0.toString();
        boolean boolean5 = placeholder0.equals((java.lang.Object) 10L);
        placeholder0.type = 58;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        java.lang.String str9 = placeholder0.toString();
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Placeholder(1)" + "'", str3, "Placeholder(1)");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Placeholder(58)" + "'", str9, "Placeholder(58)");
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        int int1 = placeholder0.type;
        placeholder0.type = ' ';
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 58 + "'", int1 == 58);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        int int19 = composite10.size();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.util.RandomAccess[] randomAccessArray11 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray12 = composite10.toArray(randomAccessArray11);
        comparators.Composite composite14 = composite10.addLong((long) 67);
        byte[] byteArray15 = composite14.serialize();
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray15);
        comparators.Composite composite17 = new comparators.Composite(byteArray15);
        comparators.Composite composite18 = compositeSerializer0.fromBytes(byteArray15);
        int int20 = compositeSerializer0.computeInitialHashSize(10);
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray28 = comparators.Composite.serialize(objList27);
        java.util.stream.Stream<java.lang.Object> objStream29 = objList27.parallelStream();
        comparators.Composite composite30 = new comparators.Composite(objList27);
        java.lang.Object[] objArray31 = composite30.toArray();
        int int32 = composite30.startOffset;
        byte[] byteArray33 = composite30.bytes;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite30.parallelStream();
        byte[] byteArray35 = composite30.serialize();
        byte[] byteArray36 = compositeSerializer0.toBytes(composite30);
        comparators.hector.CompositeListSerializer compositeListSerializer37 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType38 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray39 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList40 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList40, byteBufferArray39);
        java.lang.String str42 = compositeType38.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList40);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator43 = compositeType38.indexComparator;
        comparators.CompositeType compositeType44 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray45 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList46 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList46, byteBufferArray45);
        java.lang.String str48 = compositeType44.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList46);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator49 = compositeType38.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType44);
        comparators.CompositeType compositeType50 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray51 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList52 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52, byteBufferArray51);
        java.lang.String str54 = compositeType50.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52);
        java.lang.String str55 = compositeType44.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52);
        java.util.List<java.util.List<java.lang.Object>> objListList56 = compositeListSerializer37.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList52);
        int int58 = compositeListSerializer37.computeInitialHashSize(9);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        java.util.List<java.lang.Object> objList65 = comparators.Composite.deserialize(byteArray63);
        byte[] byteArray66 = comparators.Composite.serialize(objList65);
        java.util.stream.Stream<java.lang.Object> objStream67 = objList65.parallelStream();
        comparators.Composite composite68 = new comparators.Composite(objList65);
        byte[] byteArray69 = compositeListSerializer37.toBytes(objList65);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray74 = new byte[] {};
        int int75 = comparators.Composite.compare(byteArray73, byteArray74);
        java.util.List<java.lang.Object> objList76 = comparators.Composite.deserialize(byteArray74);
        byte[] byteArray77 = comparators.Composite.serialize(objList76);
        java.util.stream.Stream<java.lang.Object> objStream78 = objList76.parallelStream();
        comparators.Composite composite79 = new comparators.Composite(objList76);
        java.util.RandomAccess[] randomAccessArray80 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray81 = composite79.toArray(randomAccessArray80);
        comparators.Composite composite83 = composite79.addLong((long) 67);
        byte[] byteArray84 = composite83.serialize();
        java.util.List<java.lang.Object> objList85 = comparators.Composite.deserialize(byteArray84);
        java.nio.ByteBuffer byteBuffer86 = compositeListSerializer37.toByteBuffer(objList85);
        comparators.Composite composite87 = new comparators.Composite(byteBuffer86);
        java.nio.ByteBuffer byteBuffer88 = composite87.serializeToByteBuffer();
        byte[] byteArray89 = compositeSerializer0.toBytes(composite87);
        int int91 = compositeSerializer0.computeInitialHashSize(103);
        int int93 = compositeSerializer0.computeInitialHashSize(13);
        int int95 = compositeSerializer0.computeInitialHashSize(95);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(randomAccessArray12);
        org.junit.Assert.assertNotNull(composite14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 14 + "'", int20 == 14);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(compositeType38);
        org.junit.Assert.assertNotNull(byteBufferArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(indexInfoComparator43);
        org.junit.Assert.assertNotNull(compositeType44);
        org.junit.Assert.assertNotNull(byteBufferArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteBufferComparator49);
        org.junit.Assert.assertNotNull(compositeType50);
        org.junit.Assert.assertNotNull(byteBufferArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(objListList56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 13 + "'", int58 == 13);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(objList65);
        org.junit.Assert.assertNull(byteArray66);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNull(byteArray69);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertNull(byteArray77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(randomAccessArray80);
        org.junit.Assert.assertNotNull(randomAccessArray81);
        org.junit.Assert.assertNotNull(composite83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList85);
        org.junit.Assert.assertNotNull(byteBuffer86);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 138 + "'", int91 == 138);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 18 + "'", int93 == 18);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 127 + "'", int95 == 127);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (byte) -1;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        boolean boolean4 = comparators.Composite.isValidType((java.lang.Object) placeholder0);
        int int5 = placeholder0.type;
        java.lang.String str6 = placeholder0.toString();
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Placeholder(-1)" + "'", str6, "Placeholder(-1)");
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        byte[] byteArray14 = composite13.serialize();
        java.util.List<java.lang.Object> objList15 = comparators.Composite.deserialize(byteArray14);
        comparators.Composite composite16 = new comparators.Composite(objList15);
        comparators.Composite composite17 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int18 = comparators.Composite.compare(composite16, composite17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList15);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.Spliterator<java.lang.Object> objSpliterator12 = composite9.spliterator();
        byte[] byteArray14 = null;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        int int28 = comparators.Composite.compare(byteArray19, byteArray26);
        int int29 = comparators.Composite.compare((int) (byte) 1, byteArray14, 10, byteArray19);
        composite9.bytes = byteArray14;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objSpliterator12);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        byte[] byteArray12 = comparators.Composite.serialize((java.lang.Object[]) randomAccessArray11);
        comparators.Composite composite13 = new comparators.Composite((java.lang.Object[]) randomAccessArray11);
        java.util.Iterator<java.lang.Object> objItor14 = composite13.iterator();
        boolean boolean15 = composite13.isEmpty();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(objItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.type;
        comparators.Composite composite84 = compositeTypeIterator80.collection;
        int int85 = composite84.startOffset;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(composite84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        boolean boolean39 = composite9.contains((java.lang.Object) (-1));
        boolean boolean40 = composite9.isEmpty();
        comparators.Composite composite42 = composite9.addUTF8("hi!");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(composite42);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        comparators.Composite composite34 = composite28.addBool(true);
        comparators.Composite composite36 = composite34.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream37 = composite34.byteStream;
        java.nio.ByteBuffer byteBuffer38 = compositeSerializer0.toByteBuffer(composite34);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        java.lang.Object[] objArray49 = composite48.toArray();
        int int50 = composite48.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream51 = composite48.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream52 = composite48.parallelStream();
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        java.util.List<java.lang.Object> objList59 = comparators.Composite.deserialize(byteArray57);
        byte[] byteArray60 = comparators.Composite.serialize(objList59);
        java.util.stream.Stream<java.lang.Object> objStream61 = objList59.parallelStream();
        comparators.Composite composite62 = new comparators.Composite(objList59);
        java.lang.Object[] objArray63 = composite62.toArray();
        int int64 = composite62.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream65 = composite62.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream66 = composite62.parallelStream();
        int int67 = composite62.startOffset;
        int int68 = composite48.compareTo(composite62);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        comparators.Composite composite75 = composite48.addBytes(byteArray73);
        java.nio.ByteBuffer byteBuffer76 = composite75.serializeToByteBuffer();
        comparators.Composite composite77 = compositeSerializer0.fromByteBuffer(byteBuffer76);
        int int79 = compositeSerializer0.computeInitialHashSize(14);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray84 = new byte[] {};
        int int85 = comparators.Composite.compare(byteArray83, byteArray84);
        java.util.List<java.lang.Object> objList86 = comparators.Composite.deserialize(byteArray84);
        byte[] byteArray87 = comparators.Composite.serialize(objList86);
        java.util.stream.Stream<java.lang.Object> objStream88 = objList86.parallelStream();
        comparators.Composite composite89 = new comparators.Composite(objList86);
        java.util.RandomAccess[] randomAccessArray90 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray91 = composite89.toArray(randomAccessArray90);
        comparators.Composite composite93 = composite89.addLong((long) 67);
        byte[] byteArray94 = composite93.serialize();
        java.util.List<java.lang.Object> objList95 = comparators.Composite.deserialize(byteArray94);
        comparators.Composite composite96 = new comparators.Composite(byteArray94);
        comparators.Composite composite97 = compositeSerializer0.fromBytes(byteArray94);
        int int99 = compositeSerializer0.computeInitialHashSize(13);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArrayOutputStream37);
        org.junit.Assert.assertEquals(byteArrayOutputStream37.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(composite77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 19 + "'", int79 == 19);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(objList86);
        org.junit.Assert.assertNull(byteArray87);
        org.junit.Assert.assertNotNull(objStream88);
        org.junit.Assert.assertNotNull(randomAccessArray90);
        org.junit.Assert.assertNotNull(randomAccessArray91);
        org.junit.Assert.assertNotNull(composite93);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList95);
        org.junit.Assert.assertNotNull(composite97);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 18 + "'", int99 == 18);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        comparators.Composite composite17 = composite15.addLong((long) 6);
        byte[] byteArray18 = composite15.serialize();
        boolean boolean19 = comparators.Composite.isValidType((java.lang.Object) composite15);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.util.RandomAccess[] randomAccessArray30 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray31 = composite29.toArray(randomAccessArray30);
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.stream();
        byte[] byteArray33 = composite29.bytes;
        comparators.Composite composite35 = composite29.addUTF8("Placeholder(0)");
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite35.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean37 = composite15.retainAll((java.util.Collection<java.lang.Object>) composite35);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 6, 0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(randomAccessArray30);
        org.junit.Assert.assertNotNull(randomAccessArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(objSpliterator36);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        comparators.hector.CompositeListSerializer compositeListSerializer15 = new comparators.hector.CompositeListSerializer();
        boolean boolean16 = composite9.contains((java.lang.Object) compositeListSerializer15);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        java.util.List<java.lang.Object> objList37 = comparators.Composite.deserialize(byteArray35);
        byte[] byteArray38 = comparators.Composite.serialize(objList37);
        java.util.stream.Stream<java.lang.Object> objStream39 = objList37.parallelStream();
        comparators.Composite composite40 = new comparators.Composite(objList37);
        java.lang.Object[] objArray41 = composite40.toArray();
        int int42 = composite40.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream43 = composite40.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream44 = composite40.parallelStream();
        int int45 = composite40.startOffset;
        int int46 = composite26.compareTo(composite40);
        byte[] byteArray50 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray51 = new byte[] {};
        int int52 = comparators.Composite.compare(byteArray50, byteArray51);
        comparators.Composite composite53 = composite26.addBytes(byteArray51);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray51);
        byte[] byteArray55 = compositeListSerializer15.toBytes(objList54);
        comparators.hector.CompositeListSerializer compositeListSerializer56 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        java.util.List<java.lang.Object> objList63 = comparators.Composite.deserialize(byteArray61);
        byte[] byteArray64 = comparators.Composite.serialize(objList63);
        java.util.stream.Stream<java.lang.Object> objStream65 = objList63.parallelStream();
        comparators.Composite composite66 = new comparators.Composite(objList63);
        byte[] byteArray67 = compositeListSerializer56.toBytes(objList63);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray72 = new byte[] {};
        int int73 = comparators.Composite.compare(byteArray71, byteArray72);
        java.util.List<java.lang.Object> objList74 = comparators.Composite.deserialize(byteArray72);
        byte[] byteArray75 = comparators.Composite.serialize(objList74);
        byte[] byteArray76 = comparators.Composite.serialize(objList74);
        byte[] byteArray77 = compositeListSerializer56.toBytes(objList74);
        byte[] byteArray78 = compositeListSerializer15.toBytes(objList74);
        int int80 = compositeListSerializer15.computeInitialHashSize((int) (byte) 1);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(objList37);
        org.junit.Assert.assertNull(byteArray38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(composite53);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(objList63);
        org.junit.Assert.assertNull(byteArray64);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNull(byteArray67);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(objList74);
        org.junit.Assert.assertNull(byteArray75);
        org.junit.Assert.assertNull(byteArray76);
        org.junit.Assert.assertNull(byteArray77);
        org.junit.Assert.assertNull(byteArray78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.len = 58;
        byte[] byteArray88 = compositeTypeIterator80.bytes;
        boolean boolean89 = compositeTypeIterator80.hasNext();
        compositeTypeIterator80.offset = (byte) -1;
        compositeTypeIterator80.len = 97;
        compositeTypeIterator80.type = (short) 100;
        int int96 = compositeTypeIterator80.type;
        byte[] byteArray97 = compositeTypeIterator80.bytes;
        java.lang.Class<?> wildcardClass98 = byteArray97.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 100 + "'", int96 == 100);
        org.junit.Assert.assertNotNull(byteArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray97), "[]");
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer22 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator28 = compositeType23.indexComparator;
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator34 = compositeType23.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.lang.String str40 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.List<java.util.List<java.lang.Object>> objListList41 = compositeListSerializer22.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList37);
        java.util.List<java.nio.ByteBuffer> byteBufferList42 = compositeListSerializer0.toBytesList(objListList41);
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        comparators.CompositeType compositeType44 = new comparators.CompositeType();
        comparators.CompositeType compositeType45 = comparators.CompositeType.instance;
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        java.util.List<java.lang.Object> objList52 = comparators.Composite.deserialize(byteArray50);
        byte[] byteArray53 = comparators.Composite.serialize(objList52);
        java.util.stream.Stream<java.lang.Object> objStream54 = objList52.parallelStream();
        comparators.Composite composite55 = new comparators.Composite(objList52);
        java.lang.Object[] objArray56 = composite55.toArray();
        int int57 = composite55.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream58 = composite55.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream59 = composite55.parallelStream();
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(byteArray64);
        byte[] byteArray67 = comparators.Composite.serialize(objList66);
        java.util.stream.Stream<java.lang.Object> objStream68 = objList66.parallelStream();
        comparators.Composite composite69 = new comparators.Composite(objList66);
        java.lang.Object[] objArray70 = composite69.toArray();
        int int71 = composite69.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream72 = composite69.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream73 = composite69.parallelStream();
        int int74 = composite69.startOffset;
        int int75 = composite55.compareTo(composite69);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        comparators.Composite composite82 = composite55.addBytes(byteArray80);
        java.nio.ByteBuffer byteBuffer83 = composite82.serializeToByteBuffer();
        compositeType45.validate(byteBuffer83);
        boolean boolean85 = comparators.Composite.validate(byteBuffer83);
        comparators.Composite composite86 = new comparators.Composite(byteBuffer83);
        java.nio.ByteBuffer byteBuffer87 = null;
        int int88 = compositeType44.compare(byteBuffer83, byteBuffer87);
        compositeType43.validate(byteBuffer83);
        java.util.List<java.lang.Object> objList90 = comparators.Composite.deserialize(byteBuffer83);
        java.nio.ByteBuffer byteBuffer91 = compositeListSerializer0.toByteBuffer(objList90);
        comparators.Composite composite92 = new comparators.Composite(objList90);
        byte[] byteArray93 = comparators.Composite.serialize(objList90);
        byte[] byteArray94 = comparators.Composite.serialize(objList90);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(indexInfoComparator28);
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteBufferComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(objListList41);
        org.junit.Assert.assertNotNull(byteBufferList42);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(compositeType45);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(objList52);
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(objList66);
        org.junit.Assert.assertNull(byteArray67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(composite82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(objList90);
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[67, 77, 80, 1, 9, 0, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[67, 77, 80, 1, 9, 0, 0, 0]");
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        comparators.Composite composite38 = composite11.addBytes(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = composite38.serializeToByteBuffer();
        compositeType1.validate(byteBuffer39);
        boolean boolean41 = comparators.Composite.validate(byteBuffer39);
        comparators.Composite composite42 = new comparators.Composite(byteBuffer39);
        java.nio.ByteBuffer byteBuffer43 = null;
        int int44 = compositeType0.compare(byteBuffer39, byteBuffer43);
        comparators.Composite composite45 = new comparators.Composite(byteBuffer39);
        boolean boolean46 = comparators.Composite.validate(byteBuffer39);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteBuffer39);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objList47);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        comparators.Composite composite34 = composite28.addBool(true);
        comparators.Composite composite36 = composite34.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream37 = composite34.byteStream;
        java.nio.ByteBuffer byteBuffer38 = compositeSerializer0.toByteBuffer(composite34);
        byte[] byteArray39 = composite34.serialize();
        composite34.clear();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArrayOutputStream37);
        org.junit.Assert.assertEquals(byteArrayOutputStream37.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[67, 77, 80, 1, 2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 6, 0]");
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.len = 58;
        byte[] byteArray88 = compositeTypeIterator80.bytes;
        comparators.Composite composite89 = null;
        compositeTypeIterator80.collection = composite89;
        boolean boolean91 = compositeTypeIterator80.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj92 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        comparators.CompositeType compositeType27 = new comparators.CompositeType();
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        int int40 = composite38.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream41 = composite38.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream42 = composite38.parallelStream();
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.lang.Object[] objArray53 = composite52.toArray();
        int int54 = composite52.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream55 = composite52.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream56 = composite52.parallelStream();
        int int57 = composite52.startOffset;
        int int58 = composite38.compareTo(composite52);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        comparators.Composite composite65 = composite38.addBytes(byteArray63);
        java.nio.ByteBuffer byteBuffer66 = composite65.serializeToByteBuffer();
        compositeType28.validate(byteBuffer66);
        boolean boolean68 = comparators.Composite.validate(byteBuffer66);
        comparators.Composite composite69 = new comparators.Composite(byteBuffer66);
        java.nio.ByteBuffer byteBuffer70 = null;
        int int71 = compositeType27.compare(byteBuffer66, byteBuffer70);
        comparators.Composite composite72 = new comparators.Composite(byteBuffer66);
        java.util.Spliterator<java.lang.Object> objSpliterator73 = composite72.spliterator();
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray86 = new byte[] {};
        int int87 = comparators.Composite.compare(byteArray85, byteArray86);
        int int88 = comparators.Composite.compare(byteArray79, byteArray86);
        boolean boolean90 = comparators.Composite.validate((int) (byte) 0, byteArray86, true);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator91 = composite26.new CompositeTypeIterator(composite72, 97, byteArray86);
        java.lang.Object[] objArray92 = composite72.toArray();
        comparators.Composite composite93 = new comparators.Composite(objArray92);
        java.util.UUID uUID94 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite95 = composite93.addTimeUUID(uUID94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objSpliterator73);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(objArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray92), "[[]]");
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        int int25 = composite9.startOffset;
        comparators.Composite composite27 = composite9.addBool(true);
        java.util.Spliterator<java.lang.Object> objSpliterator28 = composite27.spliterator();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertNotNull(composite27);
        org.junit.Assert.assertNotNull(objSpliterator28);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        comparators.CompositeType compositeType11 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray12 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList13 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13, byteBufferArray12);
        java.lang.String str15 = compositeType11.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator16 = compositeType11.indexComparator;
        comparators.CompositeType compositeType17 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray18 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList19 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19, byteBufferArray18);
        java.lang.String str21 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType11.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType17);
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.lang.String str28 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator34 = compositeType29.indexComparator;
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator40 = compositeType29.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType35);
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray42 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList43 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43, byteBufferArray42);
        java.lang.String str45 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.lang.String str46 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.util.AbstractList[] abstractListArray48 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray49 = (java.util.AbstractList<java.nio.ByteBuffer>[]) abstractListArray48;
        byteBufferListArray49[0] = byteBufferList25;
        byteBufferListArray49[1] = byteBufferList43;
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray54 = composite9.toArray(byteBufferListArray49);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        java.util.List<java.lang.Object> objList61 = comparators.Composite.deserialize(byteArray59);
        boolean boolean62 = composite9.equals((java.lang.Object) objList61);
        java.io.DataOutputStream dataOutputStream63 = composite9.out;
        java.io.ByteArrayOutputStream byteArrayOutputStream64 = composite9.byteStream;
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        java.util.List<java.lang.Object> objList71 = comparators.Composite.deserialize(byteArray69);
        byte[] byteArray72 = comparators.Composite.serialize(objList71);
        java.util.stream.Stream<java.lang.Object> objStream73 = objList71.parallelStream();
        comparators.Composite composite74 = new comparators.Composite(objList71);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        boolean boolean83 = comparators.Composite.validate((int) ' ', byteArray80, true);
        boolean boolean84 = composite74.contains((java.lang.Object) boolean83);
        java.util.stream.Stream<java.lang.Object> objStream85 = composite74.parallelStream();
        composite74.startOffset = 8;
        comparators.Composite composite89 = composite74.addAscii("hi!");
        int int90 = composite74.startOffset;
        int int91 = comparators.Composite.compare(composite9, composite74);
        java.util.UUID uUID92 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite93 = composite74.addTimeUUID(uUID92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(compositeType11);
        org.junit.Assert.assertNotNull(byteBufferArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(indexInfoComparator16);
        org.junit.Assert.assertNotNull(compositeType17);
        org.junit.Assert.assertNotNull(byteBufferArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(indexInfoComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteBufferComparator40);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteBufferArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(abstractListArray48);
        org.junit.Assert.assertNotNull(byteBufferListArray49);
        org.junit.Assert.assertNotNull(byteBufferListArray54);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(objList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(dataOutputStream63);
        org.junit.Assert.assertNull(byteArrayOutputStream64);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(objList71);
        org.junit.Assert.assertNull(byteArray72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objStream85);
        org.junit.Assert.assertNotNull(composite89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 8 + "'", int90 == 8);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        comparators.CompositeType compositeType10 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray11 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList12 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12, byteBufferArray11);
        java.lang.String str14 = compositeType10.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12);
        org.apache.cassandra.db.IColumn[] iColumnArray15 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList16 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16, iColumnArray15);
        java.lang.String str18 = compositeType10.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        java.lang.String str19 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        comparators.hector.CompositeListSerializer compositeListSerializer20 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType21 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray22 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList23 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23, byteBufferArray22);
        java.lang.String str25 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator26 = compositeType21.indexComparator;
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray28 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList29 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29, byteBufferArray28);
        java.lang.String str31 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator32 = compositeType21.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType27);
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.lang.String str38 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.List<java.util.List<java.lang.Object>> objListList39 = compositeListSerializer20.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList35);
        java.lang.String str40 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator41 = compositeType0.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator42 = compositeType0.reversed();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer44 = compositeType0.fromString("Placeholder(8)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(compositeType10);
        org.junit.Assert.assertNotNull(byteBufferArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(iColumnArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(compositeType21);
        org.junit.Assert.assertNotNull(byteBufferArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(indexInfoComparator26);
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteBufferArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteBufferComparator32);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(objListList39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteBufferComparator41);
        org.junit.Assert.assertNotNull(byteBufferComparator42);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        java.util.List<java.lang.Object> objList9 = comparators.Composite.deserialize(byteArray7);
        byte[] byteArray10 = comparators.Composite.serialize(objList9);
        java.util.stream.Stream<java.lang.Object> objStream11 = objList9.parallelStream();
        comparators.Composite composite12 = new comparators.Composite(objList9);
        java.lang.Object[] objArray13 = composite12.toArray();
        int int14 = composite12.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream15 = composite12.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream16 = composite12.parallelStream();
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        int int29 = comparators.Composite.compare(byteArray20, byteArray27);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray27);
        composite12.bytes = byteArray27;
        boolean boolean32 = comparators.Composite.validate(7, byteArray27);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray27, false);
        boolean boolean35 = comparators.Composite.validate(67, byteArray27);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        comparators.Composite composite0 = new comparators.Composite();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        int int15 = composite0.compareTo(composite10);
        int int16 = composite0.size();
        byte[] byteArray17 = composite0.serialize();
        java.util.stream.Stream<java.lang.Object> objStream18 = composite0.stream();
        comparators.Composite composite20 = composite0.addUTF8("Placeholder(32)");
        comparators.Composite composite22 = composite0.addLong((long) 32);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(composite20);
        org.junit.Assert.assertNotNull(composite22);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        comparators.Composite composite20 = composite18.addLong((long) '#');
        comparators.Composite composite22 = composite20.addLong((long) 8);
        boolean boolean23 = composite22.isEmpty();
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.lang.Object[] objArray34 = composite33.toArray();
        int int35 = composite33.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream36 = composite33.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream37 = composite33.parallelStream();
        int int38 = composite33.startOffset;
        int int39 = composite33.startOffset;
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList46.parallelStream();
        comparators.Composite composite49 = new comparators.Composite(objList46);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        boolean boolean58 = comparators.Composite.validate((int) ' ', byteArray55, true);
        boolean boolean59 = composite49.contains((java.lang.Object) boolean58);
        java.util.Spliterator<java.lang.Object> objSpliterator60 = composite49.spliterator();
        boolean boolean61 = composite33.containsAll((java.util.Collection<java.lang.Object>) composite49);
        byte[] byteArray62 = null;
        comparators.Composite composite63 = new comparators.Composite(byteArray62);
        boolean boolean64 = composite49.containsAll((java.util.Collection<java.lang.Object>) composite63);
        java.lang.CharSequence[] charSequenceArray65 = new java.lang.CharSequence[] {};
        java.lang.CharSequence[] charSequenceArray66 = composite63.toArray(charSequenceArray65);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence[] charSequenceArray67 = composite22.toArray(charSequenceArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(composite20);
        org.junit.Assert.assertNotNull(composite22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objSpliterator60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(charSequenceArray65);
        org.junit.Assert.assertNotNull(charSequenceArray66);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        comparators.Composite composite0 = new comparators.Composite();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        int int15 = composite0.compareTo(composite10);
        java.util.stream.Stream<java.lang.Object> objStream16 = composite0.stream();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(objStream16);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 80;
        compositeTypeIterator80.len = (short) 1;
        byte[] byteArray85 = compositeTypeIterator80.bytes;
        byte[] byteArray86 = compositeTypeIterator80.bytes;
        comparators.Composite composite87 = new comparators.Composite(byteArray86);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        int int13 = composite10.startOffset;
        byte[] byteArray14 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        boolean boolean33 = comparators.Composite.validate((int) ' ', byteArray30, true);
        boolean boolean34 = composite24.contains((java.lang.Object) boolean33);
        java.util.stream.Stream<java.lang.Object> objStream35 = composite24.parallelStream();
        boolean boolean36 = composite24.isEmpty();
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray41 = new byte[] {};
        int int42 = comparators.Composite.compare(byteArray40, byteArray41);
        java.util.List<java.lang.Object> objList43 = comparators.Composite.deserialize(byteArray41);
        byte[] byteArray44 = comparators.Composite.serialize(objList43);
        java.util.stream.Stream<java.lang.Object> objStream45 = objList43.parallelStream();
        comparators.Composite composite46 = new comparators.Composite(objList43);
        java.lang.Object[] objArray47 = composite46.toArray();
        int int48 = composite46.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream49 = composite46.parallelStream();
        boolean boolean50 = composite24.containsAll((java.util.Collection<java.lang.Object>) composite46);
        comparators.Composite composite52 = composite24.addLong((long) (short) 1);
        comparators.Composite composite54 = composite52.addBool(true);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        java.util.List<java.lang.Object> objList61 = comparators.Composite.deserialize(byteArray59);
        byte[] byteArray62 = comparators.Composite.serialize(objList61);
        java.util.stream.Stream<java.lang.Object> objStream63 = objList61.parallelStream();
        comparators.Composite composite64 = new comparators.Composite(objList61);
        java.lang.Object[] objArray65 = composite64.toArray();
        int int66 = composite64.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream67 = composite64.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream68 = composite64.parallelStream();
        comparators.Composite composite70 = composite64.addBool(true);
        java.util.Iterator<java.lang.Object> objItor71 = composite64.iterator();
        comparators.Composite composite73 = composite64.addReal((java.lang.Double) 100.0d);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray78 = new byte[] {};
        int int79 = comparators.Composite.compare(byteArray77, byteArray78);
        java.util.List<java.lang.Object> objList80 = comparators.Composite.deserialize(byteArray78);
        byte[] byteArray81 = comparators.Composite.serialize(objList80);
        java.util.stream.Stream<java.lang.Object> objStream82 = objList80.parallelStream();
        comparators.Composite composite83 = new comparators.Composite(objList80);
        java.lang.Object[] objArray84 = composite83.toArray();
        int int85 = composite83.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream86 = composite83.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream87 = composite83.parallelStream();
        int int88 = composite83.startOffset;
        composite83.clear();
        boolean boolean90 = composite73.containsAll((java.util.Collection<java.lang.Object>) composite83);
        java.util.Iterator<java.lang.Object> objItor91 = composite73.iterator();
        boolean boolean92 = composite52.add((java.lang.Object) composite73);
        comparators.Composite composite94 = composite73.addBool(true);
        comparators.Composite composite95 = composite73.addMatchMinimum();
        comparators.Composite composite96 = composite73.addMatchMinimum();
        byte[] byteArray97 = compositeSerializer0.toBytes(composite96);
        int int99 = compositeSerializer0.computeInitialHashSize(103);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(objList43);
        org.junit.Assert.assertNull(byteArray44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(composite52);
        org.junit.Assert.assertNotNull(composite54);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(objList61);
        org.junit.Assert.assertNull(byteArray62);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(composite70);
        org.junit.Assert.assertNotNull(objItor71);
        org.junit.Assert.assertNotNull(composite73);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(objList80);
        org.junit.Assert.assertNull(byteArray81);
        org.junit.Assert.assertNotNull(objStream82);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(objStream86);
        org.junit.Assert.assertNotNull(objStream87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(objItor91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(composite94);
        org.junit.Assert.assertNotNull(composite95);
        org.junit.Assert.assertNotNull(composite96);
        org.junit.Assert.assertNotNull(byteArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray97), "[67, 77, 80, 1, 2, 1, 0, 4, 64, 89, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 1, 0]");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 138 + "'", int99 == 138);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        java.lang.Object[] objArray13 = composite9.toArray();
        comparators.Composite composite15 = composite9.addAscii("");
        int int16 = composite15.size();
        comparators.Composite composite17 = composite15.addMatchMaximum();
        java.util.UUID uUID18 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite19 = composite17.addLexicalUUID(uUID18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(composite17);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        java.lang.String str25 = composite9.toString();
        int int26 = composite9.size();
        comparators.Composite composite27 = composite9.addMatchMinimum();
        composite9.startOffset = (short) 1;
        java.util.Iterator<java.lang.Object> objItor30 = composite9.iterator();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(composite27);
        org.junit.Assert.assertNotNull(objItor30);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        byte[] byteArray14 = composite13.serialize();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        comparators.Composite composite30 = composite24.addBool(true);
        java.util.Iterator<java.lang.Object> objItor31 = composite24.iterator();
        comparators.Composite composite32 = new comparators.Composite();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite32.compareTo(composite42);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        boolean boolean66 = comparators.Composite.validate((int) ' ', byteArray63, true);
        boolean boolean67 = composite57.contains((java.lang.Object) boolean66);
        java.util.stream.Stream<java.lang.Object> objStream68 = composite57.parallelStream();
        boolean boolean69 = composite32.contains((java.lang.Object) composite57);
        boolean boolean70 = composite24.addAll((java.util.Collection<java.lang.Object>) composite32);
        int int71 = composite32.startOffset;
        boolean boolean72 = composite13.add((java.lang.Object) composite32);
        comparators.Composite composite74 = composite32.addUTF8("434d500103000000000000004300");
        comparators.Composite composite76 = composite74.addLong((long) 5);
        java.util.UUID uUID77 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite78 = composite76.addTimeUUID(uUID77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(composite76);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        byte[] byteArray68 = composite65.bytes;
        int int69 = composite65.size();
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray75 = new byte[] {};
        int int76 = comparators.Composite.compare(byteArray74, byteArray75);
        java.util.List<java.lang.Object> objList77 = comparators.Composite.deserialize(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray82 = new byte[] {};
        int int83 = comparators.Composite.compare(byteArray81, byteArray82);
        java.util.List<java.lang.Object> objList84 = comparators.Composite.deserialize(byteArray82);
        byte[] byteArray85 = comparators.Composite.serialize(objList84);
        java.util.stream.Stream<java.lang.Object> objStream86 = objList84.parallelStream();
        comparators.Composite composite87 = new comparators.Composite(objList84);
        java.util.RandomAccess[] randomAccessArray88 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray89 = composite87.toArray(randomAccessArray88);
        comparators.Composite composite91 = composite87.addLong((long) 67);
        byte[] byteArray92 = composite91.serialize();
        java.util.List<java.lang.Object> objList93 = comparators.Composite.deserialize(byteArray92);
        int int94 = comparators.Composite.compare(byteArray75, byteArray92);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator95 = composite17.new CompositeTypeIterator(composite65, 255, byteArray92);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj96 = compositeTypeIterator95.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNull(byteArray68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(objList77);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(objList84);
        org.junit.Assert.assertNull(byteArray85);
        org.junit.Assert.assertNotNull(objStream86);
        org.junit.Assert.assertNotNull(randomAccessArray88);
        org.junit.Assert.assertNotNull(randomAccessArray89);
        org.junit.Assert.assertNotNull(composite91);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        comparators.hector.CompositeSerializer compositeSerializer30 = new comparators.hector.CompositeSerializer();
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        java.util.List<java.lang.Object> objList37 = comparators.Composite.deserialize(byteArray35);
        byte[] byteArray38 = comparators.Composite.serialize(objList37);
        java.util.stream.Stream<java.lang.Object> objStream39 = objList37.parallelStream();
        comparators.Composite composite40 = new comparators.Composite(objList37);
        java.lang.Object[] objArray41 = composite40.toArray();
        int int42 = composite40.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream43 = composite40.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream44 = composite40.parallelStream();
        comparators.Composite composite46 = composite40.addBool(true);
        java.io.DataOutputStream dataOutputStream47 = composite40.out;
        byte[] byteArray48 = compositeSerializer30.toBytes(composite40);
        byte[] byteArray51 = null;
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        int int65 = comparators.Composite.compare(byteArray56, byteArray63);
        int int66 = comparators.Composite.compare((int) (byte) 1, byteArray51, 10, byteArray56);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray71 = new byte[] {};
        int int72 = comparators.Composite.compare(byteArray70, byteArray71);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        int int79 = comparators.Composite.compare(byteArray70, byteArray77);
        java.util.List<java.lang.Object> objList80 = comparators.Composite.deserialize(byteArray77);
        int int81 = comparators.Composite.compare(byteArray56, byteArray77);
        java.util.List<java.lang.Object> objList82 = comparators.Composite.deserialize(byteArray77);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator83 = composite23.new CompositeTypeIterator(composite40, 5, byteArray77);
        compositeTypeIterator83.start = 0;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(objList37);
        org.junit.Assert.assertNull(byteArray38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(composite46);
        org.junit.Assert.assertNotNull(dataOutputStream47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(objList80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(objList82);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        byte[] byteArray20 = comparators.Composite.serialize(objList18);
        byte[] byteArray21 = compositeListSerializer0.toBytes(objList18);
        byte[] byteArray22 = null;
        java.util.List<java.lang.Object> objList23 = compositeListSerializer0.fromBytes(byteArray22);
        int int25 = compositeListSerializer0.computeInitialHashSize(77);
        byte[] byteArray26 = null;
        java.util.List<java.lang.Object> objList27 = compositeListSerializer0.fromBytes(byteArray26);
        comparators.hector.CompositeListSerializer compositeListSerializer28 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        byte[] byteArray39 = compositeListSerializer28.toBytes(objList35);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        byte[] byteArray48 = comparators.Composite.serialize(objList46);
        byte[] byteArray49 = compositeListSerializer28.toBytes(objList46);
        byte[] byteArray50 = compositeListSerializer0.toBytes(objList46);
        int int52 = compositeListSerializer0.computeInitialHashSize(47);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        boolean boolean62 = comparators.Composite.validate((int) ' ', byteArray59, true);
        boolean boolean63 = comparators.Composite.validate(100, byteArray59);
        java.util.List<java.lang.Object> objList64 = comparators.Composite.deserialize(byteArray59);
        byte[] byteArray65 = comparators.Composite.serialize(objList64);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer66 = compositeListSerializer0.toByteBuffer(objList64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 103 + "'", int25 == 103);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNull(byteArray48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 63 + "'", int52 == 63);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(objList64);
        org.junit.Assert.assertNull(byteArray65);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        int int13 = composite10.startOffset;
        byte[] byteArray14 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        comparators.Composite composite30 = composite24.addBool(true);
        java.util.Iterator<java.lang.Object> objItor31 = composite24.iterator();
        comparators.Composite composite33 = composite24.addReal((java.lang.Double) 100.0d);
        comparators.Composite composite35 = composite33.addLong((long) '#');
        byte[] byteArray36 = compositeSerializer0.toBytes(composite35);
        byte[] byteArray37 = null;
        comparators.Composite composite38 = compositeSerializer0.fromBytes(byteArray37);
        comparators.Composite composite40 = composite38.addUTF8("UTF-8");
        java.util.UUID uUID41 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite42 = composite40.addTimeUUID(uUID41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[67, 77, 80, 1, 2, 1, 0, 4, 64, 89, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 35, 0]");
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(composite40);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        composite9.clear();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream28 = null;
        composite25.byteStream = byteArrayOutputStream28;
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        int int41 = composite39.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream42 = composite39.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream43 = composite39.parallelStream();
        comparators.Composite composite45 = composite39.addBool(true);
        java.util.Iterator<java.lang.Object> objItor46 = composite39.iterator();
        int int47 = composite25.compareTo(composite39);
        boolean boolean48 = composite9.addAll((java.util.Collection<java.lang.Object>) composite25);
        byte[] byteArray49 = composite9.bytes;
        comparators.Composite composite51 = composite9.addUTF8("Placeholder(35)");
        byte[] byteArray52 = composite9.serialize();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(composite45);
        org.junit.Assert.assertNotNull(objItor46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(composite51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[67, 77, 80, 1, 8, 0, 15, 80, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 40, 51, 53, 41, 0]");
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        byte[] byteArray21 = composite9.bytes;
        comparators.Composite composite23 = composite9.addUTF8("Placeholder(1)");
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.lang.Object[] objArray34 = composite33.toArray();
        int int35 = composite33.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream36 = null;
        composite33.byteStream = byteArrayOutputStream36;
        boolean boolean38 = composite23.containsAll((java.util.Collection<java.lang.Object>) composite33);
        int int39 = composite33.size();
        comparators.Composite composite40 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int41 = comparators.Composite.compare(composite33, composite40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(composite23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        int int33 = composite28.startOffset;
        composite28.clear();
        boolean boolean35 = composite18.containsAll((java.util.Collection<java.lang.Object>) composite28);
        java.lang.String str36 = composite28.toString();
        java.util.stream.Stream<java.lang.Object> objStream37 = composite28.stream();
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        java.util.List<java.lang.Object> objList44 = comparators.Composite.deserialize(byteArray42);
        byte[] byteArray45 = comparators.Composite.serialize(objList44);
        java.util.stream.Stream<java.lang.Object> objStream46 = objList44.parallelStream();
        comparators.Composite composite47 = new comparators.Composite(objList44);
        java.lang.Object[] objArray48 = composite47.toArray();
        int int49 = composite47.startOffset;
        comparators.Composite composite51 = composite47.addBool(true);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean52 = composite28.retainAll((java.util.Collection<java.lang.Object>) composite47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(objList44);
        org.junit.Assert.assertNull(byteArray45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(composite51);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        int int81 = compositeTypeIterator80.start;
        compositeTypeIterator80.len = 3;
        byte[] byteArray84 = compositeTypeIterator80.bytes;
        int int85 = compositeTypeIterator80.type;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 67 + "'", int81 == 67);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        int int33 = composite28.startOffset;
        composite28.clear();
        boolean boolean35 = composite18.containsAll((java.util.Collection<java.lang.Object>) composite28);
        java.util.Iterator<java.lang.Object> objItor36 = composite18.iterator();
        java.lang.String str37 = composite18.toString();
        composite18.startOffset = 9;
        byte[] byteArray40 = composite18.bytes;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objItor36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "true" + "'", str37, "true");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[67, 77, 80, 1, 2, 1, 0, 4, 64, 89, 0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        byte[] byteArray68 = composite65.bytes;
        int int69 = composite65.size();
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray75 = new byte[] {};
        int int76 = comparators.Composite.compare(byteArray74, byteArray75);
        java.util.List<java.lang.Object> objList77 = comparators.Composite.deserialize(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray82 = new byte[] {};
        int int83 = comparators.Composite.compare(byteArray81, byteArray82);
        java.util.List<java.lang.Object> objList84 = comparators.Composite.deserialize(byteArray82);
        byte[] byteArray85 = comparators.Composite.serialize(objList84);
        java.util.stream.Stream<java.lang.Object> objStream86 = objList84.parallelStream();
        comparators.Composite composite87 = new comparators.Composite(objList84);
        java.util.RandomAccess[] randomAccessArray88 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray89 = composite87.toArray(randomAccessArray88);
        comparators.Composite composite91 = composite87.addLong((long) 67);
        byte[] byteArray92 = composite91.serialize();
        java.util.List<java.lang.Object> objList93 = comparators.Composite.deserialize(byteArray92);
        int int94 = comparators.Composite.compare(byteArray75, byteArray92);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator95 = composite17.new CompositeTypeIterator(composite65, 255, byteArray92);
        comparators.Composite composite96 = compositeTypeIterator95.collection;
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator95.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNull(byteArray68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(objList77);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(objList84);
        org.junit.Assert.assertNull(byteArray85);
        org.junit.Assert.assertNotNull(objStream86);
        org.junit.Assert.assertNotNull(randomAccessArray88);
        org.junit.Assert.assertNotNull(randomAccessArray89);
        org.junit.Assert.assertNotNull(composite91);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(composite96);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        java.nio.ByteBuffer byteBuffer19 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite20 = compositeSerializer0.fromByteBuffer(byteBuffer19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        composite9.startOffset = (byte) 1;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        byte[] byteArray37 = composite25.bytes;
        comparators.Composite composite39 = composite25.addUTF8("Placeholder(1)");
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList46.parallelStream();
        comparators.Composite composite49 = new comparators.Composite(objList46);
        java.lang.Object[] objArray50 = composite49.toArray();
        int int51 = composite49.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream52 = null;
        composite49.byteStream = byteArrayOutputStream52;
        boolean boolean54 = composite39.containsAll((java.util.Collection<java.lang.Object>) composite49);
        comparators.Composite composite56 = composite49.addUTF8("US-ASCII");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean57 = composite9.retainAll((java.util.Collection<java.lang.Object>) composite49);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(composite56);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        composite9.clear();
        boolean boolean17 = composite9.equals((java.lang.Object) 1L);
        comparators.Composite composite19 = composite9.addLong(0L);
        byte[] byteArray20 = composite9.bytes;
        comparators.CompositeType compositeType21 = new comparators.CompositeType();
        comparators.CompositeType compositeType22 = comparators.CompositeType.instance;
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        java.util.List<java.lang.Object> objList29 = comparators.Composite.deserialize(byteArray27);
        byte[] byteArray30 = comparators.Composite.serialize(objList29);
        java.util.stream.Stream<java.lang.Object> objStream31 = objList29.parallelStream();
        comparators.Composite composite32 = new comparators.Composite(objList29);
        java.lang.Object[] objArray33 = composite32.toArray();
        int int34 = composite32.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream35 = composite32.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream36 = composite32.parallelStream();
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray41 = new byte[] {};
        int int42 = comparators.Composite.compare(byteArray40, byteArray41);
        java.util.List<java.lang.Object> objList43 = comparators.Composite.deserialize(byteArray41);
        byte[] byteArray44 = comparators.Composite.serialize(objList43);
        java.util.stream.Stream<java.lang.Object> objStream45 = objList43.parallelStream();
        comparators.Composite composite46 = new comparators.Composite(objList43);
        java.lang.Object[] objArray47 = composite46.toArray();
        int int48 = composite46.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream49 = composite46.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream50 = composite46.parallelStream();
        int int51 = composite46.startOffset;
        int int52 = composite32.compareTo(composite46);
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        comparators.Composite composite59 = composite32.addBytes(byteArray57);
        java.nio.ByteBuffer byteBuffer60 = composite59.serializeToByteBuffer();
        compositeType22.validate(byteBuffer60);
        boolean boolean62 = comparators.Composite.validate(byteBuffer60);
        comparators.Composite composite63 = new comparators.Composite(byteBuffer60);
        java.nio.ByteBuffer byteBuffer64 = null;
        int int65 = compositeType21.compare(byteBuffer60, byteBuffer64);
        comparators.Composite composite66 = new comparators.Composite(byteBuffer60);
        comparators.Composite composite67 = new comparators.Composite(byteBuffer60);
        comparators.Composite composite68 = new comparators.Composite(byteBuffer60);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean69 = composite9.retainAll((java.util.Collection<java.lang.Object>) composite68);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(composite19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(compositeType22);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(objList29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(objList43);
        org.junit.Assert.assertNull(byteArray44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(composite59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        java.util.stream.Stream<java.lang.Object> objStream17 = composite9.stream();
        byte[] byteArray18 = composite9.bytes;
        java.util.stream.Stream<java.lang.Object> objStream19 = composite9.stream();
        comparators.hector.CompositeSerializer compositeSerializer20 = new comparators.hector.CompositeSerializer();
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray28 = comparators.Composite.serialize(objList27);
        java.util.stream.Stream<java.lang.Object> objStream29 = objList27.parallelStream();
        comparators.Composite composite30 = new comparators.Composite(objList27);
        java.lang.Object[] objArray31 = composite30.toArray();
        int int32 = composite30.startOffset;
        int int33 = composite30.startOffset;
        byte[] byteArray34 = compositeSerializer20.toBytes(composite30);
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.lang.Object[] objArray45 = composite44.toArray();
        int int46 = composite44.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream47 = composite44.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream48 = composite44.parallelStream();
        comparators.Composite composite50 = composite44.addBool(true);
        java.util.Iterator<java.lang.Object> objItor51 = composite44.iterator();
        comparators.Composite composite53 = composite44.addReal((java.lang.Double) 100.0d);
        comparators.Composite composite55 = composite53.addLong((long) '#');
        byte[] byteArray56 = compositeSerializer20.toBytes(composite55);
        comparators.Composite composite58 = composite55.addReal((java.lang.Double) 1.0d);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        java.util.List<java.lang.Object> objList65 = comparators.Composite.deserialize(byteArray63);
        byte[] byteArray66 = comparators.Composite.serialize(objList65);
        java.util.stream.Stream<java.lang.Object> objStream67 = objList65.parallelStream();
        comparators.Composite composite68 = new comparators.Composite(objList65);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray74 = new byte[] {};
        int int75 = comparators.Composite.compare(byteArray73, byteArray74);
        boolean boolean77 = comparators.Composite.validate((int) ' ', byteArray74, true);
        boolean boolean78 = composite68.contains((java.lang.Object) boolean77);
        java.util.Spliterator<java.lang.Object> objSpliterator79 = composite68.spliterator();
        byte[] byteArray80 = composite68.bytes;
        int int81 = composite55.compareTo(composite68);
        java.util.stream.Stream<java.lang.Object> objStream82 = composite55.parallelStream();
        comparators.Composite composite83 = composite55.addMatchMaximum();
        composite83.clear();
        int int85 = comparators.Composite.compare(composite9, composite83);
        boolean boolean86 = composite83.isEmpty();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(objStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(objStream19);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(composite50);
        org.junit.Assert.assertNotNull(objItor51);
        org.junit.Assert.assertNotNull(composite53);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[67, 77, 80, 1, 2, 1, 0, 4, 64, 89, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 35, 0]");
        org.junit.Assert.assertNotNull(composite58);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(objList65);
        org.junit.Assert.assertNull(byteArray66);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objSpliterator79);
        org.junit.Assert.assertNull(byteArray80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(objStream82);
        org.junit.Assert.assertNotNull(composite83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        int int33 = composite28.startOffset;
        composite28.clear();
        boolean boolean35 = composite18.containsAll((java.util.Collection<java.lang.Object>) composite28);
        comparators.Composite composite37 = composite28.addAscii("hi!");
        comparators.hector.CompositeListSerializer compositeListSerializer38 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        byte[] byteArray49 = compositeListSerializer38.toBytes(objList45);
        comparators.CompositeType compositeType50 = new comparators.CompositeType();
        comparators.CompositeType compositeType51 = comparators.CompositeType.instance;
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray56 = new byte[] {};
        int int57 = comparators.Composite.compare(byteArray55, byteArray56);
        java.util.List<java.lang.Object> objList58 = comparators.Composite.deserialize(byteArray56);
        byte[] byteArray59 = comparators.Composite.serialize(objList58);
        java.util.stream.Stream<java.lang.Object> objStream60 = objList58.parallelStream();
        comparators.Composite composite61 = new comparators.Composite(objList58);
        java.lang.Object[] objArray62 = composite61.toArray();
        int int63 = composite61.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream64 = composite61.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream65 = composite61.parallelStream();
        byte[] byteArray69 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray70 = new byte[] {};
        int int71 = comparators.Composite.compare(byteArray69, byteArray70);
        java.util.List<java.lang.Object> objList72 = comparators.Composite.deserialize(byteArray70);
        byte[] byteArray73 = comparators.Composite.serialize(objList72);
        java.util.stream.Stream<java.lang.Object> objStream74 = objList72.parallelStream();
        comparators.Composite composite75 = new comparators.Composite(objList72);
        java.lang.Object[] objArray76 = composite75.toArray();
        int int77 = composite75.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream78 = composite75.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream79 = composite75.parallelStream();
        int int80 = composite75.startOffset;
        int int81 = composite61.compareTo(composite75);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray86 = new byte[] {};
        int int87 = comparators.Composite.compare(byteArray85, byteArray86);
        comparators.Composite composite88 = composite61.addBytes(byteArray86);
        java.nio.ByteBuffer byteBuffer89 = composite88.serializeToByteBuffer();
        compositeType51.validate(byteBuffer89);
        boolean boolean91 = comparators.Composite.validate(byteBuffer89);
        comparators.Composite composite92 = new comparators.Composite(byteBuffer89);
        java.nio.ByteBuffer byteBuffer93 = null;
        int int94 = compositeType50.compare(byteBuffer89, byteBuffer93);
        comparators.Composite composite95 = new comparators.Composite(byteBuffer89);
        java.util.List<java.lang.Object> objList96 = compositeListSerializer38.fromByteBuffer(byteBuffer89);
        boolean boolean97 = composite37.addAll((java.util.Collection<java.lang.Object>) objList96);
        byte[] byteArray98 = comparators.Composite.serialize(objList96);
        comparators.Composite composite99 = new comparators.Composite(objList96);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(compositeType51);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(objList58);
        org.junit.Assert.assertNull(byteArray59);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objList72);
        org.junit.Assert.assertNull(byteArray73);
        org.junit.Assert.assertNotNull(objStream74);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(objStream79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(composite88);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(objList96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(byteArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray98), "[67, 77, 80, 1, 9, 0, 0, 0]");
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        comparators.Composite composite37 = composite10.addBytes(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = composite37.serializeToByteBuffer();
        compositeType0.validate(byteBuffer38);
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator45 = compositeType40.indexComparator;
        boolean boolean46 = comparators.Composite.isValidType((java.lang.Object) compositeType40);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator47 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType40);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator48 = compositeType0.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator49 = byteBufferComparator48.reversed();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(indexInfoComparator45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteBufferComparator47);
        org.junit.Assert.assertNotNull(byteBufferComparator48);
        org.junit.Assert.assertNotNull(byteBufferComparator49);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(9);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        byte[] byteArray30 = comparators.Composite.serialize(objList28);
        byte[] byteArray31 = compositeListSerializer0.toBytes(objList28);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray36);
        byte[] byteArray39 = comparators.Composite.serialize(objList38);
        java.util.stream.Stream<java.lang.Object> objStream40 = objList38.parallelStream();
        byte[] byteArray41 = compositeListSerializer0.toBytes(objList38);
        comparators.hector.CompositeListSerializer compositeListSerializer42 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray44 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList45 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45, byteBufferArray44);
        java.lang.String str47 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator48 = compositeType43.indexComparator;
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray50 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList51 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51, byteBufferArray50);
        java.lang.String str53 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator54 = compositeType43.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType49);
        comparators.CompositeType compositeType55 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray56 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList57 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57, byteBufferArray56);
        java.lang.String str59 = compositeType55.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        java.lang.String str60 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        java.util.List<java.util.List<java.lang.Object>> objListList61 = compositeListSerializer42.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList57);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet62 = compositeListSerializer0.toBytesSet(objListList61);
        comparators.hector.CompositeListSerializer compositeListSerializer63 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray68 = new byte[] {};
        int int69 = comparators.Composite.compare(byteArray67, byteArray68);
        java.util.List<java.lang.Object> objList70 = comparators.Composite.deserialize(byteArray68);
        byte[] byteArray71 = comparators.Composite.serialize(objList70);
        java.util.stream.Stream<java.lang.Object> objStream72 = objList70.parallelStream();
        comparators.Composite composite73 = new comparators.Composite(objList70);
        byte[] byteArray74 = compositeListSerializer63.toBytes(objList70);
        byte[] byteArray78 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray79 = new byte[] {};
        int int80 = comparators.Composite.compare(byteArray78, byteArray79);
        java.util.List<java.lang.Object> objList81 = comparators.Composite.deserialize(byteArray79);
        byte[] byteArray82 = comparators.Composite.serialize(objList81);
        byte[] byteArray83 = comparators.Composite.serialize(objList81);
        byte[] byteArray84 = compositeListSerializer63.toBytes(objList81);
        byte[] byteArray85 = null;
        java.util.List<java.lang.Object> objList86 = compositeListSerializer63.fromBytes(byteArray85);
        comparators.Composite composite87 = new comparators.Composite(objList86);
        byte[] byteArray88 = comparators.Composite.serialize(objList86);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer89 = compositeListSerializer0.toByteBuffer(objList86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(byteBufferArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(indexInfoComparator48);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteBufferComparator54);
        org.junit.Assert.assertNotNull(compositeType55);
        org.junit.Assert.assertNotNull(byteBufferArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(objListList61);
        org.junit.Assert.assertNotNull(byteBufferSet62);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(objList70);
        org.junit.Assert.assertNull(byteArray71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNull(byteArray74);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(objList81);
        org.junit.Assert.assertNull(byteArray82);
        org.junit.Assert.assertNull(byteArray83);
        org.junit.Assert.assertNull(byteArray84);
        org.junit.Assert.assertNotNull(objList86);
        org.junit.Assert.assertNull(byteArray88);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        byte[] byteArray2 = null;
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray8 = new byte[] {};
        int int9 = comparators.Composite.compare(byteArray7, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        int int16 = comparators.Composite.compare(byteArray7, byteArray14);
        int int17 = comparators.Composite.compare((int) (byte) 1, byteArray2, 10, byteArray7);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray29 = new byte[] {};
        int int30 = comparators.Composite.compare(byteArray28, byteArray29);
        java.util.List<java.lang.Object> objList31 = comparators.Composite.deserialize(byteArray29);
        byte[] byteArray32 = comparators.Composite.serialize(objList31);
        java.util.stream.Stream<java.lang.Object> objStream33 = objList31.parallelStream();
        comparators.Composite composite34 = new comparators.Composite(objList31);
        java.util.RandomAccess[] randomAccessArray35 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray36 = composite34.toArray(randomAccessArray35);
        comparators.Composite composite38 = composite34.addLong((long) 67);
        byte[] byteArray39 = composite38.serialize();
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray39);
        int int41 = comparators.Composite.compare(byteArray22, byteArray39);
        int int42 = comparators.Composite.compare(byteArray2, byteArray22);
        boolean boolean44 = comparators.Composite.validate(607, byteArray2, false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(objList31);
        org.junit.Assert.assertNull(byteArray32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(randomAccessArray35);
        org.junit.Assert.assertNotNull(randomAccessArray36);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        comparators.CompositeType compositeType9 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray10 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList11 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11, byteBufferArray10);
        java.lang.String str13 = compositeType9.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType9.indexComparator;
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator20 = compositeType9.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType15);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator21 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType9);
        comparators.CompositeType compositeType22 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray23 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList24 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24, byteBufferArray23);
        java.lang.String str26 = compositeType22.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator27 = compositeType22.indexComparator;
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray29 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList30 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30, byteBufferArray29);
        java.lang.String str32 = compositeType28.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList30);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator33 = compositeType22.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType28);
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        java.lang.Object[] objArray58 = composite57.toArray();
        int int59 = composite57.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream60 = composite57.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream61 = composite57.parallelStream();
        int int62 = composite57.startOffset;
        int int63 = composite43.compareTo(composite57);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray68 = new byte[] {};
        int int69 = comparators.Composite.compare(byteArray67, byteArray68);
        comparators.Composite composite70 = composite43.addBytes(byteArray68);
        java.nio.ByteBuffer byteBuffer71 = composite70.serializeToByteBuffer();
        compositeType28.validate(byteBuffer71);
        comparators.CompositeType compositeType73 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray74 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList75 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList75, byteBufferArray74);
        java.lang.String str77 = compositeType73.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList75);
        org.apache.cassandra.db.IColumn[] iColumnArray78 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList79 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList79, iColumnArray78);
        java.lang.String str81 = compositeType73.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList79);
        org.apache.cassandra.db.IColumn[] iColumnArray82 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList83 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList83, iColumnArray82);
        java.lang.String str85 = compositeType73.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList83);
        java.lang.String str86 = compositeType28.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList83);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator87 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType28);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator88 = compositeType0.reversed();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(compositeType9);
        org.junit.Assert.assertNotNull(byteBufferArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteBufferComparator20);
        org.junit.Assert.assertNotNull(byteBufferComparator21);
        org.junit.Assert.assertNotNull(compositeType22);
        org.junit.Assert.assertNotNull(byteBufferArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(indexInfoComparator27);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteBufferArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteBufferComparator33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(composite70);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(compositeType73);
        org.junit.Assert.assertNotNull(byteBufferArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(iColumnArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(iColumnArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(byteBufferComparator87);
        org.junit.Assert.assertNotNull(byteBufferComparator88);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        comparators.hector.CompositeListSerializer compositeListSerializer1 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType2 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray3 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList4 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList4, byteBufferArray3);
        java.lang.String str6 = compositeType2.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList4);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator7 = compositeType2.indexComparator;
        comparators.CompositeType compositeType8 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray9 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList10 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList10, byteBufferArray9);
        java.lang.String str12 = compositeType8.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList10);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = compositeType2.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType8);
        comparators.CompositeType compositeType14 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray15 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList16 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16, byteBufferArray15);
        java.lang.String str18 = compositeType14.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16);
        java.lang.String str19 = compositeType8.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16);
        java.util.List<java.util.List<java.lang.Object>> objListList20 = compositeListSerializer1.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList16);
        int int22 = compositeListSerializer1.computeInitialHashSize(9);
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        java.util.List<java.lang.Object> objList29 = comparators.Composite.deserialize(byteArray27);
        byte[] byteArray30 = comparators.Composite.serialize(objList29);
        java.util.stream.Stream<java.lang.Object> objStream31 = objList29.parallelStream();
        comparators.Composite composite32 = new comparators.Composite(objList29);
        byte[] byteArray33 = compositeListSerializer1.toBytes(objList29);
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.util.RandomAccess[] randomAccessArray44 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray45 = composite43.toArray(randomAccessArray44);
        comparators.Composite composite47 = composite43.addLong((long) 67);
        byte[] byteArray48 = composite47.serialize();
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray48);
        java.nio.ByteBuffer byteBuffer50 = compositeListSerializer1.toByteBuffer(objList49);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        java.util.List<java.lang.Object> objList57 = comparators.Composite.deserialize(byteArray55);
        byte[] byteArray58 = comparators.Composite.serialize(objList57);
        java.util.stream.Stream<java.lang.Object> objStream59 = objList57.parallelStream();
        comparators.Composite composite60 = new comparators.Composite(objList57);
        java.lang.Object[] objArray61 = composite60.toArray();
        int int62 = composite60.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream63 = composite60.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream64 = composite60.parallelStream();
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        java.util.List<java.lang.Object> objList71 = comparators.Composite.deserialize(byteArray69);
        byte[] byteArray72 = comparators.Composite.serialize(objList71);
        java.util.stream.Stream<java.lang.Object> objStream73 = objList71.parallelStream();
        comparators.Composite composite74 = new comparators.Composite(objList71);
        java.lang.Object[] objArray75 = composite74.toArray();
        int int76 = composite74.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream77 = composite74.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream78 = composite74.parallelStream();
        int int79 = composite74.startOffset;
        int int80 = composite60.compareTo(composite74);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray85 = new byte[] {};
        int int86 = comparators.Composite.compare(byteArray84, byteArray85);
        comparators.Composite composite87 = composite60.addBytes(byteArray85);
        java.nio.ByteBuffer byteBuffer88 = composite87.serializeToByteBuffer();
        java.util.List<java.lang.Object> objList89 = comparators.Composite.deserialize(byteBuffer88);
        byte[] byteArray90 = compositeListSerializer1.toBytes(objList89);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList91 = comparators.Composite.deserialize((int) (short) 10, byteArray90);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType2);
        org.junit.Assert.assertNotNull(byteBufferArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(indexInfoComparator7);
        org.junit.Assert.assertNotNull(compositeType8);
        org.junit.Assert.assertNotNull(byteBufferArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteBufferComparator13);
        org.junit.Assert.assertNotNull(compositeType14);
        org.junit.Assert.assertNotNull(byteBufferArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(objListList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 13 + "'", int22 == 13);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(objList29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(randomAccessArray44);
        org.junit.Assert.assertNotNull(randomAccessArray45);
        org.junit.Assert.assertNotNull(composite47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(objList57);
        org.junit.Assert.assertNull(byteArray58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(objList71);
        org.junit.Assert.assertNull(byteArray72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(composite87);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertNotNull(objList89);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[67, 77, 80, 1, 9, 0, 0, 0]");
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        int int16 = composite9.startOffset;
        java.util.UUID uUID17 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite18 = composite9.addTimeUUID(uUID17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite12 = new comparators.Composite((java.lang.Object[]) randomAccessArray11);
        java.lang.Object obj13 = null;
        boolean boolean14 = composite12.equals(obj13);
        comparators.Composite composite16 = composite12.addLong(10L);
        java.util.UUID uUID17 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite18 = composite12.addLexicalUUID(uUID17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(composite16);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        comparators.Composite composite0 = null;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        boolean boolean19 = comparators.Composite.validate((int) ' ', byteArray16, true);
        boolean boolean20 = composite10.contains((java.lang.Object) boolean19);
        java.util.Spliterator<java.lang.Object> objSpliterator21 = composite10.spliterator();
        byte[] byteArray22 = composite10.bytes;
        comparators.hector.CompositeListSerializer compositeListSerializer23 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        byte[] byteArray34 = compositeListSerializer23.toBytes(objList30);
        comparators.CompositeType compositeType35 = new comparators.CompositeType();
        comparators.CompositeType compositeType36 = comparators.CompositeType.instance;
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray41 = new byte[] {};
        int int42 = comparators.Composite.compare(byteArray40, byteArray41);
        java.util.List<java.lang.Object> objList43 = comparators.Composite.deserialize(byteArray41);
        byte[] byteArray44 = comparators.Composite.serialize(objList43);
        java.util.stream.Stream<java.lang.Object> objStream45 = objList43.parallelStream();
        comparators.Composite composite46 = new comparators.Composite(objList43);
        java.lang.Object[] objArray47 = composite46.toArray();
        int int48 = composite46.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream49 = composite46.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream50 = composite46.parallelStream();
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        java.util.List<java.lang.Object> objList57 = comparators.Composite.deserialize(byteArray55);
        byte[] byteArray58 = comparators.Composite.serialize(objList57);
        java.util.stream.Stream<java.lang.Object> objStream59 = objList57.parallelStream();
        comparators.Composite composite60 = new comparators.Composite(objList57);
        java.lang.Object[] objArray61 = composite60.toArray();
        int int62 = composite60.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream63 = composite60.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream64 = composite60.parallelStream();
        int int65 = composite60.startOffset;
        int int66 = composite46.compareTo(composite60);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray71 = new byte[] {};
        int int72 = comparators.Composite.compare(byteArray70, byteArray71);
        comparators.Composite composite73 = composite46.addBytes(byteArray71);
        java.nio.ByteBuffer byteBuffer74 = composite73.serializeToByteBuffer();
        compositeType36.validate(byteBuffer74);
        boolean boolean76 = comparators.Composite.validate(byteBuffer74);
        comparators.Composite composite77 = new comparators.Composite(byteBuffer74);
        java.nio.ByteBuffer byteBuffer78 = null;
        int int79 = compositeType35.compare(byteBuffer74, byteBuffer78);
        comparators.Composite composite80 = new comparators.Composite(byteBuffer74);
        java.util.List<java.lang.Object> objList81 = compositeListSerializer23.fromByteBuffer(byteBuffer74);
        boolean boolean82 = composite10.containsAll((java.util.Collection<java.lang.Object>) objList81);
        // The following exception was thrown during execution in test generation
        try {
            int int83 = comparators.Composite.compare(composite0, composite10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objSpliterator21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(compositeType36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(objList43);
        org.junit.Assert.assertNull(byteArray44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(objList57);
        org.junit.Assert.assertNull(byteArray58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(composite73);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(objList81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        int int81 = compositeTypeIterator80.start;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj82 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 67 + "'", int81 == 67);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        int int1 = placeholder0.type;
        placeholder0.type = 6;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        java.lang.String str5 = placeholder0.toString();
        org.junit.Assert.assertNotNull(placeholder0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 32 + "'", int1 == 32);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Placeholder(6)" + "'", str5, "Placeholder(6)");
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        boolean boolean15 = composite9.isEmpty();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        int int26 = composite25.size();
        boolean boolean27 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        java.io.ByteArrayOutputStream byteArrayOutputStream28 = composite9.byteStream;
        java.io.DataOutputStream dataOutputStream29 = composite9.out;
        composite9.clear();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(byteArrayOutputStream28);
        org.junit.Assert.assertNull(dataOutputStream29);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(4);
        comparators.CompositeType compositeType22 = comparators.CompositeType.instance;
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        java.util.List<java.lang.Object> objList29 = comparators.Composite.deserialize(byteArray27);
        byte[] byteArray30 = comparators.Composite.serialize(objList29);
        java.util.stream.Stream<java.lang.Object> objStream31 = objList29.parallelStream();
        comparators.Composite composite32 = new comparators.Composite(objList29);
        java.lang.Object[] objArray33 = composite32.toArray();
        int int34 = composite32.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream35 = composite32.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream36 = composite32.parallelStream();
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray41 = new byte[] {};
        int int42 = comparators.Composite.compare(byteArray40, byteArray41);
        java.util.List<java.lang.Object> objList43 = comparators.Composite.deserialize(byteArray41);
        byte[] byteArray44 = comparators.Composite.serialize(objList43);
        java.util.stream.Stream<java.lang.Object> objStream45 = objList43.parallelStream();
        comparators.Composite composite46 = new comparators.Composite(objList43);
        java.lang.Object[] objArray47 = composite46.toArray();
        int int48 = composite46.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream49 = composite46.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream50 = composite46.parallelStream();
        int int51 = composite46.startOffset;
        int int52 = composite32.compareTo(composite46);
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        comparators.Composite composite59 = composite32.addBytes(byteArray57);
        java.nio.ByteBuffer byteBuffer60 = composite59.serializeToByteBuffer();
        compositeType22.validate(byteBuffer60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteBuffer60);
        java.util.List<java.lang.Object> objList63 = comparators.Composite.deserialize(byteBuffer60);
        java.util.List<java.lang.Object> objList64 = compositeListSerializer0.fromByteBuffer(byteBuffer60);
        int int66 = compositeListSerializer0.computeInitialHashSize((int) '4');
        java.util.List<java.util.List<java.lang.Object>> objListList67 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.nio.ByteBuffer> byteBufferList68 = compositeListSerializer0.toBytesList(objListList67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(compositeType22);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(objList29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(objList43);
        org.junit.Assert.assertNull(byteArray44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(composite59);
        org.junit.Assert.assertNotNull(byteBuffer60);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNotNull(objList63);
        org.junit.Assert.assertNotNull(objList64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 70 + "'", int66 == 70);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        java.lang.Object[] objArray13 = composite9.toArray();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        int int26 = comparators.Composite.compare(byteArray17, byteArray24);
        composite9.bytes = byteArray24;
        byte[] byteArray28 = composite9.serialize();
        java.util.List<java.lang.Object> objList29 = comparators.Composite.deserialize(byteArray28);
        comparators.Composite composite30 = new comparators.Composite(objList29);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(objList29);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        boolean boolean39 = composite9.contains((java.lang.Object) (-1));
        int int40 = composite9.size();
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray45 = new byte[] {};
        int int46 = comparators.Composite.compare(byteArray44, byteArray45);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray45);
        byte[] byteArray48 = comparators.Composite.serialize(objList47);
        java.util.stream.Stream<java.lang.Object> objStream49 = objList47.parallelStream();
        comparators.Composite composite50 = new comparators.Composite(objList47);
        java.lang.Object[] objArray51 = composite50.toArray();
        int int52 = composite50.startOffset;
        int int53 = composite50.startOffset;
        java.lang.Object[] objArray54 = composite50.toArray();
        comparators.Composite composite56 = composite50.addAscii("");
        int int57 = composite56.size();
        comparators.Composite composite58 = composite56.addMatchMaximum();
        int int59 = composite9.compareTo(composite56);
        int int60 = composite56.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream61 = composite56.byteStream;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNull(byteArray48);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertNotNull(composite56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(composite58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(byteArrayOutputStream61);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        comparators.CompositeType compositeType10 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray11 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList12 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12, byteBufferArray11);
        java.lang.String str14 = compositeType10.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12);
        org.apache.cassandra.db.IColumn[] iColumnArray15 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList16 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16, iColumnArray15);
        java.lang.String str18 = compositeType10.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        java.lang.String str19 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        comparators.hector.CompositeListSerializer compositeListSerializer20 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType21 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray22 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList23 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23, byteBufferArray22);
        java.lang.String str25 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator26 = compositeType21.indexComparator;
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray28 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList29 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29, byteBufferArray28);
        java.lang.String str31 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator32 = compositeType21.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType27);
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.lang.String str38 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.List<java.util.List<java.lang.Object>> objListList39 = compositeListSerializer20.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList35);
        java.lang.String str40 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator41 = compositeType0.indexComparator;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer43 = compositeType0.fromString("Placeholder(32)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(compositeType10);
        org.junit.Assert.assertNotNull(byteBufferArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(iColumnArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(compositeType21);
        org.junit.Assert.assertNotNull(byteBufferArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(indexInfoComparator26);
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteBufferArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteBufferComparator32);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(objListList39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(indexInfoComparator41);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        byte[] byteArray20 = comparators.Composite.serialize(objList18);
        byte[] byteArray21 = compositeListSerializer0.toBytes(objList18);
        byte[] byteArray22 = null;
        java.util.List<java.lang.Object> objList23 = compositeListSerializer0.fromBytes(byteArray22);
        int int25 = compositeListSerializer0.computeInitialHashSize(77);
        byte[] byteArray26 = null;
        java.util.List<java.lang.Object> objList27 = compositeListSerializer0.fromBytes(byteArray26);
        comparators.hector.CompositeListSerializer compositeListSerializer28 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        byte[] byteArray39 = compositeListSerializer28.toBytes(objList35);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        byte[] byteArray48 = comparators.Composite.serialize(objList46);
        byte[] byteArray49 = compositeListSerializer28.toBytes(objList46);
        byte[] byteArray50 = compositeListSerializer0.toBytes(objList46);
        byte[] byteArray52 = null;
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray58 = new byte[] {};
        int int59 = comparators.Composite.compare(byteArray57, byteArray58);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        int int66 = comparators.Composite.compare(byteArray57, byteArray64);
        int int67 = comparators.Composite.compare((int) (byte) 1, byteArray52, 10, byteArray57);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray72 = new byte[] {};
        int int73 = comparators.Composite.compare(byteArray71, byteArray72);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray78 = new byte[] {};
        int int79 = comparators.Composite.compare(byteArray77, byteArray78);
        int int80 = comparators.Composite.compare(byteArray71, byteArray78);
        java.util.List<java.lang.Object> objList81 = comparators.Composite.deserialize(byteArray78);
        int int82 = comparators.Composite.compare(byteArray57, byteArray78);
        java.util.List<java.lang.Object> objList83 = comparators.Composite.deserialize(byteArray78);
        byte[] byteArray84 = compositeListSerializer0.toBytes(objList83);
        int int86 = compositeListSerializer0.computeInitialHashSize((-1));
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 103 + "'", int25 == 103);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNull(byteArray48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(objList81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(objList83);
        org.junit.Assert.assertNull(byteArray84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        boolean boolean39 = composite9.contains((java.lang.Object) (-1));
        int int40 = composite9.size();
        java.util.Spliterator<java.lang.Object> objSpliterator41 = composite9.spliterator();
        java.io.ByteArrayOutputStream byteArrayOutputStream42 = composite9.byteStream;
        comparators.Composite composite44 = composite9.addLong((long) (short) 100);
        byte[] byteArray45 = composite9.bytes;
        comparators.hector.CompositeSerializer compositeSerializer46 = new comparators.hector.CompositeSerializer();
        byte[] byteArray50 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray51 = new byte[] {};
        int int52 = comparators.Composite.compare(byteArray50, byteArray51);
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        int int59 = comparators.Composite.compare(byteArray50, byteArray57);
        java.util.List<java.lang.Object> objList60 = comparators.Composite.deserialize(byteArray57);
        comparators.Composite composite61 = compositeSerializer46.fromBytes(byteArray57);
        java.util.Iterator<java.lang.Object> objItor62 = composite61.iterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean63 = composite9.remove((java.lang.Object) composite61);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objSpliterator41);
        org.junit.Assert.assertNull(byteArrayOutputStream42);
        org.junit.Assert.assertNotNull(composite44);
        org.junit.Assert.assertNull(byteArray45);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(objList60);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertNotNull(objItor62);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        boolean boolean6 = comparators.Composite.isValidType((java.lang.Object) compositeType0);
        comparators.CompositeType compositeType7 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator8 = compositeType7.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator10 = byteBufferComparator9.reversed();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(indexInfoComparator8);
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(byteBufferComparator10);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        comparators.hector.CompositeListSerializer compositeListSerializer15 = new comparators.hector.CompositeListSerializer();
        boolean boolean16 = composite9.contains((java.lang.Object) compositeListSerializer15);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        comparators.Composite composite32 = composite26.addBool(true);
        java.util.Iterator<java.lang.Object> objItor33 = composite26.iterator();
        comparators.Composite composite34 = new comparators.Composite();
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.lang.Object[] objArray45 = composite44.toArray();
        int int46 = composite44.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream47 = composite44.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream48 = composite44.parallelStream();
        int int49 = composite34.compareTo(composite44);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray65 = new byte[] {};
        int int66 = comparators.Composite.compare(byteArray64, byteArray65);
        boolean boolean68 = comparators.Composite.validate((int) ' ', byteArray65, true);
        boolean boolean69 = composite59.contains((java.lang.Object) boolean68);
        java.util.stream.Stream<java.lang.Object> objStream70 = composite59.parallelStream();
        boolean boolean71 = composite34.contains((java.lang.Object) composite59);
        boolean boolean72 = composite26.addAll((java.util.Collection<java.lang.Object>) composite34);
        int int73 = comparators.Composite.compare(composite9, composite26);
        boolean boolean74 = composite9.isEmpty();
        java.util.UUID uUID75 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite76 = composite9.addLexicalUUID(uUID75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(composite32);
        org.junit.Assert.assertNotNull(objItor33);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray19 = composite10.serialize();
        boolean boolean20 = comparators.Composite.isValidType((java.lang.Object) composite10);
        byte[] byteArray21 = composite10.bytes;
        java.util.Collection<java.lang.Object> objCollection22 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = composite10.containsAll(objCollection22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[67, 77, 80, 1, 2, 1, 0]");
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        comparators.Composite composite0 = new comparators.Composite();
        java.lang.Object[] objArray1 = composite0.toArray();
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream14 = null;
        composite11.byteStream = byteArrayOutputStream14;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        comparators.Composite composite31 = composite25.addBool(true);
        java.util.Iterator<java.lang.Object> objItor32 = composite25.iterator();
        int int33 = composite11.compareTo(composite25);
        java.lang.Object[][][] objArray34 = new java.lang.Object[][][] {};
        java.lang.Object[][][] objArray35 = composite11.toArray(objArray34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite11.spliterator();
        int int37 = composite0.compareTo(composite11);
        comparators.Composite composite38 = new comparators.Composite();
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        java.lang.Object[] objArray49 = composite48.toArray();
        int int50 = composite48.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream51 = composite48.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream52 = composite48.parallelStream();
        int int53 = composite38.compareTo(composite48);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray58 = new byte[] {};
        int int59 = comparators.Composite.compare(byteArray57, byteArray58);
        java.util.List<java.lang.Object> objList60 = comparators.Composite.deserialize(byteArray58);
        byte[] byteArray61 = comparators.Composite.serialize(objList60);
        java.util.stream.Stream<java.lang.Object> objStream62 = objList60.parallelStream();
        comparators.Composite composite63 = new comparators.Composite(objList60);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        boolean boolean72 = comparators.Composite.validate((int) ' ', byteArray69, true);
        boolean boolean73 = composite63.contains((java.lang.Object) boolean72);
        java.util.Spliterator<java.lang.Object> objSpliterator74 = composite63.spliterator();
        composite63.startOffset = 1;
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray81 = new byte[] {};
        int int82 = comparators.Composite.compare(byteArray80, byteArray81);
        java.util.List<java.lang.Object> objList83 = comparators.Composite.deserialize(byteArray81);
        byte[] byteArray84 = comparators.Composite.serialize(objList83);
        java.util.stream.Stream<java.lang.Object> objStream85 = objList83.parallelStream();
        comparators.Composite composite86 = new comparators.Composite(objList83);
        java.lang.Object[] objArray87 = composite86.toArray();
        int int88 = composite86.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream89 = composite86.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream90 = composite86.parallelStream();
        comparators.Composite composite92 = composite86.addBool(true);
        java.io.DataOutputStream dataOutputStream93 = composite86.out;
        composite63.out = dataOutputStream93;
        composite38.out = dataOutputStream93;
        composite11.out = dataOutputStream93;
        java.lang.Class<?> wildcardClass97 = dataOutputStream93.getClass();
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(objItor32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(objList60);
        org.junit.Assert.assertNull(byteArray61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objSpliterator74);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(objList83);
        org.junit.Assert.assertNull(byteArray84);
        org.junit.Assert.assertNotNull(objStream85);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(objStream89);
        org.junit.Assert.assertNotNull(objStream90);
        org.junit.Assert.assertNotNull(composite92);
        org.junit.Assert.assertNotNull(dataOutputStream93);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        comparators.CompositeType compositeType11 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray12 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList13 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13, byteBufferArray12);
        java.lang.String str15 = compositeType11.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator16 = compositeType11.indexComparator;
        comparators.CompositeType compositeType17 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray18 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList19 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19, byteBufferArray18);
        java.lang.String str21 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType11.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType17);
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.lang.String str28 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator34 = compositeType29.indexComparator;
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator40 = compositeType29.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType35);
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray42 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList43 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43, byteBufferArray42);
        java.lang.String str45 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.lang.String str46 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.util.AbstractList[] abstractListArray48 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray49 = (java.util.AbstractList<java.nio.ByteBuffer>[]) abstractListArray48;
        byteBufferListArray49[0] = byteBufferList25;
        byteBufferListArray49[1] = byteBufferList43;
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray54 = composite9.toArray(byteBufferListArray49);
        java.util.stream.Stream<java.lang.Object> objStream55 = composite9.parallelStream();
        byte[] byteArray57 = null;
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        int int71 = comparators.Composite.compare(byteArray62, byteArray69);
        int int72 = comparators.Composite.compare((int) (byte) 1, byteArray57, 10, byteArray62);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        byte[] byteArray82 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray83 = new byte[] {};
        int int84 = comparators.Composite.compare(byteArray82, byteArray83);
        int int85 = comparators.Composite.compare(byteArray76, byteArray83);
        java.util.List<java.lang.Object> objList86 = comparators.Composite.deserialize(byteArray83);
        int int87 = comparators.Composite.compare(byteArray62, byteArray83);
        composite9.bytes = byteArray83;
        byte[] byteArray89 = composite9.bytes;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(compositeType11);
        org.junit.Assert.assertNotNull(byteBufferArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(indexInfoComparator16);
        org.junit.Assert.assertNotNull(compositeType17);
        org.junit.Assert.assertNotNull(byteBufferArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(indexInfoComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteBufferComparator40);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteBufferArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(abstractListArray48);
        org.junit.Assert.assertNotNull(byteBufferListArray49);
        org.junit.Assert.assertNotNull(byteBufferListArray54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(objList86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        int int1 = placeholder0.type;
        placeholder0.type = 6;
        java.lang.String str4 = placeholder0.toString();
        placeholder0.type = 77;
        int int7 = placeholder0.type;
        org.junit.Assert.assertNotNull(placeholder0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Placeholder(6)" + "'", str4, "Placeholder(6)");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 77 + "'", int7 == 77);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        java.util.List<java.nio.ByteBuffer> byteBufferList19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<comparators.Composite> compositeList20 = compositeSerializer0.fromBytesList(byteBufferList19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        boolean boolean32 = composite9.isEmpty();
        int int33 = composite9.startOffset;
        boolean boolean34 = composite9.isEmpty();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        byte[] byteArray21 = composite9.bytes;
        int int22 = composite9.size();
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        java.util.List<java.lang.Object> objList37 = comparators.Composite.deserialize(byteArray35);
        byte[] byteArray38 = comparators.Composite.serialize(objList37);
        java.util.stream.Stream<java.lang.Object> objStream39 = objList37.parallelStream();
        comparators.Composite composite40 = new comparators.Composite(objList37);
        java.util.RandomAccess[] randomAccessArray41 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray42 = composite40.toArray(randomAccessArray41);
        comparators.Composite composite44 = composite40.addLong((long) 67);
        byte[] byteArray45 = composite44.serialize();
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray45);
        int int47 = comparators.Composite.compare(byteArray28, byteArray45);
        comparators.hector.CompositeSerializer compositeSerializer48 = new comparators.hector.CompositeSerializer();
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteArray53);
        byte[] byteArray56 = comparators.Composite.serialize(objList55);
        java.util.stream.Stream<java.lang.Object> objStream57 = objList55.parallelStream();
        comparators.Composite composite58 = new comparators.Composite(objList55);
        java.lang.Object[] objArray59 = composite58.toArray();
        int int60 = composite58.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream61 = composite58.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream62 = composite58.parallelStream();
        comparators.Composite composite64 = composite58.addBool(true);
        java.io.DataOutputStream dataOutputStream65 = composite58.out;
        byte[] byteArray66 = compositeSerializer48.toBytes(composite58);
        int int67 = comparators.Composite.compare(byteArray45, byteArray66);
        boolean boolean68 = comparators.Composite.validate(1, byteArray66);
        java.util.List<java.lang.Object> objList69 = comparators.Composite.deserialize(byteArray66);
        byte[] byteArray70 = comparators.Composite.serialize(objList69);
        boolean boolean71 = composite9.add((java.lang.Object) objList69);
        comparators.Composite composite73 = composite9.addLong((long) (short) 10);
        java.io.ByteArrayOutputStream byteArrayOutputStream74 = composite73.byteStream;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(objList37);
        org.junit.Assert.assertNull(byteArray38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(randomAccessArray41);
        org.junit.Assert.assertNotNull(randomAccessArray42);
        org.junit.Assert.assertNotNull(composite44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(composite64);
        org.junit.Assert.assertNotNull(dataOutputStream65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(objList69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(composite73);
        org.junit.Assert.assertNotNull(byteArrayOutputStream74);
// flaky:         org.junit.Assert.assertEquals(byteArrayOutputStream74.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\n\000");
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(9);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        byte[] byteArray30 = compositeListSerializer0.toBytes(objList28);
        comparators.hector.CompositeListSerializer compositeListSerializer31 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType32 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray33 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList34 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34, byteBufferArray33);
        java.lang.String str36 = compositeType32.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator37 = compositeType32.indexComparator;
        comparators.CompositeType compositeType38 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray39 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList40 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList40, byteBufferArray39);
        java.lang.String str42 = compositeType38.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList40);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator43 = compositeType32.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType38);
        comparators.CompositeType compositeType44 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray45 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList46 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList46, byteBufferArray45);
        java.lang.String str48 = compositeType44.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList46);
        java.lang.String str49 = compositeType38.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList46);
        java.util.List<java.util.List<java.lang.Object>> objListList50 = compositeListSerializer31.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList46);
        int int52 = compositeListSerializer31.computeInitialHashSize(9);
        comparators.hector.CompositeListSerializer compositeListSerializer53 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray58 = new byte[] {};
        int int59 = comparators.Composite.compare(byteArray57, byteArray58);
        java.util.List<java.lang.Object> objList60 = comparators.Composite.deserialize(byteArray58);
        byte[] byteArray61 = comparators.Composite.serialize(objList60);
        java.util.stream.Stream<java.lang.Object> objStream62 = objList60.parallelStream();
        comparators.Composite composite63 = new comparators.Composite(objList60);
        byte[] byteArray64 = compositeListSerializer53.toBytes(objList60);
        int int66 = compositeListSerializer53.computeInitialHashSize((int) ' ');
        comparators.hector.CompositeListSerializer compositeListSerializer67 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType68 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray69 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList70 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList70, byteBufferArray69);
        java.lang.String str72 = compositeType68.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList70);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator73 = compositeType68.indexComparator;
        comparators.CompositeType compositeType74 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray75 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList76 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList76, byteBufferArray75);
        java.lang.String str78 = compositeType74.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList76);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator79 = compositeType68.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType74);
        comparators.CompositeType compositeType80 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray81 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList82 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList82, byteBufferArray81);
        java.lang.String str84 = compositeType80.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList82);
        java.lang.String str85 = compositeType74.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList82);
        java.util.List<java.util.List<java.lang.Object>> objListList86 = compositeListSerializer67.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList82);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet87 = compositeListSerializer53.toBytesSet(objListList86);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet88 = compositeListSerializer31.toBytesSet(objListList86);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet89 = compositeListSerializer0.toBytesSet(objListList86);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNotNull(compositeType32);
        org.junit.Assert.assertNotNull(byteBufferArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(indexInfoComparator37);
        org.junit.Assert.assertNotNull(compositeType38);
        org.junit.Assert.assertNotNull(byteBufferArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteBufferComparator43);
        org.junit.Assert.assertNotNull(compositeType44);
        org.junit.Assert.assertNotNull(byteBufferArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(objListList50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 13 + "'", int52 == 13);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(objList60);
        org.junit.Assert.assertNull(byteArray61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNull(byteArray64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 43 + "'", int66 == 43);
        org.junit.Assert.assertNotNull(compositeType68);
        org.junit.Assert.assertNotNull(byteBufferArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(indexInfoComparator73);
        org.junit.Assert.assertNotNull(compositeType74);
        org.junit.Assert.assertNotNull(byteBufferArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteBufferComparator79);
        org.junit.Assert.assertNotNull(compositeType80);
        org.junit.Assert.assertNotNull(byteBufferArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(objListList86);
        org.junit.Assert.assertNotNull(byteBufferSet87);
        org.junit.Assert.assertNotNull(byteBufferSet88);
        org.junit.Assert.assertNotNull(byteBufferSet89);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray38 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray39 = composite9.toArray(compositeListSerializerArray38);
        comparators.Composite composite41 = composite9.addLong((long) (short) 100);
        byte[] byteArray42 = composite9.serialize();
        comparators.Composite composite43 = new comparators.Composite();
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        java.util.List<java.lang.Object> objList50 = comparators.Composite.deserialize(byteArray48);
        byte[] byteArray51 = comparators.Composite.serialize(objList50);
        java.util.stream.Stream<java.lang.Object> objStream52 = objList50.parallelStream();
        comparators.Composite composite53 = new comparators.Composite(objList50);
        java.lang.Object[] objArray54 = composite53.toArray();
        int int55 = composite53.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream56 = composite53.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream57 = composite53.parallelStream();
        int int58 = composite43.compareTo(composite53);
        comparators.hector.CompositeListSerializer compositeListSerializer59 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType60 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray61 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList62 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList62, byteBufferArray61);
        java.lang.String str64 = compositeType60.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList62);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator65 = compositeType60.indexComparator;
        comparators.CompositeType compositeType66 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray67 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList68 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList68, byteBufferArray67);
        java.lang.String str70 = compositeType66.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList68);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator71 = compositeType60.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType66);
        comparators.CompositeType compositeType72 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray73 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList74 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList74, byteBufferArray73);
        java.lang.String str76 = compositeType72.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList74);
        java.lang.String str77 = compositeType66.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList74);
        java.util.List<java.util.List<java.lang.Object>> objListList78 = compositeListSerializer59.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList74);
        comparators.CompositeType compositeType79 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator80 = compositeType79.indexComparator;
        comparators.CompositeType compositeType81 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator82 = compositeType79.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType81);
        java.lang.Object[] objArray83 = new java.lang.Object[] { compositeListSerializer59, compositeType81 };
        java.lang.Object[][] objArray84 = new java.lang.Object[][] { objArray83 };
        java.lang.Object[][] objArray85 = composite43.toArray(objArray84);
        byte[] byteArray86 = comparators.Composite.serialize((java.lang.Object[]) objArray85);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean87 = composite9.remove((java.lang.Object) objArray85);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray38);
        org.junit.Assert.assertNotNull(compositeListSerializerArray39);
        org.junit.Assert.assertNotNull(composite41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 100, 0]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(objList50);
        org.junit.Assert.assertNull(byteArray51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(compositeType60);
        org.junit.Assert.assertNotNull(byteBufferArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(indexInfoComparator65);
        org.junit.Assert.assertNotNull(compositeType66);
        org.junit.Assert.assertNotNull(byteBufferArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(byteBufferComparator71);
        org.junit.Assert.assertNotNull(compositeType72);
        org.junit.Assert.assertNotNull(byteBufferArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(objListList78);
        org.junit.Assert.assertNotNull(indexInfoComparator80);
        org.junit.Assert.assertNotNull(compositeType81);
        org.junit.Assert.assertNotNull(byteBufferComparator82);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertNull(byteArray86);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.util.RandomAccess[] randomAccessArray11 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray12 = composite10.toArray(randomAccessArray11);
        comparators.Composite composite14 = composite10.addLong((long) 67);
        byte[] byteArray15 = composite14.serialize();
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray15);
        comparators.Composite composite17 = new comparators.Composite(byteArray15);
        comparators.Composite composite18 = compositeSerializer0.fromBytes(byteArray15);
        composite18.clear();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(randomAccessArray12);
        org.junit.Assert.assertNotNull(composite14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNotNull(composite18);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        boolean boolean6 = comparators.Composite.isValidType((java.lang.Object) compositeType0);
        org.apache.cassandra.db.IColumn[] iColumnArray7 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList8 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList8, iColumnArray7);
        java.lang.String str10 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList8);
        comparators.CompositeType compositeType11 = new comparators.CompositeType();
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType12.validate(byteBuffer50);
        boolean boolean52 = comparators.Composite.validate(byteBuffer50);
        comparators.Composite composite53 = new comparators.Composite(byteBuffer50);
        java.nio.ByteBuffer byteBuffer54 = null;
        int int55 = compositeType11.compare(byteBuffer50, byteBuffer54);
        comparators.Composite composite56 = new comparators.Composite(byteBuffer50);
        comparators.Composite composite57 = new comparators.Composite(byteBuffer50);
        java.lang.String str58 = compositeType0.getString(byteBuffer50);
        boolean boolean59 = comparators.Composite.validate(byteBuffer50);
        boolean boolean60 = comparators.Composite.validate(byteBuffer50);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(iColumnArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        java.io.DataOutputStream dataOutputStream15 = null;
        composite9.out = dataOutputStream15;
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        comparators.Composite composite32 = composite26.addBool(true);
        java.io.DataOutputStream dataOutputStream33 = composite26.out;
        composite9.out = dataOutputStream33;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(composite32);
        org.junit.Assert.assertNotNull(dataOutputStream33);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray8 = new byte[] {};
        int int9 = comparators.Composite.compare(byteArray7, byteArray8);
        boolean boolean11 = comparators.Composite.validate((int) ' ', byteArray8, true);
        boolean boolean12 = comparators.Composite.validate(100, byteArray8);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.util.RandomAccess[] randomAccessArray30 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray31 = composite29.toArray(randomAccessArray30);
        comparators.Composite composite33 = composite29.addLong((long) 67);
        byte[] byteArray34 = composite33.serialize();
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray34);
        int int36 = comparators.Composite.compare(byteArray17, byteArray34);
        int int37 = comparators.Composite.compare(byteArray8, byteArray34);
        boolean boolean38 = comparators.Composite.validate(255, byteArray34);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList46.parallelStream();
        comparators.Composite composite49 = new comparators.Composite(objList46);
        java.util.RandomAccess[] randomAccessArray50 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray51 = composite49.toArray(randomAccessArray50);
        comparators.Composite composite53 = composite49.addLong((long) 67);
        byte[] byteArray54 = composite53.serialize();
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteArray54);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = comparators.Composite.compare(5, byteArray34, 5, byteArray54);
            org.junit.Assert.fail("Expected exception of type org.apache.cassandra.db.marshal.MarshalException; message: Not a composite type (ID byte 0 incorrect)");
        } catch (org.apache.cassandra.db.marshal.MarshalException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(randomAccessArray30);
        org.junit.Assert.assertNotNull(randomAccessArray31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(randomAccessArray50);
        org.junit.Assert.assertNotNull(randomAccessArray51);
        org.junit.Assert.assertNotNull(composite53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList55);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.len = 58;
        byte[] byteArray88 = compositeTypeIterator80.bytes;
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        int int13 = composite10.startOffset;
        byte[] byteArray14 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        comparators.Composite composite30 = composite24.addBool(true);
        java.util.Iterator<java.lang.Object> objItor31 = composite24.iterator();
        comparators.Composite composite33 = composite24.addReal((java.lang.Double) 100.0d);
        comparators.Composite composite35 = composite33.addLong((long) '#');
        byte[] byteArray36 = compositeSerializer0.toBytes(composite35);
        comparators.Composite composite38 = composite35.addReal((java.lang.Double) 1.0d);
        comparators.Composite composite40 = composite38.addUTF8("Placeholder(35)");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[67, 77, 80, 1, 2, 1, 0, 4, 64, 89, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 35, 0]");
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(composite40);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        comparators.hector.CompositeSerializer compositeSerializer30 = new comparators.hector.CompositeSerializer();
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        java.util.List<java.lang.Object> objList37 = comparators.Composite.deserialize(byteArray35);
        byte[] byteArray38 = comparators.Composite.serialize(objList37);
        java.util.stream.Stream<java.lang.Object> objStream39 = objList37.parallelStream();
        comparators.Composite composite40 = new comparators.Composite(objList37);
        java.lang.Object[] objArray41 = composite40.toArray();
        int int42 = composite40.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream43 = composite40.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream44 = composite40.parallelStream();
        comparators.Composite composite46 = composite40.addBool(true);
        java.io.DataOutputStream dataOutputStream47 = composite40.out;
        byte[] byteArray48 = compositeSerializer30.toBytes(composite40);
        byte[] byteArray51 = null;
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        int int65 = comparators.Composite.compare(byteArray56, byteArray63);
        int int66 = comparators.Composite.compare((int) (byte) 1, byteArray51, 10, byteArray56);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray71 = new byte[] {};
        int int72 = comparators.Composite.compare(byteArray70, byteArray71);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        int int79 = comparators.Composite.compare(byteArray70, byteArray77);
        java.util.List<java.lang.Object> objList80 = comparators.Composite.deserialize(byteArray77);
        int int81 = comparators.Composite.compare(byteArray56, byteArray77);
        java.util.List<java.lang.Object> objList82 = comparators.Composite.deserialize(byteArray77);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator83 = composite23.new CompositeTypeIterator(composite40, 5, byteArray77);
        java.lang.Object[] objArray84 = composite23.toArray();
        java.util.UUID uUID85 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite86 = composite23.addLexicalUUID(uUID85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(objList37);
        org.junit.Assert.assertNull(byteArray38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(composite46);
        org.junit.Assert.assertNotNull(dataOutputStream47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(objList80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(objList82);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[]");
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        comparators.Composite composite36 = composite9.addBytes(byteArray34);
        java.util.List<java.lang.Object> objList37 = comparators.Composite.deserialize(byteArray34);
        comparators.Composite composite38 = new comparators.Composite(byteArray34);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(objList37);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        byte[] byteArray12 = comparators.Composite.serialize(objList7);
        comparators.Composite composite13 = new comparators.Composite(objList7);
        boolean boolean14 = composite13.isEmpty();
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        org.apache.cassandra.db.IColumn[] iColumnArray20 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList21 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList21, iColumnArray20);
        java.lang.String str23 = compositeType15.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList21);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator24 = compositeType15.getReverseComparator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = composite13.add((java.lang.Object) byteBufferComparator24);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(iColumnArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteBufferComparator24);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (byte) -1;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray8 = new byte[] {};
        int int9 = comparators.Composite.compare(byteArray7, byteArray8);
        java.util.List<java.lang.Object> objList10 = comparators.Composite.deserialize(byteArray8);
        byte[] byteArray11 = comparators.Composite.serialize(objList10);
        java.util.stream.Stream<java.lang.Object> objStream12 = objList10.parallelStream();
        comparators.Composite composite13 = new comparators.Composite(objList10);
        java.lang.Object[] objArray14 = composite13.toArray();
        int int15 = composite13.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream16 = composite13.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream17 = composite13.parallelStream();
        int int18 = composite13.startOffset;
        int int19 = composite13.startOffset;
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        boolean boolean38 = comparators.Composite.validate((int) ' ', byteArray35, true);
        boolean boolean39 = composite29.contains((java.lang.Object) boolean38);
        java.util.Spliterator<java.lang.Object> objSpliterator40 = composite29.spliterator();
        boolean boolean41 = composite13.containsAll((java.util.Collection<java.lang.Object>) composite29);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray42 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray43 = composite13.toArray(compositeListSerializerArray42);
        boolean boolean44 = placeholder0.equals((java.lang.Object) composite13);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray49 = new byte[] {};
        int int50 = comparators.Composite.compare(byteArray48, byteArray49);
        java.util.List<java.lang.Object> objList51 = comparators.Composite.deserialize(byteArray49);
        byte[] byteArray52 = comparators.Composite.serialize(objList51);
        java.util.stream.Stream<java.lang.Object> objStream53 = objList51.parallelStream();
        comparators.Composite composite54 = new comparators.Composite(objList51);
        java.util.RandomAccess[] randomAccessArray55 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray56 = composite54.toArray(randomAccessArray55);
        comparators.Composite composite58 = composite54.addUTF8("UTF-8");
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(byteArray64);
        byte[] byteArray67 = comparators.Composite.serialize(objList66);
        java.util.stream.Stream<java.lang.Object> objStream68 = objList66.parallelStream();
        comparators.Composite composite69 = new comparators.Composite(objList66);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray75 = new byte[] {};
        int int76 = comparators.Composite.compare(byteArray74, byteArray75);
        boolean boolean78 = comparators.Composite.validate((int) ' ', byteArray75, true);
        boolean boolean79 = composite69.contains((java.lang.Object) boolean78);
        java.util.stream.Stream<java.lang.Object> objStream80 = composite69.parallelStream();
        composite69.startOffset = 8;
        comparators.Composite composite84 = composite69.addAscii("hi!");
        comparators.Composite composite86 = composite69.addLong((long) 4);
        int int87 = composite86.size();
        java.lang.Object[] objArray88 = composite86.toArray();
        byte[] byteArray89 = comparators.Composite.serialize(objArray88);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator90 = composite13.new CompositeTypeIterator(composite54, (int) (byte) 1, byteArray89);
        comparators.Composite composite92 = composite54.addBool(true);
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(objList10);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(objStream17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objSpliterator40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray42);
        org.junit.Assert.assertNotNull(compositeListSerializerArray43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(objList51);
        org.junit.Assert.assertNull(byteArray52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(randomAccessArray55);
        org.junit.Assert.assertNotNull(randomAccessArray56);
        org.junit.Assert.assertNotNull(composite58);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(objList66);
        org.junit.Assert.assertNull(byteArray67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objStream80);
        org.junit.Assert.assertNotNull(composite84);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[hi!, 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[hi!, 4]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[67, 77, 80, 1, 8, 0, 3, 104, 105, 33, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0]");
        org.junit.Assert.assertNotNull(composite92);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.offset;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.offset = 58;
        int int88 = compositeTypeIterator80.type;
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 67 + "'", int84 == 67);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator1 = compositeType0.reversed();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator2 = compositeType0.indexComparator;
        comparators.CompositeType compositeType3 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator4 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexReverseComparator;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer7 = compositeType0.fromString("67");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBufferComparator1);
        org.junit.Assert.assertNotNull(indexInfoComparator2);
        org.junit.Assert.assertNotNull(compositeType3);
        org.junit.Assert.assertNotNull(byteBufferComparator4);
        org.junit.Assert.assertNotNull(indexInfoComparator5);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MINIMUM;
        int int1 = placeholder0.type;
        placeholder0.type = (byte) 100;
        java.lang.String str4 = placeholder0.toString();
        boolean boolean5 = comparators.Composite.isValidType((java.lang.Object) str4);
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Placeholder(100)" + "'", str4, "Placeholder(100)");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator1 = compositeType0.reversed();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator2 = compositeType0.indexComparator;
        comparators.CompositeType compositeType3 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray4 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList5 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList5, byteBufferArray4);
        java.lang.String str7 = compositeType3.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList5);
        org.apache.cassandra.db.IColumn[] iColumnArray8 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList9 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList9, iColumnArray8);
        java.lang.String str11 = compositeType3.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList9);
        org.apache.cassandra.db.IColumn[] iColumnArray12 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList13 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList13, iColumnArray12);
        java.lang.String str15 = compositeType3.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList13);
        java.lang.String str16 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList13);
        java.nio.ByteBuffer byteBuffer17 = null;
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.util.RandomAccess[] randomAccessArray28 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray29 = composite27.toArray(randomAccessArray28);
        comparators.Composite composite31 = composite27.addLong((long) 67);
        java.util.logging.Logger logger32 = comparators.CompositeType.logger;
        boolean boolean33 = composite31.contains((java.lang.Object) logger32);
        java.nio.ByteBuffer byteBuffer34 = composite31.serializeToByteBuffer();
        int int35 = comparators.Composite.compare(byteBuffer17, byteBuffer34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = compositeType0.getString(byteBuffer17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBufferComparator1);
        org.junit.Assert.assertNotNull(indexInfoComparator2);
        org.junit.Assert.assertNotNull(compositeType3);
        org.junit.Assert.assertNotNull(byteBufferArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(iColumnArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(iColumnArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(randomAccessArray28);
        org.junit.Assert.assertNotNull(randomAccessArray29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(logger32);
        org.junit.Assert.assertEquals(logger32.getName(), "comparators.CompositeType");
        org.junit.Assert.assertNull("logger32.getResourceBundleName() == null", logger32.getResourceBundleName());
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        int int81 = compositeTypeIterator80.offset;
        int int82 = compositeTypeIterator80.start;
        int int83 = compositeTypeIterator80.offset;
        byte[] byteArray84 = compositeTypeIterator80.bytes;
        boolean boolean85 = compositeTypeIterator80.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 67 + "'", int81 == 67);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 67 + "'", int82 == 67);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 67 + "'", int83 == 67);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.util.RandomAccess[] randomAccessArray40 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray41 = composite39.toArray(randomAccessArray40);
        comparators.Composite composite43 = composite39.addLong((long) 67);
        byte[] byteArray44 = composite43.serialize();
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray44);
        comparators.Composite composite46 = new comparators.Composite(byteArray44);
        boolean boolean47 = composite23.equals((java.lang.Object) byteArray44);
        comparators.Composite composite48 = new comparators.Composite(byteArray44);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray44);
        comparators.Composite composite50 = new comparators.Composite(byteArray44);
        comparators.Composite.Placeholder placeholder51 = comparators.Composite.MATCH_MAXIMUM;
        placeholder51.type = (short) 1;
        java.lang.String str54 = placeholder51.toString();
        placeholder51.type = (short) 100;
        comparators.Composite.MATCH_MAXIMUM = placeholder51;
        comparators.Composite.MATCH_MAXIMUM = placeholder51;
        placeholder51.type = 0;
        comparators.Composite.Placeholder placeholder61 = comparators.Composite.MATCH_MAXIMUM;
        int int62 = placeholder61.type;
        placeholder61.type = ' ';
        int int65 = placeholder61.type;
        placeholder61.type = 6;
        comparators.Composite.Placeholder placeholder68 = comparators.Composite.MATCH_MAXIMUM;
        placeholder68.type = (short) 1;
        comparators.Composite.Placeholder placeholder71 = comparators.Composite.MATCH_MINIMUM;
        int int72 = placeholder71.type;
        placeholder71.type = (byte) 100;
        placeholder71.type = (short) 100;
        comparators.Composite.MATCH_MINIMUM = placeholder71;
        comparators.Composite.Placeholder[] placeholderArray78 = new comparators.Composite.Placeholder[] { placeholder51, placeholder61, placeholder68, placeholder71 };
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite.Placeholder[] placeholderArray79 = composite50.toArray(placeholderArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(randomAccessArray40);
        org.junit.Assert.assertNotNull(randomAccessArray41);
        org.junit.Assert.assertNotNull(composite43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNotNull(placeholder51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Placeholder(1)" + "'", str54, "Placeholder(1)");
        org.junit.Assert.assertNotNull(placeholder61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 32 + "'", int65 == 32);
        org.junit.Assert.assertNotNull(placeholder68);
        org.junit.Assert.assertNotNull(placeholder71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(placeholderArray78);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        comparators.hector.CompositeSerializer compositeSerializer12 = new comparators.hector.CompositeSerializer();
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        comparators.Composite composite28 = composite22.addBool(true);
        java.io.DataOutputStream dataOutputStream29 = composite22.out;
        byte[] byteArray30 = compositeSerializer12.toBytes(composite22);
        byte[] byteArray31 = composite22.serialize();
        boolean boolean32 = comparators.Composite.isValidType((java.lang.Object) composite22);
        byte[] byteArray33 = composite22.bytes;
        java.util.List<java.lang.Object> objList34 = compositeListSerializer0.fromBytes(byteArray33);
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.util.RandomAccess[] randomAccessArray45 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray46 = composite44.toArray(randomAccessArray45);
        comparators.Composite composite48 = composite44.addLong((long) 67);
        byte[] byteArray49 = composite48.serialize();
        java.util.List<java.lang.Object> objList50 = comparators.Composite.deserialize(byteArray49);
        comparators.Composite composite51 = new comparators.Composite(objList50);
        java.util.Spliterator<java.lang.Object> objSpliterator52 = objList50.spliterator();
        byte[] byteArray53 = compositeListSerializer0.toBytes(objList50);
        int int55 = compositeListSerializer0.computeInitialHashSize((int) '#');
        comparators.CompositeType compositeType56 = comparators.CompositeType.instance;
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        java.util.List<java.lang.Object> objList63 = comparators.Composite.deserialize(byteArray61);
        byte[] byteArray64 = comparators.Composite.serialize(objList63);
        java.util.stream.Stream<java.lang.Object> objStream65 = objList63.parallelStream();
        comparators.Composite composite66 = new comparators.Composite(objList63);
        java.lang.Object[] objArray67 = composite66.toArray();
        int int68 = composite66.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream69 = composite66.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream70 = composite66.parallelStream();
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray75 = new byte[] {};
        int int76 = comparators.Composite.compare(byteArray74, byteArray75);
        java.util.List<java.lang.Object> objList77 = comparators.Composite.deserialize(byteArray75);
        byte[] byteArray78 = comparators.Composite.serialize(objList77);
        java.util.stream.Stream<java.lang.Object> objStream79 = objList77.parallelStream();
        comparators.Composite composite80 = new comparators.Composite(objList77);
        java.lang.Object[] objArray81 = composite80.toArray();
        int int82 = composite80.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream83 = composite80.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream84 = composite80.parallelStream();
        int int85 = composite80.startOffset;
        int int86 = composite66.compareTo(composite80);
        byte[] byteArray90 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray91 = new byte[] {};
        int int92 = comparators.Composite.compare(byteArray90, byteArray91);
        comparators.Composite composite93 = composite66.addBytes(byteArray91);
        java.nio.ByteBuffer byteBuffer94 = composite93.serializeToByteBuffer();
        compositeType56.validate(byteBuffer94);
        java.util.List<java.lang.Object> objList96 = comparators.Composite.deserialize(byteBuffer94);
        java.util.List<java.lang.Object> objList97 = comparators.Composite.deserialize(byteBuffer94);
        comparators.Composite composite98 = new comparators.Composite(objList97);
        byte[] byteArray99 = compositeListSerializer0.toBytes(objList97);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(composite28);
        org.junit.Assert.assertNotNull(dataOutputStream29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(randomAccessArray45);
        org.junit.Assert.assertNotNull(randomAccessArray46);
        org.junit.Assert.assertNotNull(composite48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList50);
        org.junit.Assert.assertNotNull(objSpliterator52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 47 + "'", int55 == 47);
        org.junit.Assert.assertNotNull(compositeType56);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(objList63);
        org.junit.Assert.assertNull(byteArray64);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(objList77);
        org.junit.Assert.assertNull(byteArray78);
        org.junit.Assert.assertNotNull(objStream79);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(objStream83);
        org.junit.Assert.assertNotNull(objStream84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(composite93);
        org.junit.Assert.assertNotNull(byteBuffer94);
        org.junit.Assert.assertNotNull(objList96);
        org.junit.Assert.assertNotNull(objList97);
        org.junit.Assert.assertNotNull(byteArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray99), "[67, 77, 80, 1, 9, 0, 0, 0]");
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        compositeTypeIterator80.offset = 13;
        int int85 = compositeTypeIterator80.offset;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj86 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 13 + "'", int85 == 13);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        int int33 = composite28.startOffset;
        composite28.clear();
        boolean boolean35 = composite18.containsAll((java.util.Collection<java.lang.Object>) composite28);
        comparators.Composite composite37 = composite28.addAscii("hi!");
        comparators.hector.CompositeListSerializer compositeListSerializer38 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType39 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray40 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList41 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41, byteBufferArray40);
        java.lang.String str43 = compositeType39.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator44 = compositeType39.indexComparator;
        comparators.CompositeType compositeType45 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray46 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList47 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47, byteBufferArray46);
        java.lang.String str49 = compositeType45.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator50 = compositeType39.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType45);
        comparators.CompositeType compositeType51 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray52 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList53 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53, byteBufferArray52);
        java.lang.String str55 = compositeType51.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53);
        java.lang.String str56 = compositeType45.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53);
        java.util.List<java.util.List<java.lang.Object>> objListList57 = compositeListSerializer38.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList53);
        int int59 = compositeListSerializer38.computeInitialHashSize(9);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(byteArray64);
        byte[] byteArray67 = comparators.Composite.serialize(objList66);
        java.util.stream.Stream<java.lang.Object> objStream68 = objList66.parallelStream();
        comparators.Composite composite69 = new comparators.Composite(objList66);
        byte[] byteArray70 = compositeListSerializer38.toBytes(objList66);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray75 = new byte[] {};
        int int76 = comparators.Composite.compare(byteArray74, byteArray75);
        java.util.List<java.lang.Object> objList77 = comparators.Composite.deserialize(byteArray75);
        byte[] byteArray78 = comparators.Composite.serialize(objList77);
        java.util.stream.Stream<java.lang.Object> objStream79 = objList77.parallelStream();
        comparators.Composite composite80 = new comparators.Composite(objList77);
        java.util.RandomAccess[] randomAccessArray81 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray82 = composite80.toArray(randomAccessArray81);
        comparators.Composite composite84 = composite80.addLong((long) 67);
        byte[] byteArray85 = composite84.serialize();
        java.util.List<java.lang.Object> objList86 = comparators.Composite.deserialize(byteArray85);
        java.nio.ByteBuffer byteBuffer87 = compositeListSerializer38.toByteBuffer(objList86);
        comparators.Composite composite88 = new comparators.Composite(byteBuffer87);
        java.nio.ByteBuffer byteBuffer89 = composite88.serializeToByteBuffer();
        int int90 = composite28.compareTo(composite88);
        java.io.DataOutputStream dataOutputStream91 = composite28.out;
        comparators.Composite composite93 = composite28.addAscii("Placeholder(100)");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(compositeType39);
        org.junit.Assert.assertNotNull(byteBufferArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(indexInfoComparator44);
        org.junit.Assert.assertNotNull(compositeType45);
        org.junit.Assert.assertNotNull(byteBufferArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteBufferComparator50);
        org.junit.Assert.assertNotNull(compositeType51);
        org.junit.Assert.assertNotNull(byteBufferArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(objListList57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 13 + "'", int59 == 13);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(objList66);
        org.junit.Assert.assertNull(byteArray67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNull(byteArray70);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(objList77);
        org.junit.Assert.assertNull(byteArray78);
        org.junit.Assert.assertNotNull(objStream79);
        org.junit.Assert.assertNotNull(randomAccessArray81);
        org.junit.Assert.assertNotNull(randomAccessArray82);
        org.junit.Assert.assertNotNull(composite84);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList86);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNull(dataOutputStream91);
        org.junit.Assert.assertNotNull(composite93);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        comparators.CompositeType compositeType27 = new comparators.CompositeType();
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        int int40 = composite38.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream41 = composite38.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream42 = composite38.parallelStream();
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.lang.Object[] objArray53 = composite52.toArray();
        int int54 = composite52.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream55 = composite52.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream56 = composite52.parallelStream();
        int int57 = composite52.startOffset;
        int int58 = composite38.compareTo(composite52);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        comparators.Composite composite65 = composite38.addBytes(byteArray63);
        java.nio.ByteBuffer byteBuffer66 = composite65.serializeToByteBuffer();
        compositeType28.validate(byteBuffer66);
        boolean boolean68 = comparators.Composite.validate(byteBuffer66);
        comparators.Composite composite69 = new comparators.Composite(byteBuffer66);
        java.nio.ByteBuffer byteBuffer70 = null;
        int int71 = compositeType27.compare(byteBuffer66, byteBuffer70);
        comparators.Composite composite72 = new comparators.Composite(byteBuffer66);
        java.util.Spliterator<java.lang.Object> objSpliterator73 = composite72.spliterator();
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray86 = new byte[] {};
        int int87 = comparators.Composite.compare(byteArray85, byteArray86);
        int int88 = comparators.Composite.compare(byteArray79, byteArray86);
        boolean boolean90 = comparators.Composite.validate((int) (byte) 0, byteArray86, true);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator91 = composite26.new CompositeTypeIterator(composite72, 97, byteArray86);
        boolean boolean92 = composite72.isEmpty();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objSpliterator73);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        comparators.hector.CompositeSerializer compositeSerializer19 = new comparators.hector.CompositeSerializer();
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        comparators.Composite composite35 = composite29.addBool(true);
        java.io.DataOutputStream dataOutputStream36 = composite29.out;
        byte[] byteArray37 = compositeSerializer19.toBytes(composite29);
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        java.util.List<java.lang.Object> objList44 = comparators.Composite.deserialize(byteArray42);
        byte[] byteArray45 = comparators.Composite.serialize(objList44);
        java.util.stream.Stream<java.lang.Object> objStream46 = objList44.parallelStream();
        comparators.Composite composite47 = new comparators.Composite(objList44);
        java.lang.Object[] objArray48 = composite47.toArray();
        int int49 = composite47.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream50 = composite47.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream51 = composite47.parallelStream();
        comparators.Composite composite53 = composite47.addBool(true);
        comparators.Composite composite55 = composite53.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream56 = composite53.byteStream;
        java.nio.ByteBuffer byteBuffer57 = compositeSerializer19.toByteBuffer(composite53);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray62 = new byte[] {};
        int int63 = comparators.Composite.compare(byteArray61, byteArray62);
        java.util.List<java.lang.Object> objList64 = comparators.Composite.deserialize(byteArray62);
        byte[] byteArray65 = comparators.Composite.serialize(objList64);
        java.util.stream.Stream<java.lang.Object> objStream66 = objList64.parallelStream();
        comparators.Composite composite67 = new comparators.Composite(objList64);
        java.util.RandomAccess[] randomAccessArray68 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray69 = composite67.toArray(randomAccessArray68);
        comparators.Composite composite71 = composite67.addLong((long) 67);
        comparators.Composite composite73 = composite71.addBool(true);
        java.util.Iterator<java.lang.Object> objItor74 = composite71.iterator();
        java.nio.ByteBuffer byteBuffer75 = composite71.serializeToByteBuffer();
        java.nio.ByteBuffer byteBuffer76 = compositeSerializer19.toByteBuffer(composite71);
        byte[] byteArray77 = compositeSerializer0.toBytes(composite71);
        int int78 = composite71.size();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(dataOutputStream36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(objList44);
        org.junit.Assert.assertNull(byteArray45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(composite53);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteArrayOutputStream56);
        org.junit.Assert.assertEquals(byteArrayOutputStream56.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(objList64);
        org.junit.Assert.assertNull(byteArray65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertNotNull(randomAccessArray68);
        org.junit.Assert.assertNotNull(randomAccessArray69);
        org.junit.Assert.assertNotNull(composite71);
        org.junit.Assert.assertNotNull(composite73);
        org.junit.Assert.assertNotNull(objItor74);
        org.junit.Assert.assertNotNull(byteBuffer75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        comparators.Composite composite37 = composite10.addBytes(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = composite37.serializeToByteBuffer();
        compositeType0.validate(byteBuffer38);
        boolean boolean40 = comparators.Composite.validate(byteBuffer38);
        comparators.Composite composite41 = new comparators.Composite(byteBuffer38);
        boolean boolean42 = composite41.isEmpty();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 80;
        byte[] byteArray83 = compositeTypeIterator80.bytes;
        byte[] byteArray84 = compositeTypeIterator80.bytes;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj85 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        comparators.Composite composite38 = composite11.addBytes(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = composite38.serializeToByteBuffer();
        compositeType1.validate(byteBuffer39);
        boolean boolean41 = comparators.Composite.validate(byteBuffer39);
        comparators.Composite composite42 = new comparators.Composite(byteBuffer39);
        java.nio.ByteBuffer byteBuffer43 = null;
        int int44 = compositeType0.compare(byteBuffer39, byteBuffer43);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator45 = compositeType0.indexComparator;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer47 = compositeType0.fromString("Placeholder(8)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(indexInfoComparator45);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        comparators.CompositeType compositeType10 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray11 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList12 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12, byteBufferArray11);
        java.lang.String str14 = compositeType10.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12);
        org.apache.cassandra.db.IColumn[] iColumnArray15 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList16 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16, iColumnArray15);
        java.lang.String str18 = compositeType10.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        java.lang.String str19 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator25 = compositeType20.indexComparator;
        comparators.CompositeType compositeType26 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray27 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList28 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28, byteBufferArray27);
        java.lang.String str30 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType20.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType26);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator32 = compositeType0.thenComparing(byteBufferComparator31);
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        org.apache.cassandra.db.IColumn[] iColumnArray38 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList39 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList39, iColumnArray38);
        java.lang.String str41 = compositeType33.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList39);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator42 = compositeType33.getReverseComparator();
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray44 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList45 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45, byteBufferArray44);
        java.lang.String str47 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45);
        org.apache.cassandra.db.IColumn[] iColumnArray48 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList49 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49, iColumnArray48);
        java.lang.String str51 = compositeType43.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49);
        java.lang.String str52 = compositeType33.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49);
        java.lang.String str53 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator54 = compositeType0.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator55 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator56 = compositeType0.indexComparator;
        comparators.CompositeType compositeType57 = comparators.CompositeType.instance;
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray62 = new byte[] {};
        int int63 = comparators.Composite.compare(byteArray61, byteArray62);
        java.util.List<java.lang.Object> objList64 = comparators.Composite.deserialize(byteArray62);
        byte[] byteArray65 = comparators.Composite.serialize(objList64);
        java.util.stream.Stream<java.lang.Object> objStream66 = objList64.parallelStream();
        comparators.Composite composite67 = new comparators.Composite(objList64);
        java.lang.Object[] objArray68 = composite67.toArray();
        int int69 = composite67.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream70 = composite67.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream71 = composite67.parallelStream();
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        java.util.List<java.lang.Object> objList78 = comparators.Composite.deserialize(byteArray76);
        byte[] byteArray79 = comparators.Composite.serialize(objList78);
        java.util.stream.Stream<java.lang.Object> objStream80 = objList78.parallelStream();
        comparators.Composite composite81 = new comparators.Composite(objList78);
        java.lang.Object[] objArray82 = composite81.toArray();
        int int83 = composite81.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream84 = composite81.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream85 = composite81.parallelStream();
        int int86 = composite81.startOffset;
        int int87 = composite67.compareTo(composite81);
        byte[] byteArray91 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray92 = new byte[] {};
        int int93 = comparators.Composite.compare(byteArray91, byteArray92);
        comparators.Composite composite94 = composite67.addBytes(byteArray92);
        java.nio.ByteBuffer byteBuffer95 = composite94.serializeToByteBuffer();
        compositeType57.validate(byteBuffer95);
        boolean boolean97 = comparators.Composite.validate(byteBuffer95);
        comparators.Composite composite98 = new comparators.Composite(byteBuffer95);
        java.lang.String str99 = compositeType0.getString(byteBuffer95);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(compositeType10);
        org.junit.Assert.assertNotNull(byteBufferArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(iColumnArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexInfoComparator25);
        org.junit.Assert.assertNotNull(compositeType26);
        org.junit.Assert.assertNotNull(byteBufferArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(byteBufferComparator32);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(iColumnArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteBufferComparator42);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(byteBufferArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(iColumnArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteBufferComparator54);
        org.junit.Assert.assertNotNull(byteBufferComparator55);
        org.junit.Assert.assertNotNull(indexInfoComparator56);
        org.junit.Assert.assertNotNull(compositeType57);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(objList64);
        org.junit.Assert.assertNull(byteArray65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(objList78);
        org.junit.Assert.assertNull(byteArray79);
        org.junit.Assert.assertNotNull(objStream80);
        org.junit.Assert.assertNotNull(objArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray82), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(objStream84);
        org.junit.Assert.assertNotNull(objStream85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(composite94);
        org.junit.Assert.assertNotNull(byteBuffer95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        byte[] byteArray12 = composite9.bytes;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray14 = composite9.serialize();
        java.lang.Object[] objArray15 = composite9.toArray();
        comparators.Composite composite17 = composite9.addLong((long) 174);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(composite17);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        comparators.Composite composite17 = composite15.addLong((long) 6);
        java.io.DataOutputStream dataOutputStream18 = composite15.out;
        comparators.Composite.Placeholder placeholder19 = comparators.Composite.MATCH_MAXIMUM;
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator25 = compositeType20.indexComparator;
        comparators.CompositeType compositeType26 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray27 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList28 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28, byteBufferArray27);
        java.lang.String str30 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType20.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType26);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray36);
        byte[] byteArray39 = comparators.Composite.serialize(objList38);
        java.util.stream.Stream<java.lang.Object> objStream40 = objList38.parallelStream();
        comparators.Composite composite41 = new comparators.Composite(objList38);
        java.lang.Object[] objArray42 = composite41.toArray();
        int int43 = composite41.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream44 = composite41.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream45 = composite41.parallelStream();
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        java.util.List<java.lang.Object> objList52 = comparators.Composite.deserialize(byteArray50);
        byte[] byteArray53 = comparators.Composite.serialize(objList52);
        java.util.stream.Stream<java.lang.Object> objStream54 = objList52.parallelStream();
        comparators.Composite composite55 = new comparators.Composite(objList52);
        java.lang.Object[] objArray56 = composite55.toArray();
        int int57 = composite55.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream58 = composite55.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream59 = composite55.parallelStream();
        int int60 = composite55.startOffset;
        int int61 = composite41.compareTo(composite55);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        comparators.Composite composite68 = composite41.addBytes(byteArray66);
        java.nio.ByteBuffer byteBuffer69 = composite68.serializeToByteBuffer();
        compositeType26.validate(byteBuffer69);
        comparators.CompositeType compositeType71 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray72 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList73 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList73, byteBufferArray72);
        java.lang.String str75 = compositeType71.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList73);
        org.apache.cassandra.db.IColumn[] iColumnArray76 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList77 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList77, iColumnArray76);
        java.lang.String str79 = compositeType71.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList77);
        org.apache.cassandra.db.IColumn[] iColumnArray80 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList81 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList81, iColumnArray80);
        java.lang.String str83 = compositeType71.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList81);
        java.lang.String str84 = compositeType26.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList81);
        boolean boolean85 = placeholder19.equals((java.lang.Object) str84);
        comparators.Composite.MATCH_MAXIMUM = placeholder19;
        java.lang.String str87 = placeholder19.toString();
        comparators.Composite.MATCH_MAXIMUM = placeholder19;
        placeholder19.type = 47;
        boolean boolean91 = composite15.add((java.lang.Object) 47);
        java.util.UUID uUID92 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite93 = composite15.addLexicalUUID(uUID92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(dataOutputStream18);
        org.junit.Assert.assertNotNull(placeholder19);
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexInfoComparator25);
        org.junit.Assert.assertNotNull(compositeType26);
        org.junit.Assert.assertNotNull(byteBufferArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(objList52);
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(composite68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(compositeType71);
        org.junit.Assert.assertNotNull(byteBufferArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(iColumnArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(iColumnArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Placeholder(100)" + "'", str87, "Placeholder(100)");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.util.Iterator<java.lang.Object> objItor17 = composite10.iterator();
        comparators.Composite composite18 = new comparators.Composite();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        int int33 = composite18.compareTo(composite28);
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray49 = new byte[] {};
        int int50 = comparators.Composite.compare(byteArray48, byteArray49);
        boolean boolean52 = comparators.Composite.validate((int) ' ', byteArray49, true);
        boolean boolean53 = composite43.contains((java.lang.Object) boolean52);
        java.util.stream.Stream<java.lang.Object> objStream54 = composite43.parallelStream();
        boolean boolean55 = composite18.contains((java.lang.Object) composite43);
        boolean boolean56 = composite10.addAll((java.util.Collection<java.lang.Object>) composite18);
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        java.util.List<java.lang.Object> objList63 = comparators.Composite.deserialize(byteArray61);
        byte[] byteArray64 = comparators.Composite.serialize(objList63);
        java.util.stream.Stream<java.lang.Object> objStream65 = objList63.parallelStream();
        comparators.Composite composite66 = new comparators.Composite(objList63);
        java.lang.Object[] objArray67 = composite66.toArray();
        int int68 = composite66.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream69 = composite66.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream70 = composite66.parallelStream();
        int int71 = composite66.startOffset;
        int int72 = composite66.startOffset;
        int int73 = composite18.compareTo(composite66);
        comparators.Composite composite75 = composite18.addLong((long) 80);
        comparators.Composite composite77 = composite18.addLong((long) 6);
        byte[] byteArray78 = composite77.serialize();
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize((int) (short) 0, byteArray78);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(objItor17);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(objList63);
        org.junit.Assert.assertNull(byteArray64);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertNotNull(composite77);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 80, 3, 0, 0, 0, 0, 0, 0, 0, 6, 0]");
        org.junit.Assert.assertNotNull(objList79);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.lang.String str17 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite42.startOffset;
        int int48 = composite28.compareTo(composite42);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        comparators.Composite composite55 = composite28.addBytes(byteArray53);
        java.nio.ByteBuffer byteBuffer56 = composite55.serializeToByteBuffer();
        compositeType18.validate(byteBuffer56);
        java.lang.String str58 = compositeType6.getString(byteBuffer56);
        comparators.Composite composite59 = new comparators.Composite(byteBuffer56);
        java.util.Iterator<java.lang.Object> objItor60 = composite59.iterator();
        comparators.Composite.Placeholder placeholder61 = comparators.Composite.MATCH_MAXIMUM;
        int int62 = placeholder61.type;
        placeholder61.type = 6;
        boolean boolean65 = composite59.contains((java.lang.Object) placeholder61);
        comparators.Composite.MATCH_MINIMUM = placeholder61;
        comparators.Composite.MATCH_MINIMUM = placeholder61;
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(objItor60);
        org.junit.Assert.assertNotNull(placeholder61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 47 + "'", int62 == 47);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        comparators.Composite composite36 = composite9.addBytes(byteArray34);
        java.nio.ByteBuffer byteBuffer37 = composite36.serializeToByteBuffer();
        boolean boolean38 = comparators.Composite.isValidType((java.lang.Object) composite36);
        int int39 = composite36.startOffset;
        comparators.Composite composite40 = composite36.addMatchMinimum();
        int int41 = composite36.size();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(composite40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        comparators.hector.CompositeListSerializer compositeListSerializer15 = new comparators.hector.CompositeListSerializer();
        boolean boolean16 = composite9.contains((java.lang.Object) compositeListSerializer15);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        comparators.Composite composite32 = composite26.addBool(true);
        java.util.Iterator<java.lang.Object> objItor33 = composite26.iterator();
        comparators.Composite composite34 = new comparators.Composite();
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.lang.Object[] objArray45 = composite44.toArray();
        int int46 = composite44.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream47 = composite44.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream48 = composite44.parallelStream();
        int int49 = composite34.compareTo(composite44);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray65 = new byte[] {};
        int int66 = comparators.Composite.compare(byteArray64, byteArray65);
        boolean boolean68 = comparators.Composite.validate((int) ' ', byteArray65, true);
        boolean boolean69 = composite59.contains((java.lang.Object) boolean68);
        java.util.stream.Stream<java.lang.Object> objStream70 = composite59.parallelStream();
        boolean boolean71 = composite34.contains((java.lang.Object) composite59);
        boolean boolean72 = composite26.addAll((java.util.Collection<java.lang.Object>) composite34);
        int int73 = comparators.Composite.compare(composite9, composite26);
        java.util.Iterator<java.lang.Object> objItor74 = composite9.iterator();
        int int75 = composite9.size();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(composite32);
        org.junit.Assert.assertNotNull(objItor33);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(objItor74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        int int33 = composite28.startOffset;
        composite28.clear();
        boolean boolean35 = composite18.containsAll((java.util.Collection<java.lang.Object>) composite28);
        comparators.Composite composite37 = composite28.addAscii("hi!");
        java.util.stream.Stream<java.lang.Object> objStream38 = composite37.parallelStream();
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        boolean boolean57 = comparators.Composite.validate((int) ' ', byteArray54, true);
        boolean boolean58 = composite48.contains((java.lang.Object) boolean57);
        java.util.stream.Stream<java.lang.Object> objStream59 = composite48.parallelStream();
        composite48.startOffset = 8;
        comparators.Composite composite63 = composite48.addAscii("hi!");
        comparators.Composite composite65 = composite48.addLong((long) 4);
        int int66 = composite65.size();
        java.lang.Object[] objArray67 = composite65.toArray();
        byte[] byteArray68 = comparators.Composite.serialize(objArray67);
        byte[] byteArray69 = comparators.Composite.serialize(objArray67);
        boolean boolean70 = composite37.add((java.lang.Object) byteArray69);
        java.lang.Object[] objArray71 = composite37.toArray();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(composite63);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[hi!, 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[hi!, 4]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[67, 77, 80, 1, 8, 0, 3, 104, 105, 33, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[67, 77, 80, 1, 8, 0, 3, 104, 105, 33, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[hi!, [67, 77, 80, 1, 8, 0, 3, 104, 105, 33, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0]]");
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        int int15 = composite10.startOffset;
        boolean boolean16 = composite10.isEmpty();
        java.lang.String str17 = composite10.toString();
        comparators.Composite composite19 = composite10.addUTF8("Placeholder(100)");
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.util.RandomAccess[] randomAccessArray30 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray31 = composite29.toArray(randomAccessArray30);
        comparators.Composite composite33 = composite29.addUTF8("UTF-8");
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.lang.Object[] objArray45 = composite44.toArray();
        int int46 = composite44.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream47 = null;
        composite44.byteStream = byteArrayOutputStream47;
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteArray53);
        byte[] byteArray56 = comparators.Composite.serialize(objList55);
        java.util.stream.Stream<java.lang.Object> objStream57 = objList55.parallelStream();
        comparators.Composite composite58 = new comparators.Composite(objList55);
        java.lang.Object[] objArray59 = composite58.toArray();
        int int60 = composite58.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream61 = composite58.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream62 = composite58.parallelStream();
        comparators.Composite composite64 = composite58.addBool(true);
        java.util.Iterator<java.lang.Object> objItor65 = composite58.iterator();
        int int66 = composite44.compareTo(composite58);
        byte[] byteArray67 = composite58.bytes;
        comparators.Composite.CompositeTypeIterator compositeTypeIterator68 = composite19.new CompositeTypeIterator(composite29, 455, byteArray67);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray74 = new byte[] {};
        int int75 = comparators.Composite.compare(byteArray73, byteArray74);
        java.util.List<java.lang.Object> objList76 = comparators.Composite.deserialize(byteArray74);
        byte[] byteArray77 = comparators.Composite.serialize(objList76);
        java.util.stream.Stream<java.lang.Object> objStream78 = objList76.parallelStream();
        comparators.Composite composite79 = new comparators.Composite(objList76);
        java.lang.Object[] objArray80 = composite79.toArray();
        int int81 = composite79.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream82 = composite79.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream83 = composite79.parallelStream();
        int int84 = composite79.startOffset;
        boolean boolean85 = composite79.isEmpty();
        java.lang.String str86 = composite79.toString();
        comparators.Composite composite88 = composite79.addUTF8("Placeholder(100)");
        byte[] byteArray89 = composite79.serialize();
        // The following exception was thrown during execution in test generation
        try {
            int int90 = comparators.Composite.compare(71, byteArray67, (int) (short) 100, byteArray89);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(composite19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(randomAccessArray30);
        org.junit.Assert.assertNotNull(randomAccessArray31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(composite64);
        org.junit.Assert.assertNotNull(objItor65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertNull(byteArray77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(objStream82);
        org.junit.Assert.assertNotNull(objStream83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(composite88);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[67, 77, 80, 1, 8, 0, 16, 80, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 40, 49, 48, 48, 41, 0]");
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        int int25 = composite9.startOffset;
        comparators.Composite composite27 = composite9.addBool(true);
        java.lang.Object[] objArray28 = composite27.toArray();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
        org.junit.Assert.assertNotNull(composite27);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[hi!, true]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[hi!, true]");
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray8 = new byte[] {};
        int int9 = comparators.Composite.compare(byteArray7, byteArray8);
        boolean boolean11 = comparators.Composite.validate((int) ' ', byteArray8, true);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        boolean boolean21 = comparators.Composite.validate((int) (short) 100, byteArray17, false);
        int int22 = comparators.Composite.compare(byteArray8, byteArray17);
        boolean boolean24 = comparators.Composite.validate((int) '#', byteArray8, true);
        boolean boolean26 = comparators.Composite.validate(0, byteArray8, true);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        int int40 = composite38.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream41 = composite38.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream42 = composite38.parallelStream();
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.lang.Object[] objArray53 = composite52.toArray();
        int int54 = composite52.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream55 = composite52.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream56 = composite52.parallelStream();
        int int57 = composite52.startOffset;
        int int58 = composite38.compareTo(composite52);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        comparators.Composite composite65 = composite38.addBytes(byteArray63);
        java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(byteArray63);
        boolean boolean67 = comparators.Composite.validate(11, byteArray63);
        // The following exception was thrown during execution in test generation
        try {
            int int68 = comparators.Composite.compare(14, byteArray8, 4, byteArray63);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertNotNull(objList66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        java.lang.Object[][][] objArray32 = new java.lang.Object[][][] {};
        java.lang.Object[][][] objArray33 = composite9.toArray(objArray32);
        comparators.Composite composite34 = new comparators.Composite((java.lang.Object[]) objArray32);
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.util.RandomAccess[] randomAccessArray52 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray53 = composite51.toArray(randomAccessArray52);
        comparators.Composite composite55 = composite51.addLong((long) 67);
        byte[] byteArray56 = composite55.serialize();
        java.util.List<java.lang.Object> objList57 = comparators.Composite.deserialize(byteArray56);
        int int58 = comparators.Composite.compare(byteArray39, byteArray56);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        byte[] byteArray69 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray70 = new byte[] {};
        int int71 = comparators.Composite.compare(byteArray69, byteArray70);
        int int72 = comparators.Composite.compare(byteArray63, byteArray70);
        boolean boolean74 = comparators.Composite.validate((int) (byte) 0, byteArray70, true);
        int int75 = comparators.Composite.compare(byteArray56, byteArray70);
        comparators.Composite composite76 = composite34.addBytes(byteArray70);
        java.util.Iterator<java.lang.Object> objItor77 = composite76.iterator();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(randomAccessArray52);
        org.junit.Assert.assertNotNull(randomAccessArray53);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(composite76);
        org.junit.Assert.assertNotNull(objItor77);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite65.startOffset;
        int int72 = composite17.compareTo(composite65);
        comparators.Composite composite74 = composite17.addLong((long) 80);
        byte[] byteArray78 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray79 = new byte[] {};
        int int80 = comparators.Composite.compare(byteArray78, byteArray79);
        java.util.List<java.lang.Object> objList81 = comparators.Composite.deserialize(byteArray79);
        byte[] byteArray82 = comparators.Composite.serialize(objList81);
        java.util.stream.Stream<java.lang.Object> objStream83 = objList81.parallelStream();
        comparators.Composite composite84 = new comparators.Composite(objList81);
        java.lang.Object[] objArray85 = composite84.toArray();
        int int86 = composite84.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream87 = composite84.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream88 = composite84.parallelStream();
        int int89 = composite84.startOffset;
        composite84.clear();
        boolean boolean92 = composite84.equals((java.lang.Object) 1L);
        comparators.Composite composite94 = composite84.addLong(0L);
        java.io.ByteArrayOutputStream byteArrayOutputStream95 = composite84.byteStream;
        composite17.byteStream = byteArrayOutputStream95;
        java.lang.Class<?> wildcardClass97 = byteArrayOutputStream95.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(objList81);
        org.junit.Assert.assertNull(byteArray82);
        org.junit.Assert.assertNotNull(objStream83);
        org.junit.Assert.assertNotNull(objArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray85), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray85), "[]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objStream87);
        org.junit.Assert.assertNotNull(objStream88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(composite94);
        org.junit.Assert.assertNotNull(byteArrayOutputStream95);
// flaky:         org.junit.Assert.assertEquals(byteArrayOutputStream95.toString(), "CMP\001\003\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        byte[] byteArray20 = comparators.Composite.serialize(objList18);
        byte[] byteArray21 = compositeListSerializer0.toBytes(objList18);
        byte[] byteArray22 = null;
        java.util.List<java.lang.Object> objList23 = compositeListSerializer0.fromBytes(byteArray22);
        int int25 = compositeListSerializer0.computeInitialHashSize(77);
        byte[] byteArray26 = null;
        java.util.List<java.lang.Object> objList27 = compositeListSerializer0.fromBytes(byteArray26);
        comparators.hector.CompositeListSerializer compositeListSerializer28 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        byte[] byteArray39 = compositeListSerializer28.toBytes(objList35);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        byte[] byteArray48 = comparators.Composite.serialize(objList46);
        byte[] byteArray49 = compositeListSerializer28.toBytes(objList46);
        byte[] byteArray50 = compositeListSerializer0.toBytes(objList46);
        byte[] byteArray51 = comparators.Composite.serialize(objList46);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 103 + "'", int25 == 103);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNull(byteArray48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNull(byteArray51);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        compositeTypeIterator80.offset = (short) 0;
        int int85 = compositeTypeIterator80.len;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj86 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        byte[] byteArray20 = comparators.Composite.serialize(objList18);
        byte[] byteArray21 = compositeListSerializer0.toBytes(objList18);
        byte[] byteArray22 = null;
        java.util.List<java.lang.Object> objList23 = compositeListSerializer0.fromBytes(byteArray22);
        int int25 = compositeListSerializer0.computeInitialHashSize(77);
        byte[] byteArray26 = null;
        java.util.List<java.lang.Object> objList27 = compositeListSerializer0.fromBytes(byteArray26);
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray32 = new byte[] {};
        int int33 = comparators.Composite.compare(byteArray31, byteArray32);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray32);
        byte[] byteArray35 = comparators.Composite.serialize(objList34);
        java.util.stream.Stream<java.lang.Object> objStream36 = objList34.parallelStream();
        comparators.Composite composite37 = new comparators.Composite(objList34);
        java.lang.Object[] objArray38 = composite37.toArray();
        int int39 = composite37.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream40 = composite37.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream41 = composite37.parallelStream();
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        int int56 = composite51.startOffset;
        int int57 = composite37.compareTo(composite51);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray62 = new byte[] {};
        int int63 = comparators.Composite.compare(byteArray61, byteArray62);
        comparators.Composite composite64 = composite37.addBytes(byteArray62);
        java.nio.ByteBuffer byteBuffer65 = composite64.serializeToByteBuffer();
        java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(byteBuffer65);
        boolean boolean67 = comparators.Composite.validate(byteBuffer65);
        java.util.List<java.lang.Object> objList68 = comparators.Composite.deserialize(byteBuffer65);
        java.nio.ByteBuffer byteBuffer69 = comparators.Composite.serializeToByteBuffer(objList68);
        java.util.List<java.lang.Object> objList70 = compositeListSerializer0.fromByteBuffer(byteBuffer69);
        byte[] byteArray71 = comparators.Composite.serialize(objList70);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 103 + "'", int25 == 103);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(composite64);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(objList66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objList68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(objList70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[67, 77, 80, 1, 9, 0, 0, 0]");
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        comparators.Composite composite17 = composite15.addLong((long) 6);
        java.io.DataOutputStream dataOutputStream18 = composite15.out;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.stream.Stream<java.lang.Object> objStream39 = composite28.parallelStream();
        composite28.startOffset = 8;
        comparators.Composite composite43 = composite28.addAscii("hi!");
        comparators.Composite composite45 = composite28.addLong((long) 4);
        java.nio.ByteBuffer byteBuffer46 = composite45.serializeToByteBuffer();
        boolean boolean47 = composite15.contains((java.lang.Object) byteBuffer46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteBuffer46);
        comparators.Composite composite49 = new comparators.Composite(objList48);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        java.lang.Object[] objArray60 = composite59.toArray();
        int int61 = composite59.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream62 = composite59.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream63 = composite59.parallelStream();
        int int64 = composite59.startOffset;
        comparators.hector.CompositeListSerializer compositeListSerializer65 = new comparators.hector.CompositeListSerializer();
        boolean boolean66 = composite59.contains((java.lang.Object) compositeListSerializer65);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = composite49.removeAll((java.util.Collection<java.lang.Object>) composite59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(dataOutputStream18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(composite43);
        org.junit.Assert.assertNotNull(composite45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        byte[] byteArray38 = null;
        comparators.Composite composite39 = new comparators.Composite(byteArray38);
        boolean boolean40 = composite25.containsAll((java.util.Collection<java.lang.Object>) composite39);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray45 = new byte[] {};
        int int46 = comparators.Composite.compare(byteArray44, byteArray45);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray45);
        byte[] byteArray48 = comparators.Composite.serialize(objList47);
        java.util.stream.Stream<java.lang.Object> objStream49 = objList47.parallelStream();
        comparators.Composite composite50 = new comparators.Composite(objList47);
        java.lang.Object[] objArray51 = composite50.toArray();
        int int52 = composite50.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream53 = composite50.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream54 = composite50.parallelStream();
        int int55 = composite50.startOffset;
        boolean boolean56 = composite50.isEmpty();
        java.lang.String str57 = composite50.toString();
        comparators.Composite composite59 = composite50.addUTF8("Placeholder(100)");
        boolean boolean60 = composite25.addAll((java.util.Collection<java.lang.Object>) composite59);
        java.io.ByteArrayOutputStream byteArrayOutputStream61 = composite59.byteStream;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNull(byteArray48);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(composite59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(byteArrayOutputStream61);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        comparators.Composite composite37 = composite9.addLong((long) (short) 1);
        comparators.Composite composite39 = composite37.addBool(true);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList46.parallelStream();
        comparators.Composite composite49 = new comparators.Composite(objList46);
        java.lang.Object[] objArray50 = composite49.toArray();
        int int51 = composite49.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream52 = composite49.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream53 = composite49.parallelStream();
        comparators.Composite composite55 = composite49.addBool(true);
        java.util.Iterator<java.lang.Object> objItor56 = composite49.iterator();
        comparators.Composite composite58 = composite49.addReal((java.lang.Double) 100.0d);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        java.util.List<java.lang.Object> objList65 = comparators.Composite.deserialize(byteArray63);
        byte[] byteArray66 = comparators.Composite.serialize(objList65);
        java.util.stream.Stream<java.lang.Object> objStream67 = objList65.parallelStream();
        comparators.Composite composite68 = new comparators.Composite(objList65);
        java.lang.Object[] objArray69 = composite68.toArray();
        int int70 = composite68.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream71 = composite68.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream72 = composite68.parallelStream();
        int int73 = composite68.startOffset;
        composite68.clear();
        boolean boolean75 = composite58.containsAll((java.util.Collection<java.lang.Object>) composite68);
        java.util.Iterator<java.lang.Object> objItor76 = composite58.iterator();
        boolean boolean77 = composite37.add((java.lang.Object) composite58);
        comparators.Composite composite79 = composite58.addBool(true);
        comparators.Composite composite81 = composite58.addBool(true);
        java.util.Iterator<java.lang.Object> objItor82 = composite81.iterator();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(objItor56);
        org.junit.Assert.assertNotNull(composite58);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(objList65);
        org.junit.Assert.assertNull(byteArray66);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(objItor82);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        int int1 = placeholder0.type;
        placeholder0.type = 6;
        java.lang.String str4 = placeholder0.toString();
        placeholder0.type = 77;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        java.lang.String str8 = placeholder0.toString();
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 6 + "'", int1 == 6);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Placeholder(6)" + "'", str4, "Placeholder(6)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Placeholder(77)" + "'", str8, "Placeholder(77)");
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (byte) -1;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        boolean boolean4 = comparators.Composite.isValidType((java.lang.Object) placeholder0);
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        int int6 = placeholder0.type;
        int int7 = placeholder0.type;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        int int21 = composite9.startOffset;
        java.lang.Object[] objArray22 = composite9.toArray();
        comparators.Composite composite23 = new comparators.Composite(objArray22);
        comparators.Composite composite24 = new comparators.Composite(objArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objArray22);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNull(byteArray25);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.lang.String str17 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray19 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList20 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList20, byteBufferArray19);
        java.lang.String str22 = compositeType18.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList20);
        java.lang.String str23 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList20);
        comparators.CompositeType compositeType24 = new comparators.CompositeType();
        comparators.CompositeType compositeType25 = comparators.CompositeType.instance;
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray30);
        byte[] byteArray33 = comparators.Composite.serialize(objList32);
        java.util.stream.Stream<java.lang.Object> objStream34 = objList32.parallelStream();
        comparators.Composite composite35 = new comparators.Composite(objList32);
        java.lang.Object[] objArray36 = composite35.toArray();
        int int37 = composite35.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream38 = composite35.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream39 = composite35.parallelStream();
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList46.parallelStream();
        comparators.Composite composite49 = new comparators.Composite(objList46);
        java.lang.Object[] objArray50 = composite49.toArray();
        int int51 = composite49.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream52 = composite49.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream53 = composite49.parallelStream();
        int int54 = composite49.startOffset;
        int int55 = composite35.compareTo(composite49);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        comparators.Composite composite62 = composite35.addBytes(byteArray60);
        java.nio.ByteBuffer byteBuffer63 = composite62.serializeToByteBuffer();
        compositeType25.validate(byteBuffer63);
        boolean boolean65 = comparators.Composite.validate(byteBuffer63);
        comparators.Composite composite66 = new comparators.Composite(byteBuffer63);
        java.nio.ByteBuffer byteBuffer67 = null;
        int int68 = compositeType24.compare(byteBuffer63, byteBuffer67);
        comparators.CompositeType compositeType69 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray70 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList71 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList71, byteBufferArray70);
        java.lang.String str73 = compositeType69.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList71);
        org.apache.cassandra.db.IColumn[] iColumnArray74 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList75 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList75, iColumnArray74);
        java.lang.String str77 = compositeType69.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList75);
        java.lang.String str78 = compositeType24.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList75);
        java.lang.String str79 = compositeType6.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList75);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer81 = compositeType6.fromString("67,true,2");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteBufferArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(compositeType25);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(composite62);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(compositeType69);
        org.junit.Assert.assertNotNull(byteBufferArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(iColumnArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.util.RandomAccess[] randomAccessArray11 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray12 = composite10.toArray(randomAccessArray11);
        comparators.Composite composite14 = composite10.addLong((long) 67);
        byte[] byteArray15 = composite14.serialize();
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray15);
        comparators.Composite composite17 = new comparators.Composite(byteArray15);
        comparators.Composite composite18 = compositeSerializer0.fromBytes(byteArray15);
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray32 = new byte[] {};
        int int33 = comparators.Composite.compare(byteArray31, byteArray32);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray32);
        byte[] byteArray35 = comparators.Composite.serialize(objList34);
        java.util.stream.Stream<java.lang.Object> objStream36 = objList34.parallelStream();
        comparators.Composite composite37 = new comparators.Composite(objList34);
        java.util.RandomAccess[] randomAccessArray38 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray39 = composite37.toArray(randomAccessArray38);
        comparators.Composite composite41 = composite37.addLong((long) 67);
        byte[] byteArray42 = composite41.serialize();
        java.util.List<java.lang.Object> objList43 = comparators.Composite.deserialize(byteArray42);
        int int44 = comparators.Composite.compare(byteArray25, byteArray42);
        comparators.hector.CompositeSerializer compositeSerializer45 = new comparators.hector.CompositeSerializer();
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        java.util.List<java.lang.Object> objList52 = comparators.Composite.deserialize(byteArray50);
        byte[] byteArray53 = comparators.Composite.serialize(objList52);
        java.util.stream.Stream<java.lang.Object> objStream54 = objList52.parallelStream();
        comparators.Composite composite55 = new comparators.Composite(objList52);
        java.lang.Object[] objArray56 = composite55.toArray();
        int int57 = composite55.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream58 = composite55.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream59 = composite55.parallelStream();
        comparators.Composite composite61 = composite55.addBool(true);
        java.io.DataOutputStream dataOutputStream62 = composite55.out;
        byte[] byteArray63 = compositeSerializer45.toBytes(composite55);
        int int64 = comparators.Composite.compare(byteArray42, byteArray63);
        boolean boolean66 = comparators.Composite.validate(67, byteArray63, true);
        boolean boolean67 = comparators.Composite.validate(13, byteArray63);
        comparators.Composite composite68 = compositeSerializer0.fromBytes(byteArray63);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        java.util.List<java.lang.Object> objList75 = comparators.Composite.deserialize(byteArray73);
        byte[] byteArray76 = comparators.Composite.serialize(objList75);
        java.util.stream.Stream<java.lang.Object> objStream77 = objList75.parallelStream();
        comparators.Composite composite78 = new comparators.Composite(objList75);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray84 = new byte[] {};
        int int85 = comparators.Composite.compare(byteArray83, byteArray84);
        boolean boolean87 = comparators.Composite.validate((int) ' ', byteArray84, true);
        boolean boolean88 = composite78.contains((java.lang.Object) boolean87);
        java.util.Spliterator<java.lang.Object> objSpliterator89 = composite78.spliterator();
        byte[] byteArray90 = composite78.bytes;
        comparators.Composite composite92 = composite78.addLong((long) 5);
        int int93 = composite92.size();
        byte[] byteArray94 = compositeSerializer0.toBytes(composite92);
        int int96 = compositeSerializer0.computeInitialHashSize((int) (byte) 100);
        int int98 = compositeSerializer0.computeInitialHashSize((int) (short) 0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(randomAccessArray12);
        org.junit.Assert.assertNotNull(composite14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(randomAccessArray38);
        org.junit.Assert.assertNotNull(randomAccessArray39);
        org.junit.Assert.assertNotNull(composite41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(objList52);
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertNotNull(dataOutputStream62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(composite68);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(objList75);
        org.junit.Assert.assertNull(byteArray76);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objSpliterator89);
        org.junit.Assert.assertNull(byteArray90);
        org.junit.Assert.assertNotNull(composite92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 5, 0]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 134 + "'", int96 == 134);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        byte[] byteArray32 = composite23.bytes;
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        int int45 = composite42.startOffset;
        byte[] byteArray47 = null;
        comparators.Composite.CompositeTypeIterator compositeTypeIterator48 = composite23.new CompositeTypeIterator(composite42, 341, byteArray47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj49 = compositeTypeIterator48.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        byte[] byteArray20 = comparators.Composite.serialize(objList18);
        byte[] byteArray21 = compositeListSerializer0.toBytes(objList18);
        byte[] byteArray22 = null;
        java.util.List<java.lang.Object> objList23 = compositeListSerializer0.fromBytes(byteArray22);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray29 = new byte[] {};
        int int30 = comparators.Composite.compare(byteArray28, byteArray29);
        java.util.List<java.lang.Object> objList31 = comparators.Composite.deserialize(byteArray29);
        boolean boolean32 = comparators.Composite.validate(0, byteArray29);
        java.util.List<java.lang.Object> objList33 = compositeListSerializer0.fromBytes(byteArray29);
        comparators.CompositeType compositeType34 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray35 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList36 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList36, byteBufferArray35);
        java.lang.String str38 = compositeType34.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList36);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator39 = compositeType34.indexComparator;
        boolean boolean40 = comparators.Composite.isValidType((java.lang.Object) compositeType34);
        org.apache.cassandra.db.IColumn[] iColumnArray41 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList42 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList42, iColumnArray41);
        java.lang.String str44 = compositeType34.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList42);
        comparators.CompositeType compositeType45 = new comparators.CompositeType();
        comparators.CompositeType compositeType46 = comparators.CompositeType.instance;
        byte[] byteArray50 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray51 = new byte[] {};
        int int52 = comparators.Composite.compare(byteArray50, byteArray51);
        java.util.List<java.lang.Object> objList53 = comparators.Composite.deserialize(byteArray51);
        byte[] byteArray54 = comparators.Composite.serialize(objList53);
        java.util.stream.Stream<java.lang.Object> objStream55 = objList53.parallelStream();
        comparators.Composite composite56 = new comparators.Composite(objList53);
        java.lang.Object[] objArray57 = composite56.toArray();
        int int58 = composite56.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream59 = composite56.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream60 = composite56.parallelStream();
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray65 = new byte[] {};
        int int66 = comparators.Composite.compare(byteArray64, byteArray65);
        java.util.List<java.lang.Object> objList67 = comparators.Composite.deserialize(byteArray65);
        byte[] byteArray68 = comparators.Composite.serialize(objList67);
        java.util.stream.Stream<java.lang.Object> objStream69 = objList67.parallelStream();
        comparators.Composite composite70 = new comparators.Composite(objList67);
        java.lang.Object[] objArray71 = composite70.toArray();
        int int72 = composite70.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream73 = composite70.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream74 = composite70.parallelStream();
        int int75 = composite70.startOffset;
        int int76 = composite56.compareTo(composite70);
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray81 = new byte[] {};
        int int82 = comparators.Composite.compare(byteArray80, byteArray81);
        comparators.Composite composite83 = composite56.addBytes(byteArray81);
        java.nio.ByteBuffer byteBuffer84 = composite83.serializeToByteBuffer();
        compositeType46.validate(byteBuffer84);
        boolean boolean86 = comparators.Composite.validate(byteBuffer84);
        comparators.Composite composite87 = new comparators.Composite(byteBuffer84);
        java.nio.ByteBuffer byteBuffer88 = null;
        int int89 = compositeType45.compare(byteBuffer84, byteBuffer88);
        comparators.Composite composite90 = new comparators.Composite(byteBuffer84);
        comparators.Composite composite91 = new comparators.Composite(byteBuffer84);
        java.lang.String str92 = compositeType34.getString(byteBuffer84);
        java.util.List<java.lang.Object> objList93 = compositeListSerializer0.fromByteBuffer(byteBuffer84);
        comparators.Composite composite94 = new comparators.Composite(objList93);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(objList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNotNull(compositeType34);
        org.junit.Assert.assertNotNull(byteBufferArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(indexInfoComparator39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(iColumnArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(compositeType46);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(objList53);
        org.junit.Assert.assertNull(byteArray54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(objList67);
        org.junit.Assert.assertNull(byteArray68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertNotNull(objStream74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(composite83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(objList93);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        comparators.CompositeType compositeType11 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray12 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList13 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13, byteBufferArray12);
        java.lang.String str15 = compositeType11.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator16 = compositeType11.indexComparator;
        comparators.CompositeType compositeType17 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray18 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList19 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19, byteBufferArray18);
        java.lang.String str21 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType11.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType17);
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.lang.String str28 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator34 = compositeType29.indexComparator;
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator40 = compositeType29.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType35);
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray42 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList43 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43, byteBufferArray42);
        java.lang.String str45 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.lang.String str46 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.util.AbstractList[] abstractListArray48 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray49 = (java.util.AbstractList<java.nio.ByteBuffer>[]) abstractListArray48;
        byteBufferListArray49[0] = byteBufferList25;
        byteBufferListArray49[1] = byteBufferList43;
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray54 = composite9.toArray(byteBufferListArray49);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        java.util.List<java.lang.Object> objList61 = comparators.Composite.deserialize(byteArray59);
        boolean boolean62 = composite9.equals((java.lang.Object) objList61);
        java.util.Iterator<java.lang.Object> objItor63 = composite9.iterator();
        composite9.startOffset = (short) 10;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(compositeType11);
        org.junit.Assert.assertNotNull(byteBufferArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(indexInfoComparator16);
        org.junit.Assert.assertNotNull(compositeType17);
        org.junit.Assert.assertNotNull(byteBufferArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(indexInfoComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteBufferComparator40);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteBufferArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(abstractListArray48);
        org.junit.Assert.assertNotNull(byteBufferListArray49);
        org.junit.Assert.assertNotNull(byteBufferListArray54);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(objList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objItor63);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        comparators.Composite composite37 = composite10.addBytes(byteArray35);
        java.nio.ByteBuffer byteBuffer38 = composite37.serializeToByteBuffer();
        compositeType0.validate(byteBuffer38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteBuffer38);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteBuffer38);
        comparators.Composite composite42 = new comparators.Composite(objList41);
        java.nio.ByteBuffer byteBuffer43 = comparators.Composite.serializeToByteBuffer(objList41);
        comparators.CompositeType compositeType44 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray45 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList46 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList46, byteBufferArray45);
        java.lang.String str48 = compositeType44.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList46);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator49 = compositeType44.indexComparator;
        comparators.CompositeType compositeType50 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray51 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList52 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52, byteBufferArray51);
        java.lang.String str54 = compositeType50.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator55 = compositeType44.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType50);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray74 = new byte[] {};
        int int75 = comparators.Composite.compare(byteArray73, byteArray74);
        java.util.List<java.lang.Object> objList76 = comparators.Composite.deserialize(byteArray74);
        byte[] byteArray77 = comparators.Composite.serialize(objList76);
        java.util.stream.Stream<java.lang.Object> objStream78 = objList76.parallelStream();
        comparators.Composite composite79 = new comparators.Composite(objList76);
        java.lang.Object[] objArray80 = composite79.toArray();
        int int81 = composite79.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream82 = composite79.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream83 = composite79.parallelStream();
        int int84 = composite79.startOffset;
        int int85 = composite65.compareTo(composite79);
        byte[] byteArray89 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray90 = new byte[] {};
        int int91 = comparators.Composite.compare(byteArray89, byteArray90);
        comparators.Composite composite92 = composite65.addBytes(byteArray90);
        java.nio.ByteBuffer byteBuffer93 = composite92.serializeToByteBuffer();
        compositeType50.validate(byteBuffer93);
        comparators.Composite composite95 = new comparators.Composite(byteBuffer93);
        boolean boolean97 = comparators.Composite.validate(byteBuffer93, true);
        int int98 = comparators.Composite.compare(byteBuffer43, byteBuffer93);
        java.util.List<java.lang.Object> objList99 = comparators.Composite.deserialize(byteBuffer93);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(compositeType44);
        org.junit.Assert.assertNotNull(byteBufferArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(indexInfoComparator49);
        org.junit.Assert.assertNotNull(compositeType50);
        org.junit.Assert.assertNotNull(byteBufferArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteBufferComparator55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertNull(byteArray77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(objStream82);
        org.junit.Assert.assertNotNull(objStream83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(composite92);
        org.junit.Assert.assertNotNull(byteBuffer93);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertNotNull(objList99);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (short) 1;
        java.lang.String str3 = placeholder0.toString();
        boolean boolean5 = placeholder0.equals((java.lang.Object) 10L);
        java.lang.String str6 = placeholder0.toString();
        placeholder0.type = 9;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Placeholder(1)" + "'", str3, "Placeholder(1)");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Placeholder(1)" + "'", str6, "Placeholder(1)");
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        int int81 = compositeTypeIterator80.start;
        compositeTypeIterator80.len = 3;
        compositeTypeIterator80.start = 80;
        compositeTypeIterator80.len = 0;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 67 + "'", int81 == 67);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (short) 1;
        java.lang.String str3 = placeholder0.toString();
        boolean boolean5 = placeholder0.equals((java.lang.Object) 10L);
        placeholder0.type = 58;
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray12 = new byte[] {};
        int int13 = comparators.Composite.compare(byteArray11, byteArray12);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray12);
        byte[] byteArray15 = comparators.Composite.serialize(objList14);
        java.util.stream.Stream<java.lang.Object> objStream16 = objList14.parallelStream();
        comparators.Composite composite17 = new comparators.Composite(objList14);
        java.lang.Object[] objArray18 = composite17.toArray();
        int int19 = composite17.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream20 = composite17.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream21 = composite17.parallelStream();
        int int22 = composite17.startOffset;
        int int23 = composite17.startOffset;
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        boolean boolean42 = comparators.Composite.validate((int) ' ', byteArray39, true);
        boolean boolean43 = composite33.contains((java.lang.Object) boolean42);
        java.util.Spliterator<java.lang.Object> objSpliterator44 = composite33.spliterator();
        boolean boolean45 = composite17.containsAll((java.util.Collection<java.lang.Object>) composite33);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray46 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray47 = composite17.toArray(compositeListSerializerArray46);
        comparators.Composite composite49 = composite17.addLong((long) (short) 100);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        int int60 = composite59.size();
        composite59.clear();
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        java.util.List<java.lang.Object> objList68 = comparators.Composite.deserialize(byteArray66);
        byte[] byteArray69 = comparators.Composite.serialize(objList68);
        java.util.stream.Stream<java.lang.Object> objStream70 = objList68.parallelStream();
        comparators.Composite composite71 = new comparators.Composite(objList68);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        boolean boolean80 = comparators.Composite.validate((int) ' ', byteArray77, true);
        boolean boolean81 = composite71.contains((java.lang.Object) boolean80);
        java.util.stream.Stream<java.lang.Object> objStream82 = composite71.parallelStream();
        composite71.startOffset = 8;
        comparators.Composite composite86 = composite71.addAscii("hi!");
        boolean boolean87 = composite59.containsAll((java.util.Collection<java.lang.Object>) composite71);
        int int88 = composite49.compareTo(composite71);
        java.util.stream.Stream<java.lang.Object> objStream89 = composite71.stream();
        boolean boolean90 = placeholder0.equals((java.lang.Object) objStream89);
        java.lang.String str91 = placeholder0.toString();
        placeholder0.type = ' ';
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Placeholder(1)" + "'", str3, "Placeholder(1)");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNull(byteArray15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objSpliterator44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray46);
        org.junit.Assert.assertNotNull(compositeListSerializerArray47);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(objList68);
        org.junit.Assert.assertNull(byteArray69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objStream82);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(objStream89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Placeholder(58)" + "'", str91, "Placeholder(58)");
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        org.apache.cassandra.db.IColumn[] iColumnArray9 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList10 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList10, iColumnArray9);
        java.lang.String str12 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList10);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        org.apache.cassandra.db.IColumn[] iColumnArray18 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList19 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList19, iColumnArray18);
        java.lang.String str21 = compositeType13.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList19);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType13.getReverseComparator();
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        org.apache.cassandra.db.IColumn[] iColumnArray28 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList29 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList29, iColumnArray28);
        java.lang.String str31 = compositeType23.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList29);
        java.lang.String str32 = compositeType13.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList29);
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator38 = compositeType33.indexComparator;
        comparators.CompositeType compositeType39 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray40 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList41 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41, byteBufferArray40);
        java.lang.String str43 = compositeType39.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator44 = compositeType33.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType39);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator45 = compositeType13.thenComparing(byteBufferComparator44);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator46 = compositeType0.thenComparing(byteBufferComparator44);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator47 = byteBufferComparator44.reversed();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(iColumnArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(iColumnArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(iColumnArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(indexInfoComparator38);
        org.junit.Assert.assertNotNull(compositeType39);
        org.junit.Assert.assertNotNull(byteBufferArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteBufferComparator44);
        org.junit.Assert.assertNotNull(byteBufferComparator45);
        org.junit.Assert.assertNotNull(byteBufferComparator46);
        org.junit.Assert.assertNotNull(byteBufferComparator47);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType7.validate(byteBuffer50);
        java.lang.String str52 = compositeType0.getString(byteBuffer50);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator53 = compositeType0.indexComparator;
        java.lang.Class<?> wildcardClass54 = indexInfoComparator53.getClass();
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(indexInfoComparator53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.util.RandomAccess[] randomAccessArray11 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray12 = composite10.toArray(randomAccessArray11);
        comparators.Composite composite14 = composite10.addLong((long) 67);
        comparators.Composite composite16 = composite14.addBool(true);
        comparators.Composite composite18 = composite14.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator19 = composite14.spliterator();
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        boolean boolean38 = comparators.Composite.validate((int) ' ', byteArray35, true);
        boolean boolean39 = composite29.contains((java.lang.Object) boolean38);
        java.util.Spliterator<java.lang.Object> objSpliterator40 = composite29.spliterator();
        java.io.DataOutputStream dataOutputStream41 = composite29.out;
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.lang.Object[] objArray53 = composite52.toArray();
        int int54 = composite52.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream55 = composite52.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream56 = composite52.parallelStream();
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        java.util.List<java.lang.Object> objList63 = comparators.Composite.deserialize(byteArray61);
        byte[] byteArray64 = comparators.Composite.serialize(objList63);
        java.util.stream.Stream<java.lang.Object> objStream65 = objList63.parallelStream();
        comparators.Composite composite66 = new comparators.Composite(objList63);
        java.lang.Object[] objArray67 = composite66.toArray();
        int int68 = composite66.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream69 = composite66.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream70 = composite66.parallelStream();
        int int71 = composite66.startOffset;
        int int72 = composite52.compareTo(composite66);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        comparators.Composite composite79 = composite52.addBytes(byteArray77);
        java.util.List<java.lang.Object> objList80 = comparators.Composite.deserialize(byteArray77);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator81 = composite14.new CompositeTypeIterator(composite29, 67, byteArray77);
        boolean boolean83 = comparators.Composite.validate((int) (byte) 1, byteArray77, true);
        java.util.List<java.lang.Object> objList84 = comparators.Composite.deserialize(byteArray77);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(randomAccessArray12);
        org.junit.Assert.assertNotNull(composite14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(objSpliterator19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objSpliterator40);
        org.junit.Assert.assertNull(dataOutputStream41);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(objList63);
        org.junit.Assert.assertNull(byteArray64);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertNotNull(objList80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(objList84);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        java.lang.String str1 = placeholder0.toString();
        java.lang.String str2 = placeholder0.toString();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        java.util.List<java.lang.Object> objList9 = comparators.Composite.deserialize(byteArray7);
        byte[] byteArray10 = comparators.Composite.serialize(objList9);
        java.util.stream.Stream<java.lang.Object> objStream11 = objList9.parallelStream();
        comparators.Composite composite12 = new comparators.Composite(objList9);
        java.lang.Object[] objArray13 = composite12.toArray();
        int int14 = composite12.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream15 = null;
        composite12.byteStream = byteArrayOutputStream15;
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        comparators.Composite composite32 = composite26.addBool(true);
        java.util.Iterator<java.lang.Object> objItor33 = composite26.iterator();
        int int34 = composite12.compareTo(composite26);
        java.lang.Object[][][] objArray35 = new java.lang.Object[][][] {};
        java.lang.Object[][][] objArray36 = composite12.toArray(objArray35);
        java.util.Spliterator<java.lang.Object> objSpliterator37 = composite12.spliterator();
        comparators.Composite composite39 = composite12.addLong((long) (short) 10);
        boolean boolean40 = placeholder0.equals((java.lang.Object) composite39);
        placeholder0.type = 6;
        java.lang.Class<?> wildcardClass43 = placeholder0.getClass();
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Placeholder(32)" + "'", str1, "Placeholder(32)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Placeholder(32)" + "'", str2, "Placeholder(32)");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(composite32);
        org.junit.Assert.assertNotNull(objItor33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertNotNull(objSpliterator37);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        int int33 = composite28.startOffset;
        composite28.clear();
        boolean boolean35 = composite18.containsAll((java.util.Collection<java.lang.Object>) composite28);
        comparators.Composite composite37 = composite28.addAscii("hi!");
        java.util.stream.Stream<java.lang.Object> objStream38 = composite37.parallelStream();
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite37.spliterator();
        java.util.UUID uUID40 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite41 = composite37.addLexicalUUID(uUID40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objSpliterator39);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer22 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator28 = compositeType23.indexComparator;
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator34 = compositeType23.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.lang.String str40 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.List<java.util.List<java.lang.Object>> objListList41 = compositeListSerializer22.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList37);
        comparators.hector.CompositeListSerializer compositeListSerializer42 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray44 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList45 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45, byteBufferArray44);
        java.lang.String str47 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator48 = compositeType43.indexComparator;
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray50 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList51 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51, byteBufferArray50);
        java.lang.String str53 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator54 = compositeType43.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType49);
        comparators.CompositeType compositeType55 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray56 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList57 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57, byteBufferArray56);
        java.lang.String str59 = compositeType55.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        java.lang.String str60 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        java.util.List<java.util.List<java.lang.Object>> objListList61 = compositeListSerializer42.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList57);
        int int63 = compositeListSerializer42.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer64 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType65 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray66 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList67 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList67, byteBufferArray66);
        java.lang.String str69 = compositeType65.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList67);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator70 = compositeType65.indexComparator;
        comparators.CompositeType compositeType71 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray72 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList73 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList73, byteBufferArray72);
        java.lang.String str75 = compositeType71.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList73);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator76 = compositeType65.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType71);
        comparators.CompositeType compositeType77 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray78 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList79 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList79, byteBufferArray78);
        java.lang.String str81 = compositeType77.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList79);
        java.lang.String str82 = compositeType71.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList79);
        java.util.List<java.util.List<java.lang.Object>> objListList83 = compositeListSerializer64.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList79);
        java.util.List<java.nio.ByteBuffer> byteBufferList84 = compositeListSerializer42.toBytesList(objListList83);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet85 = compositeListSerializer22.toBytesSet(objListList83);
        java.util.List<java.util.List<java.lang.Object>> objListList86 = compositeListSerializer0.fromBytesSet(byteBufferSet85);
        java.util.List<java.util.List<java.lang.Object>> objListList87 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.nio.ByteBuffer> byteBufferList88 = compositeListSerializer0.toBytesList(objListList87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(indexInfoComparator28);
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteBufferComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(objListList41);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(byteBufferArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(indexInfoComparator48);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteBufferComparator54);
        org.junit.Assert.assertNotNull(compositeType55);
        org.junit.Assert.assertNotNull(byteBufferArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(objListList61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertNotNull(compositeType65);
        org.junit.Assert.assertNotNull(byteBufferArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(indexInfoComparator70);
        org.junit.Assert.assertNotNull(compositeType71);
        org.junit.Assert.assertNotNull(byteBufferArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(byteBufferComparator76);
        org.junit.Assert.assertNotNull(compositeType77);
        org.junit.Assert.assertNotNull(byteBufferArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(objListList83);
        org.junit.Assert.assertNotNull(byteBufferList84);
        org.junit.Assert.assertNotNull(byteBufferSet85);
        org.junit.Assert.assertNotNull(objListList86);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        comparators.Composite composite0 = null;
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        comparators.Composite composite18 = composite16.addLong((long) 6);
        byte[] byteArray19 = composite16.serialize();
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator25 = compositeType20.indexComparator;
        boolean boolean26 = comparators.Composite.isValidType((java.lang.Object) compositeType20);
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray28 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList29 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29, byteBufferArray28);
        java.lang.String str31 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator32 = compositeType27.indexComparator;
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator38 = compositeType27.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType33);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        java.lang.Object[] objArray49 = composite48.toArray();
        int int50 = composite48.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream51 = composite48.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream52 = composite48.parallelStream();
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        java.util.List<java.lang.Object> objList59 = comparators.Composite.deserialize(byteArray57);
        byte[] byteArray60 = comparators.Composite.serialize(objList59);
        java.util.stream.Stream<java.lang.Object> objStream61 = objList59.parallelStream();
        comparators.Composite composite62 = new comparators.Composite(objList59);
        java.lang.Object[] objArray63 = composite62.toArray();
        int int64 = composite62.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream65 = composite62.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream66 = composite62.parallelStream();
        int int67 = composite62.startOffset;
        int int68 = composite48.compareTo(composite62);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        comparators.Composite composite75 = composite48.addBytes(byteArray73);
        java.nio.ByteBuffer byteBuffer76 = composite75.serializeToByteBuffer();
        compositeType33.validate(byteBuffer76);
        comparators.CompositeType compositeType78 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray79 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList80 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList80, byteBufferArray79);
        java.lang.String str82 = compositeType78.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList80);
        org.apache.cassandra.db.IColumn[] iColumnArray83 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList84 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList84, iColumnArray83);
        java.lang.String str86 = compositeType78.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList84);
        org.apache.cassandra.db.IColumn[] iColumnArray87 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList88 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList88, iColumnArray87);
        java.lang.String str90 = compositeType78.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList88);
        java.lang.String str91 = compositeType33.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList88);
        java.lang.String str92 = compositeType20.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList88);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator93 = compositeType20.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator94 = compositeType20.getReverseComparator();
        boolean boolean95 = composite16.equals((java.lang.Object) byteBufferComparator94);
        // The following exception was thrown during execution in test generation
        try {
            int int96 = comparators.Composite.compare(composite0, composite16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[67, 77, 80, 1, 2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 6, 0]");
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexInfoComparator25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteBufferArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(indexInfoComparator32);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteBufferComparator38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertNotNull(compositeType78);
        org.junit.Assert.assertNotNull(byteBufferArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(iColumnArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(iColumnArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(byteBufferComparator93);
        org.junit.Assert.assertNotNull(byteBufferComparator94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(9);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        byte[] byteArray32 = compositeListSerializer0.toBytes(objList28);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.util.RandomAccess[] randomAccessArray43 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray44 = composite42.toArray(randomAccessArray43);
        comparators.Composite composite46 = composite42.addLong((long) 67);
        byte[] byteArray47 = composite46.serialize();
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray47);
        java.nio.ByteBuffer byteBuffer49 = compositeListSerializer0.toByteBuffer(objList48);
        comparators.Composite composite50 = new comparators.Composite(byteBuffer49);
        java.nio.ByteBuffer byteBuffer51 = composite50.serializeToByteBuffer();
        comparators.Composite composite52 = new comparators.Composite(byteBuffer51);
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        java.util.List<java.lang.Object> objList59 = comparators.Composite.deserialize(byteArray57);
        byte[] byteArray60 = comparators.Composite.serialize(objList59);
        java.util.stream.Stream<java.lang.Object> objStream61 = objList59.parallelStream();
        comparators.Composite composite62 = new comparators.Composite(objList59);
        byte[] byteArray66 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray67 = new byte[] {};
        int int68 = comparators.Composite.compare(byteArray66, byteArray67);
        java.util.List<java.lang.Object> objList69 = comparators.Composite.deserialize(byteArray67);
        byte[] byteArray70 = comparators.Composite.serialize(objList69);
        java.util.stream.Stream<java.lang.Object> objStream71 = objList69.parallelStream();
        comparators.Composite composite72 = new comparators.Composite(objList69);
        java.lang.Object[] objArray73 = composite72.toArray();
        int int74 = composite72.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream75 = composite72.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream76 = composite72.parallelStream();
        int int77 = composite72.startOffset;
        int int78 = comparators.Composite.compare(composite62, composite72);
        composite62.clear();
        java.util.Iterator<java.lang.Object> objItor80 = composite62.iterator();
        int int81 = composite62.startOffset;
        java.io.DataOutput[] dataOutputArray82 = new java.io.DataOutput[] {};
        java.io.DataOutput[] dataOutputArray83 = composite62.toArray(dataOutputArray82);
        java.util.Iterator<java.lang.Object> objItor84 = composite62.iterator();
        comparators.Composite composite86 = composite62.addLong((long) 18);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean87 = composite52.retainAll((java.util.Collection<java.lang.Object>) composite86);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNull(byteArray32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(randomAccessArray43);
        org.junit.Assert.assertNotNull(randomAccessArray44);
        org.junit.Assert.assertNotNull(composite46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(objList69);
        org.junit.Assert.assertNull(byteArray70);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(objStream75);
        org.junit.Assert.assertNotNull(objStream76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(objItor80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(dataOutputArray82);
        org.junit.Assert.assertNotNull(dataOutputArray83);
        org.junit.Assert.assertNotNull(objItor84);
        org.junit.Assert.assertNotNull(composite86);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        comparators.CompositeType compositeType19 = comparators.CompositeType.instance;
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        int int48 = composite43.startOffset;
        int int49 = composite29.compareTo(composite43);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        comparators.Composite composite56 = composite29.addBytes(byteArray54);
        java.nio.ByteBuffer byteBuffer57 = composite56.serializeToByteBuffer();
        compositeType19.validate(byteBuffer57);
        boolean boolean59 = comparators.Composite.validate(byteBuffer57);
        boolean boolean60 = comparators.Composite.validate(byteBuffer57);
        comparators.Composite composite61 = compositeSerializer0.fromByteBuffer(byteBuffer57);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        java.util.List<java.lang.Object> objList68 = comparators.Composite.deserialize(byteArray66);
        byte[] byteArray69 = comparators.Composite.serialize(objList68);
        java.util.stream.Stream<java.lang.Object> objStream70 = objList68.parallelStream();
        byte[] byteArray71 = comparators.Composite.serialize(objList68);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = composite61.retainAll((java.util.Collection<java.lang.Object>) objList68);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(composite56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(objList68);
        org.junit.Assert.assertNull(byteArray69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNull(byteArray71);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        boolean boolean15 = composite9.isEmpty();
        java.lang.String str16 = composite9.toString();
        int int17 = composite9.size();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray14);
        byte[] byteArray17 = comparators.Composite.serialize(objList16);
        java.util.stream.Stream<java.lang.Object> objStream18 = objList16.parallelStream();
        comparators.Composite composite19 = new comparators.Composite(objList16);
        java.lang.Object[] objArray20 = composite19.toArray();
        int int21 = composite19.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream22 = composite19.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream23 = composite19.parallelStream();
        int int24 = composite19.startOffset;
        int int25 = comparators.Composite.compare(composite9, composite19);
        composite9.clear();
        int int27 = composite9.size();
        int int28 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite9.parallelStream();
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.util.RandomAccess[] randomAccessArray40 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray41 = composite39.toArray(randomAccessArray40);
        comparators.Composite composite43 = composite39.addLong((long) 67);
        byte[] byteArray44 = composite43.serialize();
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray44);
        comparators.Composite composite46 = new comparators.Composite(objList45);
        boolean boolean47 = composite9.containsAll((java.util.Collection<java.lang.Object>) objList45);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(randomAccessArray40);
        org.junit.Assert.assertNotNull(randomAccessArray41);
        org.junit.Assert.assertNotNull(composite43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        byte[] byteArray20 = comparators.Composite.serialize(objList18);
        byte[] byteArray21 = compositeListSerializer0.toBytes(objList18);
        byte[] byteArray22 = null;
        java.util.List<java.lang.Object> objList23 = compositeListSerializer0.fromBytes(byteArray22);
        comparators.Composite composite24 = new comparators.Composite(objList23);
        comparators.hector.CompositeListSerializer compositeListSerializer25 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType26 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray27 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList28 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28, byteBufferArray27);
        java.lang.String str30 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator31 = compositeType26.indexComparator;
        comparators.CompositeType compositeType32 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray33 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList34 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34, byteBufferArray33);
        java.lang.String str36 = compositeType32.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator37 = compositeType26.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType32);
        comparators.CompositeType compositeType38 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray39 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList40 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList40, byteBufferArray39);
        java.lang.String str42 = compositeType38.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList40);
        java.lang.String str43 = compositeType32.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList40);
        java.util.List<java.util.List<java.lang.Object>> objListList44 = compositeListSerializer25.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList40);
        int int46 = compositeListSerializer25.computeInitialHashSize(9);
        byte[] byteArray50 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray51 = new byte[] {};
        int int52 = comparators.Composite.compare(byteArray50, byteArray51);
        java.util.List<java.lang.Object> objList53 = comparators.Composite.deserialize(byteArray51);
        byte[] byteArray54 = comparators.Composite.serialize(objList53);
        java.util.stream.Stream<java.lang.Object> objStream55 = objList53.parallelStream();
        comparators.Composite composite56 = new comparators.Composite(objList53);
        byte[] byteArray57 = compositeListSerializer25.toBytes(objList53);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray62 = new byte[] {};
        int int63 = comparators.Composite.compare(byteArray61, byteArray62);
        java.util.List<java.lang.Object> objList64 = comparators.Composite.deserialize(byteArray62);
        byte[] byteArray65 = comparators.Composite.serialize(objList64);
        java.util.stream.Stream<java.lang.Object> objStream66 = objList64.parallelStream();
        comparators.Composite composite67 = new comparators.Composite(objList64);
        java.util.RandomAccess[] randomAccessArray68 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray69 = composite67.toArray(randomAccessArray68);
        comparators.Composite composite71 = composite67.addLong((long) 67);
        byte[] byteArray72 = composite71.serialize();
        java.util.List<java.lang.Object> objList73 = comparators.Composite.deserialize(byteArray72);
        java.nio.ByteBuffer byteBuffer74 = compositeListSerializer25.toByteBuffer(objList73);
        comparators.Composite composite75 = new comparators.Composite(byteBuffer74);
        composite75.clear();
        comparators.Composite composite78 = composite75.addLong((long) 35);
        comparators.hector.CompositeListSerializer compositeListSerializer79 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray84 = new byte[] {};
        int int85 = comparators.Composite.compare(byteArray83, byteArray84);
        java.util.List<java.lang.Object> objList86 = comparators.Composite.deserialize(byteArray84);
        byte[] byteArray87 = comparators.Composite.serialize(objList86);
        java.util.stream.Stream<java.lang.Object> objStream88 = objList86.parallelStream();
        comparators.Composite composite89 = new comparators.Composite(objList86);
        byte[] byteArray90 = compositeListSerializer79.toBytes(objList86);
        byte[] byteArray91 = comparators.Composite.serialize(objList86);
        comparators.Composite composite92 = new comparators.Composite(objList86);
        boolean boolean93 = composite75.containsAll((java.util.Collection<java.lang.Object>) objList86);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = composite24.removeAll((java.util.Collection<java.lang.Object>) objList86);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNotNull(compositeType26);
        org.junit.Assert.assertNotNull(byteBufferArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(indexInfoComparator31);
        org.junit.Assert.assertNotNull(compositeType32);
        org.junit.Assert.assertNotNull(byteBufferArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteBufferComparator37);
        org.junit.Assert.assertNotNull(compositeType38);
        org.junit.Assert.assertNotNull(byteBufferArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(objListList44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 13 + "'", int46 == 13);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(objList53);
        org.junit.Assert.assertNull(byteArray54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(objList64);
        org.junit.Assert.assertNull(byteArray65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertNotNull(randomAccessArray68);
        org.junit.Assert.assertNotNull(randomAccessArray69);
        org.junit.Assert.assertNotNull(composite71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList73);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(objList86);
        org.junit.Assert.assertNull(byteArray87);
        org.junit.Assert.assertNotNull(objStream88);
        org.junit.Assert.assertNull(byteArray90);
        org.junit.Assert.assertNull(byteArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        comparators.hector.CompositeListSerializer compositeListSerializer1 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType2 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray3 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList4 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList4, byteBufferArray3);
        java.lang.String str6 = compositeType2.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList4);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator7 = compositeType2.indexComparator;
        comparators.CompositeType compositeType8 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray9 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList10 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList10, byteBufferArray9);
        java.lang.String str12 = compositeType8.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList10);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = compositeType2.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType8);
        comparators.CompositeType compositeType14 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray15 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList16 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16, byteBufferArray15);
        java.lang.String str18 = compositeType14.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16);
        java.lang.String str19 = compositeType8.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16);
        java.util.List<java.util.List<java.lang.Object>> objListList20 = compositeListSerializer1.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList16);
        int int22 = compositeListSerializer1.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer23 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType24 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray25 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList26 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList26, byteBufferArray25);
        java.lang.String str28 = compositeType24.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList26);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator29 = compositeType24.indexComparator;
        comparators.CompositeType compositeType30 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray31 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList32 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32, byteBufferArray31);
        java.lang.String str34 = compositeType30.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator35 = compositeType24.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType30);
        comparators.CompositeType compositeType36 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray37 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList38 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38, byteBufferArray37);
        java.lang.String str40 = compositeType36.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38);
        java.lang.String str41 = compositeType30.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38);
        java.util.List<java.util.List<java.lang.Object>> objListList42 = compositeListSerializer23.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList38);
        java.util.List<java.nio.ByteBuffer> byteBufferList43 = compositeListSerializer1.toBytesList(objListList42);
        java.lang.String str44 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        comparators.CompositeType compositeType45 = comparators.CompositeType.instance;
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        java.util.List<java.lang.Object> objList52 = comparators.Composite.deserialize(byteArray50);
        byte[] byteArray53 = comparators.Composite.serialize(objList52);
        java.util.stream.Stream<java.lang.Object> objStream54 = objList52.parallelStream();
        comparators.Composite composite55 = new comparators.Composite(objList52);
        java.lang.Object[] objArray56 = composite55.toArray();
        int int57 = composite55.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream58 = composite55.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream59 = composite55.parallelStream();
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(byteArray64);
        byte[] byteArray67 = comparators.Composite.serialize(objList66);
        java.util.stream.Stream<java.lang.Object> objStream68 = objList66.parallelStream();
        comparators.Composite composite69 = new comparators.Composite(objList66);
        java.lang.Object[] objArray70 = composite69.toArray();
        int int71 = composite69.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream72 = composite69.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream73 = composite69.parallelStream();
        int int74 = composite69.startOffset;
        int int75 = composite55.compareTo(composite69);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        comparators.Composite composite82 = composite55.addBytes(byteArray80);
        java.nio.ByteBuffer byteBuffer83 = composite82.serializeToByteBuffer();
        compositeType45.validate(byteBuffer83);
        boolean boolean85 = comparators.Composite.validate(byteBuffer83);
        comparators.Composite composite86 = new comparators.Composite(byteBuffer83);
        boolean boolean87 = comparators.Composite.validate(byteBuffer83);
        compositeType0.validate(byteBuffer83);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator89 = compositeType0.getReverseComparator();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(compositeType2);
        org.junit.Assert.assertNotNull(byteBufferArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(indexInfoComparator7);
        org.junit.Assert.assertNotNull(compositeType8);
        org.junit.Assert.assertNotNull(byteBufferArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteBufferComparator13);
        org.junit.Assert.assertNotNull(compositeType14);
        org.junit.Assert.assertNotNull(byteBufferArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(objListList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertNotNull(compositeType24);
        org.junit.Assert.assertNotNull(byteBufferArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(indexInfoComparator29);
        org.junit.Assert.assertNotNull(compositeType30);
        org.junit.Assert.assertNotNull(byteBufferArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteBufferComparator35);
        org.junit.Assert.assertNotNull(compositeType36);
        org.junit.Assert.assertNotNull(byteBufferArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(objListList42);
        org.junit.Assert.assertNotNull(byteBufferList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(compositeType45);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(objList52);
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(objList66);
        org.junit.Assert.assertNull(byteArray67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(composite82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(byteBufferComparator89);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        boolean boolean7 = comparators.Composite.validate(5, byteArray4);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        boolean boolean19 = comparators.Composite.validate((int) ' ', byteArray16, true);
        boolean boolean20 = composite10.contains((java.lang.Object) boolean19);
        java.util.Spliterator<java.lang.Object> objSpliterator21 = composite10.spliterator();
        comparators.Composite composite23 = composite10.addUTF8("Placeholder(1)");
        byte[] byteArray24 = composite23.bytes;
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray29 = new byte[] {};
        int int30 = comparators.Composite.compare(byteArray28, byteArray29);
        java.util.List<java.lang.Object> objList31 = comparators.Composite.deserialize(byteArray29);
        byte[] byteArray32 = comparators.Composite.serialize(objList31);
        java.util.stream.Stream<java.lang.Object> objStream33 = objList31.parallelStream();
        comparators.Composite composite34 = new comparators.Composite(objList31);
        java.util.RandomAccess[] randomAccessArray35 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray36 = composite34.toArray(randomAccessArray35);
        comparators.Composite composite38 = composite34.addUTF8("UTF-8");
        comparators.Composite composite40 = composite34.addBool(true);
        java.lang.Object obj41 = null;
        boolean boolean42 = composite40.equals(obj41);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray49 = new byte[] {};
        int int50 = comparators.Composite.compare(byteArray48, byteArray49);
        boolean boolean52 = comparators.Composite.validate((int) ' ', byteArray49, true);
        boolean boolean53 = comparators.Composite.isValidType((java.lang.Object) byteArray49);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        boolean boolean63 = comparators.Composite.validate((int) ' ', byteArray60, true);
        boolean boolean64 = comparators.Composite.validate(100, byteArray60);
        int int65 = comparators.Composite.compare(byteArray49, byteArray60);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator66 = composite23.new CompositeTypeIterator(composite40, (int) (short) 1, byteArray49);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList67 = comparators.Composite.deserialize((int) (byte) -1, byteArray49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objSpliterator21);
        org.junit.Assert.assertNotNull(composite23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(objList31);
        org.junit.Assert.assertNull(byteArray32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(randomAccessArray35);
        org.junit.Assert.assertNotNull(randomAccessArray36);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(composite40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        byte[] byteArray68 = composite65.bytes;
        int int69 = composite65.size();
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray75 = new byte[] {};
        int int76 = comparators.Composite.compare(byteArray74, byteArray75);
        java.util.List<java.lang.Object> objList77 = comparators.Composite.deserialize(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray82 = new byte[] {};
        int int83 = comparators.Composite.compare(byteArray81, byteArray82);
        java.util.List<java.lang.Object> objList84 = comparators.Composite.deserialize(byteArray82);
        byte[] byteArray85 = comparators.Composite.serialize(objList84);
        java.util.stream.Stream<java.lang.Object> objStream86 = objList84.parallelStream();
        comparators.Composite composite87 = new comparators.Composite(objList84);
        java.util.RandomAccess[] randomAccessArray88 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray89 = composite87.toArray(randomAccessArray88);
        comparators.Composite composite91 = composite87.addLong((long) 67);
        byte[] byteArray92 = composite91.serialize();
        java.util.List<java.lang.Object> objList93 = comparators.Composite.deserialize(byteArray92);
        int int94 = comparators.Composite.compare(byteArray75, byteArray92);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator95 = composite17.new CompositeTypeIterator(composite65, 255, byteArray92);
        byte[] byteArray96 = compositeTypeIterator95.bytes;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNull(byteArray68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(objList77);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(objList84);
        org.junit.Assert.assertNull(byteArray85);
        org.junit.Assert.assertNotNull(objStream86);
        org.junit.Assert.assertNotNull(randomAccessArray88);
        org.junit.Assert.assertNotNull(randomAccessArray89);
        org.junit.Assert.assertNotNull(composite91);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.len = 58;
        byte[] byteArray88 = compositeTypeIterator80.bytes;
        boolean boolean89 = compositeTypeIterator80.hasNext();
        compositeTypeIterator80.offset = (byte) -1;
        compositeTypeIterator80.len = 97;
        compositeTypeIterator80.type = (short) 100;
        int int96 = compositeTypeIterator80.type;
        byte[] byteArray97 = compositeTypeIterator80.bytes;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = compositeTypeIterator80.hasNext();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 100 + "'", int96 == 100);
        org.junit.Assert.assertNotNull(byteArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray97), "[]");
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.util.RandomAccess[] randomAccessArray11 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray12 = composite10.toArray(randomAccessArray11);
        comparators.Composite composite14 = composite10.addLong((long) 67);
        byte[] byteArray15 = composite14.serialize();
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray15);
        comparators.Composite composite17 = new comparators.Composite(byteArray15);
        comparators.Composite composite18 = compositeSerializer0.fromBytes(byteArray15);
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray32 = new byte[] {};
        int int33 = comparators.Composite.compare(byteArray31, byteArray32);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray32);
        byte[] byteArray35 = comparators.Composite.serialize(objList34);
        java.util.stream.Stream<java.lang.Object> objStream36 = objList34.parallelStream();
        comparators.Composite composite37 = new comparators.Composite(objList34);
        java.util.RandomAccess[] randomAccessArray38 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray39 = composite37.toArray(randomAccessArray38);
        comparators.Composite composite41 = composite37.addLong((long) 67);
        byte[] byteArray42 = composite41.serialize();
        java.util.List<java.lang.Object> objList43 = comparators.Composite.deserialize(byteArray42);
        int int44 = comparators.Composite.compare(byteArray25, byteArray42);
        comparators.hector.CompositeSerializer compositeSerializer45 = new comparators.hector.CompositeSerializer();
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        java.util.List<java.lang.Object> objList52 = comparators.Composite.deserialize(byteArray50);
        byte[] byteArray53 = comparators.Composite.serialize(objList52);
        java.util.stream.Stream<java.lang.Object> objStream54 = objList52.parallelStream();
        comparators.Composite composite55 = new comparators.Composite(objList52);
        java.lang.Object[] objArray56 = composite55.toArray();
        int int57 = composite55.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream58 = composite55.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream59 = composite55.parallelStream();
        comparators.Composite composite61 = composite55.addBool(true);
        java.io.DataOutputStream dataOutputStream62 = composite55.out;
        byte[] byteArray63 = compositeSerializer45.toBytes(composite55);
        int int64 = comparators.Composite.compare(byteArray42, byteArray63);
        boolean boolean66 = comparators.Composite.validate(67, byteArray63, true);
        boolean boolean67 = comparators.Composite.validate(13, byteArray63);
        comparators.Composite composite68 = compositeSerializer0.fromBytes(byteArray63);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        java.util.List<java.lang.Object> objList75 = comparators.Composite.deserialize(byteArray73);
        byte[] byteArray76 = comparators.Composite.serialize(objList75);
        java.util.stream.Stream<java.lang.Object> objStream77 = objList75.parallelStream();
        comparators.Composite composite78 = new comparators.Composite(objList75);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray84 = new byte[] {};
        int int85 = comparators.Composite.compare(byteArray83, byteArray84);
        boolean boolean87 = comparators.Composite.validate((int) ' ', byteArray84, true);
        boolean boolean88 = composite78.contains((java.lang.Object) boolean87);
        java.util.Spliterator<java.lang.Object> objSpliterator89 = composite78.spliterator();
        byte[] byteArray90 = composite78.bytes;
        comparators.Composite composite92 = composite78.addLong((long) 5);
        int int93 = composite92.size();
        byte[] byteArray94 = compositeSerializer0.toBytes(composite92);
        int int96 = compositeSerializer0.computeInitialHashSize((int) (byte) 100);
        int int98 = compositeSerializer0.computeInitialHashSize(0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(randomAccessArray12);
        org.junit.Assert.assertNotNull(composite14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(randomAccessArray38);
        org.junit.Assert.assertNotNull(randomAccessArray39);
        org.junit.Assert.assertNotNull(composite41);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(objList52);
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertNotNull(dataOutputStream62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(composite68);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(objList75);
        org.junit.Assert.assertNull(byteArray76);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(objSpliterator89);
        org.junit.Assert.assertNull(byteArray90);
        org.junit.Assert.assertNotNull(composite92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 5, 0]");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 134 + "'", int96 == 134);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray38 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray39 = composite9.toArray(compositeListSerializerArray38);
        comparators.Composite composite40 = new comparators.Composite((java.lang.Object[]) compositeListSerializerArray38);
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.nio.ByteBuffer byteBuffer79 = composite78.serializeToByteBuffer();
        compositeType41.validate(byteBuffer79);
        boolean boolean81 = comparators.Composite.validate(byteBuffer79);
        comparators.Composite composite82 = new comparators.Composite(byteBuffer79);
        comparators.Composite composite83 = new comparators.Composite(byteBuffer79);
        int int84 = comparators.Composite.compare(composite40, composite83);
        composite40.clear();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray38);
        org.junit.Assert.assertNotNull(compositeListSerializerArray39);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.offset = 100;
        comparators.Composite composite88 = compositeTypeIterator80.collection;
        compositeTypeIterator80.type = (byte) 1;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertNotNull(composite88);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        comparators.CompositeType compositeType19 = comparators.CompositeType.instance;
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        int int48 = composite43.startOffset;
        int int49 = composite29.compareTo(composite43);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        comparators.Composite composite56 = composite29.addBytes(byteArray54);
        java.nio.ByteBuffer byteBuffer57 = composite56.serializeToByteBuffer();
        compositeType19.validate(byteBuffer57);
        boolean boolean59 = comparators.Composite.validate(byteBuffer57);
        boolean boolean60 = comparators.Composite.validate(byteBuffer57);
        comparators.Composite composite61 = compositeSerializer0.fromByteBuffer(byteBuffer57);
        int int63 = compositeSerializer0.computeInitialHashSize(8);
        comparators.Composite composite64 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer65 = compositeSerializer0.toByteBuffer(composite64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(composite56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 11 + "'", int63 == 11);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.lang.String str17 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite42.startOffset;
        int int48 = composite28.compareTo(composite42);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        comparators.Composite composite55 = composite28.addBytes(byteArray53);
        java.nio.ByteBuffer byteBuffer56 = composite55.serializeToByteBuffer();
        compositeType18.validate(byteBuffer56);
        java.lang.String str58 = compositeType6.getString(byteBuffer56);
        comparators.Composite composite59 = new comparators.Composite(byteBuffer56);
        java.util.Iterator<java.lang.Object> objItor60 = composite59.iterator();
        comparators.Composite.Placeholder placeholder61 = comparators.Composite.MATCH_MAXIMUM;
        int int62 = placeholder61.type;
        placeholder61.type = 6;
        boolean boolean65 = composite59.contains((java.lang.Object) placeholder61);
        boolean boolean66 = composite59.isEmpty();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(objItor60);
        org.junit.Assert.assertNotNull(placeholder61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        comparators.Composite composite36 = composite9.addBytes(byteArray34);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray41 = new byte[] {};
        int int42 = comparators.Composite.compare(byteArray40, byteArray41);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        int int49 = comparators.Composite.compare(byteArray40, byteArray47);
        composite9.bytes = byteArray47;
        java.lang.Object[] objArray51 = composite9.toArray();
        java.util.UUID uUID52 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite53 = composite9.addLexicalUUID(uUID52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[[]]");
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        byte[] byteArray2 = null;
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray8 = new byte[] {};
        int int9 = comparators.Composite.compare(byteArray7, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        int int16 = comparators.Composite.compare(byteArray7, byteArray14);
        int int17 = comparators.Composite.compare((int) (byte) 1, byteArray2, 10, byteArray7);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        int int30 = comparators.Composite.compare(byteArray21, byteArray28);
        java.util.List<java.lang.Object> objList31 = comparators.Composite.deserialize(byteArray28);
        int int32 = comparators.Composite.compare(byteArray7, byteArray28);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray28);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray28);
        boolean boolean35 = comparators.Composite.validate((int) (byte) 0, byteArray28);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(objList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MINIMUM;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        placeholder0.type = 'a';
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        int int8 = placeholder0.type;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (byte) -1;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray8 = new byte[] {};
        int int9 = comparators.Composite.compare(byteArray7, byteArray8);
        java.util.List<java.lang.Object> objList10 = comparators.Composite.deserialize(byteArray8);
        byte[] byteArray11 = comparators.Composite.serialize(objList10);
        java.util.stream.Stream<java.lang.Object> objStream12 = objList10.parallelStream();
        comparators.Composite composite13 = new comparators.Composite(objList10);
        java.lang.Object[] objArray14 = composite13.toArray();
        int int15 = composite13.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream16 = composite13.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream17 = composite13.parallelStream();
        int int18 = composite13.startOffset;
        int int19 = composite13.startOffset;
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        boolean boolean38 = comparators.Composite.validate((int) ' ', byteArray35, true);
        boolean boolean39 = composite29.contains((java.lang.Object) boolean38);
        java.util.Spliterator<java.lang.Object> objSpliterator40 = composite29.spliterator();
        boolean boolean41 = composite13.containsAll((java.util.Collection<java.lang.Object>) composite29);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray42 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray43 = composite13.toArray(compositeListSerializerArray42);
        boolean boolean44 = placeholder0.equals((java.lang.Object) composite13);
        byte[] byteArray48 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray49 = new byte[] {};
        int int50 = comparators.Composite.compare(byteArray48, byteArray49);
        java.util.List<java.lang.Object> objList51 = comparators.Composite.deserialize(byteArray49);
        byte[] byteArray52 = comparators.Composite.serialize(objList51);
        java.util.stream.Stream<java.lang.Object> objStream53 = objList51.parallelStream();
        comparators.Composite composite54 = new comparators.Composite(objList51);
        java.util.RandomAccess[] randomAccessArray55 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray56 = composite54.toArray(randomAccessArray55);
        comparators.Composite composite58 = composite54.addUTF8("UTF-8");
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(byteArray64);
        byte[] byteArray67 = comparators.Composite.serialize(objList66);
        java.util.stream.Stream<java.lang.Object> objStream68 = objList66.parallelStream();
        comparators.Composite composite69 = new comparators.Composite(objList66);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray75 = new byte[] {};
        int int76 = comparators.Composite.compare(byteArray74, byteArray75);
        boolean boolean78 = comparators.Composite.validate((int) ' ', byteArray75, true);
        boolean boolean79 = composite69.contains((java.lang.Object) boolean78);
        java.util.stream.Stream<java.lang.Object> objStream80 = composite69.parallelStream();
        composite69.startOffset = 8;
        comparators.Composite composite84 = composite69.addAscii("hi!");
        comparators.Composite composite86 = composite69.addLong((long) 4);
        int int87 = composite86.size();
        java.lang.Object[] objArray88 = composite86.toArray();
        byte[] byteArray89 = comparators.Composite.serialize(objArray88);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator90 = composite13.new CompositeTypeIterator(composite54, (int) (byte) 1, byteArray89);
        compositeTypeIterator90.start = (byte) 100;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(objList10);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(objStream17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objSpliterator40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray42);
        org.junit.Assert.assertNotNull(compositeListSerializerArray43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(objList51);
        org.junit.Assert.assertNull(byteArray52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(randomAccessArray55);
        org.junit.Assert.assertNotNull(randomAccessArray56);
        org.junit.Assert.assertNotNull(composite58);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(objList66);
        org.junit.Assert.assertNull(byteArray67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(objStream80);
        org.junit.Assert.assertNotNull(composite84);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[hi!, 4]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[hi!, 4]");
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[67, 77, 80, 1, 8, 0, 3, 104, 105, 33, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0]");
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        byte[] byteArray3 = null;
        byte[] byteArray8 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray9 = new byte[] {};
        int int10 = comparators.Composite.compare(byteArray8, byteArray9);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        int int17 = comparators.Composite.compare(byteArray8, byteArray15);
        int int18 = comparators.Composite.compare((int) (byte) 1, byteArray3, 10, byteArray8);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        boolean boolean27 = comparators.Composite.validate(0, byteArray24);
        byte[] byteArray28 = null;
        int int29 = comparators.Composite.compare(byteArray24, byteArray28);
        int int30 = comparators.Composite.compare(byteArray8, byteArray24);
        boolean boolean32 = comparators.Composite.validate((int) (short) 1, byteArray24, true);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(0, byteArray24);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray24);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNotNull(objList34);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        boolean boolean8 = comparators.Composite.validate(0, byteArray5);
        byte[] byteArray9 = null;
        int int10 = comparators.Composite.compare(byteArray5, byteArray9);
        comparators.Composite composite11 = new comparators.Composite(byteArray9);
        comparators.hector.CompositeSerializer compositeSerializer12 = new comparators.hector.CompositeSerializer();
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.util.RandomAccess[] randomAccessArray23 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray24 = composite22.toArray(randomAccessArray23);
        comparators.Composite composite26 = composite22.addLong((long) 67);
        byte[] byteArray27 = composite26.serialize();
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray27);
        comparators.Composite composite29 = new comparators.Composite(byteArray27);
        comparators.Composite composite30 = compositeSerializer12.fromBytes(byteArray27);
        comparators.hector.CompositeSerializer compositeSerializer31 = new comparators.hector.CompositeSerializer();
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray36);
        byte[] byteArray39 = comparators.Composite.serialize(objList38);
        java.util.stream.Stream<java.lang.Object> objStream40 = objList38.parallelStream();
        comparators.Composite composite41 = new comparators.Composite(objList38);
        java.lang.Object[] objArray42 = composite41.toArray();
        int int43 = composite41.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream44 = composite41.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream45 = composite41.parallelStream();
        comparators.Composite composite47 = composite41.addBool(true);
        java.io.DataOutputStream dataOutputStream48 = composite41.out;
        byte[] byteArray49 = compositeSerializer31.toBytes(composite41);
        comparators.CompositeType compositeType50 = comparators.CompositeType.instance;
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        java.util.List<java.lang.Object> objList57 = comparators.Composite.deserialize(byteArray55);
        byte[] byteArray58 = comparators.Composite.serialize(objList57);
        java.util.stream.Stream<java.lang.Object> objStream59 = objList57.parallelStream();
        comparators.Composite composite60 = new comparators.Composite(objList57);
        java.lang.Object[] objArray61 = composite60.toArray();
        int int62 = composite60.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream63 = composite60.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream64 = composite60.parallelStream();
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        java.util.List<java.lang.Object> objList71 = comparators.Composite.deserialize(byteArray69);
        byte[] byteArray72 = comparators.Composite.serialize(objList71);
        java.util.stream.Stream<java.lang.Object> objStream73 = objList71.parallelStream();
        comparators.Composite composite74 = new comparators.Composite(objList71);
        java.lang.Object[] objArray75 = composite74.toArray();
        int int76 = composite74.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream77 = composite74.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream78 = composite74.parallelStream();
        int int79 = composite74.startOffset;
        int int80 = composite60.compareTo(composite74);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray85 = new byte[] {};
        int int86 = comparators.Composite.compare(byteArray84, byteArray85);
        comparators.Composite composite87 = composite60.addBytes(byteArray85);
        java.nio.ByteBuffer byteBuffer88 = composite87.serializeToByteBuffer();
        compositeType50.validate(byteBuffer88);
        boolean boolean90 = comparators.Composite.validate(byteBuffer88);
        boolean boolean91 = comparators.Composite.validate(byteBuffer88);
        comparators.Composite composite92 = compositeSerializer31.fromByteBuffer(byteBuffer88);
        byte[] byteArray93 = compositeSerializer12.toBytes(composite92);
        java.util.Spliterator<java.lang.Object> objSpliterator94 = composite92.spliterator();
        boolean boolean95 = composite92.isEmpty();
        byte[] byteArray96 = composite92.serialize();
        boolean boolean97 = composite11.addAll((java.util.Collection<java.lang.Object>) composite92);
        java.util.UUID uUID98 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite99 = composite92.addLexicalUUID(uUID98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(randomAccessArray23);
        org.junit.Assert.assertNotNull(randomAccessArray24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(composite47);
        org.junit.Assert.assertNotNull(dataOutputStream48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType50);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(objList57);
        org.junit.Assert.assertNull(byteArray58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(objList71);
        org.junit.Assert.assertNull(byteArray72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(composite87);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(composite92);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[67, 77, 80, 1, 9, 0, 0, 0]");
        org.junit.Assert.assertNotNull(objSpliterator94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[67, 77, 80, 1, 9, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        comparators.Composite composite22 = composite9.addUTF8("Placeholder(1)");
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        java.util.List<java.lang.Object> objList29 = comparators.Composite.deserialize(byteArray27);
        byte[] byteArray30 = comparators.Composite.serialize(objList29);
        java.util.stream.Stream<java.lang.Object> objStream31 = objList29.parallelStream();
        comparators.Composite composite32 = new comparators.Composite(objList29);
        java.util.RandomAccess[] randomAccessArray33 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray34 = composite32.toArray(randomAccessArray33);
        comparators.Composite composite36 = composite32.addUTF8("UTF-8");
        comparators.Composite composite38 = composite32.addBool(true);
        comparators.Composite composite40 = composite38.addLong((long) (byte) -1);
        int int41 = comparators.Composite.compare(composite9, composite40);
        comparators.Composite composite42 = new comparators.Composite();
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.lang.Object[] objArray53 = composite52.toArray();
        int int54 = composite52.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream55 = composite52.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream56 = composite52.parallelStream();
        int int57 = composite42.compareTo(composite52);
        int int58 = composite42.size();
        byte[] byteArray59 = composite42.serialize();
        java.util.stream.Stream<java.lang.Object> objStream60 = composite42.stream();
        comparators.Composite composite62 = composite42.addUTF8("Placeholder(32)");
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean63 = composite9.remove((java.lang.Object) composite62);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNotNull(composite22);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(objList29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(randomAccessArray33);
        org.junit.Assert.assertNotNull(randomAccessArray34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(composite40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-5) + "'", int41 == (-5));
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNull(byteArray59);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(composite62);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        byte[] byteArray21 = composite9.bytes;
        int int22 = composite9.size();
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        java.util.List<java.lang.Object> objList29 = comparators.Composite.deserialize(byteArray27);
        byte[] byteArray30 = comparators.Composite.serialize(objList29);
        java.util.stream.Stream<java.lang.Object> objStream31 = objList29.parallelStream();
        comparators.Composite composite32 = new comparators.Composite(objList29);
        java.lang.Object[] objArray33 = composite32.toArray();
        comparators.Composite composite34 = new comparators.Composite();
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.lang.Object[] objArray45 = composite44.toArray();
        int int46 = composite44.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream47 = composite44.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream48 = composite44.parallelStream();
        int int49 = composite34.compareTo(composite44);
        comparators.hector.CompositeListSerializer compositeListSerializer50 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType51 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray52 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList53 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53, byteBufferArray52);
        java.lang.String str55 = compositeType51.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator56 = compositeType51.indexComparator;
        comparators.CompositeType compositeType57 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray58 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList59 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList59, byteBufferArray58);
        java.lang.String str61 = compositeType57.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList59);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator62 = compositeType51.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType57);
        comparators.CompositeType compositeType63 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray64 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList65 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList65, byteBufferArray64);
        java.lang.String str67 = compositeType63.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList65);
        java.lang.String str68 = compositeType57.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList65);
        java.util.List<java.util.List<java.lang.Object>> objListList69 = compositeListSerializer50.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList65);
        comparators.CompositeType compositeType70 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator71 = compositeType70.indexComparator;
        comparators.CompositeType compositeType72 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator73 = compositeType70.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType72);
        java.lang.Object[] objArray74 = new java.lang.Object[] { compositeListSerializer50, compositeType72 };
        java.lang.Object[][] objArray75 = new java.lang.Object[][] { objArray74 };
        java.lang.Object[][] objArray76 = composite34.toArray(objArray75);
        java.lang.Object[][] objArray77 = composite32.toArray(objArray76);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray84 = new byte[] {};
        int int85 = comparators.Composite.compare(byteArray83, byteArray84);
        java.util.List<java.lang.Object> objList86 = comparators.Composite.deserialize(byteArray84);
        boolean boolean87 = comparators.Composite.validate(90, byteArray84);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator88 = composite9.new CompositeTypeIterator(composite32, 10, byteArray84);
        comparators.Composite composite89 = compositeTypeIterator88.collection;
        int int90 = composite89.size();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(objList29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(compositeType51);
        org.junit.Assert.assertNotNull(byteBufferArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(indexInfoComparator56);
        org.junit.Assert.assertNotNull(compositeType57);
        org.junit.Assert.assertNotNull(byteBufferArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(byteBufferComparator62);
        org.junit.Assert.assertNotNull(compositeType63);
        org.junit.Assert.assertNotNull(byteBufferArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(objListList69);
        org.junit.Assert.assertNotNull(indexInfoComparator71);
        org.junit.Assert.assertNotNull(compositeType72);
        org.junit.Assert.assertNotNull(byteBufferComparator73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(objList86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(composite89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType7.validate(byteBuffer50);
        java.lang.String str52 = compositeType0.getString(byteBuffer50);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator53 = compositeType0.reversed();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator54 = compositeType0.indexComparator;
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteBufferComparator53);
        org.junit.Assert.assertNotNull(indexInfoComparator54);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        comparators.hector.CompositeListSerializer compositeListSerializer20 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray28 = comparators.Composite.serialize(objList27);
        java.util.stream.Stream<java.lang.Object> objStream29 = objList27.parallelStream();
        comparators.Composite composite30 = new comparators.Composite(objList27);
        byte[] byteArray31 = compositeListSerializer20.toBytes(objList27);
        int int33 = compositeListSerializer20.computeInitialHashSize((int) ' ');
        comparators.hector.CompositeListSerializer compositeListSerializer34 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator40 = compositeType35.indexComparator;
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray42 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList43 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43, byteBufferArray42);
        java.lang.String str45 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator46 = compositeType35.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType41);
        comparators.CompositeType compositeType47 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray48 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList49 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList49, byteBufferArray48);
        java.lang.String str51 = compositeType47.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList49);
        java.lang.String str52 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList49);
        java.util.List<java.util.List<java.lang.Object>> objListList53 = compositeListSerializer34.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList49);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet54 = compositeListSerializer20.toBytesSet(objListList53);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet55 = compositeListSerializer0.toBytesSet(objListList53);
        java.util.List<java.lang.Object> objList56 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray57 = compositeListSerializer0.toBytes(objList56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 43 + "'", int33 == 43);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(indexInfoComparator40);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteBufferArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteBufferComparator46);
        org.junit.Assert.assertNotNull(compositeType47);
        org.junit.Assert.assertNotNull(byteBufferArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(objListList53);
        org.junit.Assert.assertNotNull(byteBufferSet54);
        org.junit.Assert.assertNotNull(byteBufferSet55);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (byte) -1;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray8 = new byte[] {};
        int int9 = comparators.Composite.compare(byteArray7, byteArray8);
        java.util.List<java.lang.Object> objList10 = comparators.Composite.deserialize(byteArray8);
        byte[] byteArray11 = comparators.Composite.serialize(objList10);
        java.util.stream.Stream<java.lang.Object> objStream12 = objList10.parallelStream();
        comparators.Composite composite13 = new comparators.Composite(objList10);
        java.lang.Object[] objArray14 = composite13.toArray();
        int int15 = composite13.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream16 = composite13.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream17 = composite13.parallelStream();
        int int18 = composite13.startOffset;
        int int19 = composite13.startOffset;
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        boolean boolean38 = comparators.Composite.validate((int) ' ', byteArray35, true);
        boolean boolean39 = composite29.contains((java.lang.Object) boolean38);
        java.util.Spliterator<java.lang.Object> objSpliterator40 = composite29.spliterator();
        boolean boolean41 = composite13.containsAll((java.util.Collection<java.lang.Object>) composite29);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray42 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray43 = composite13.toArray(compositeListSerializerArray42);
        boolean boolean44 = placeholder0.equals((java.lang.Object) composite13);
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        java.util.List<java.lang.Object> objList52 = comparators.Composite.deserialize(byteArray50);
        byte[] byteArray53 = comparators.Composite.serialize(objList52);
        java.util.stream.Stream<java.lang.Object> objStream54 = objList52.parallelStream();
        comparators.Composite composite55 = new comparators.Composite(objList52);
        java.lang.Object[] objArray56 = composite55.toArray();
        int int57 = composite55.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream58 = composite55.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream59 = composite55.parallelStream();
        comparators.Composite composite61 = composite55.addBool(true);
        java.util.Iterator<java.lang.Object> objItor62 = composite55.iterator();
        comparators.Composite composite64 = composite55.addReal((java.lang.Double) 100.0d);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        java.util.List<java.lang.Object> objList71 = comparators.Composite.deserialize(byteArray69);
        byte[] byteArray72 = comparators.Composite.serialize(objList71);
        java.util.stream.Stream<java.lang.Object> objStream73 = objList71.parallelStream();
        comparators.Composite composite74 = new comparators.Composite(objList71);
        java.lang.Object[] objArray75 = composite74.toArray();
        int int76 = composite74.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream77 = composite74.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream78 = composite74.parallelStream();
        int int79 = composite74.startOffset;
        composite74.clear();
        boolean boolean81 = composite64.containsAll((java.util.Collection<java.lang.Object>) composite74);
        comparators.Composite composite83 = composite74.addAscii("hi!");
        java.util.stream.Stream<java.lang.Object> objStream84 = composite83.parallelStream();
        boolean boolean85 = placeholder0.equals((java.lang.Object) objStream84);
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(objList10);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(objStream17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objSpliterator40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray42);
        org.junit.Assert.assertNotNull(compositeListSerializerArray43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(objList52);
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertNotNull(objItor62);
        org.junit.Assert.assertNotNull(composite64);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(objList71);
        org.junit.Assert.assertNull(byteArray72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(composite83);
        org.junit.Assert.assertNotNull(objStream84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        byte[] byteArray21 = composite9.bytes;
        int int22 = composite9.size();
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        java.util.List<java.lang.Object> objList29 = comparators.Composite.deserialize(byteArray27);
        byte[] byteArray30 = comparators.Composite.serialize(objList29);
        java.util.stream.Stream<java.lang.Object> objStream31 = objList29.parallelStream();
        comparators.Composite composite32 = new comparators.Composite(objList29);
        java.lang.Object[] objArray33 = composite32.toArray();
        comparators.Composite composite34 = new comparators.Composite();
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.lang.Object[] objArray45 = composite44.toArray();
        int int46 = composite44.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream47 = composite44.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream48 = composite44.parallelStream();
        int int49 = composite34.compareTo(composite44);
        comparators.hector.CompositeListSerializer compositeListSerializer50 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType51 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray52 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList53 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53, byteBufferArray52);
        java.lang.String str55 = compositeType51.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList53);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator56 = compositeType51.indexComparator;
        comparators.CompositeType compositeType57 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray58 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList59 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList59, byteBufferArray58);
        java.lang.String str61 = compositeType57.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList59);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator62 = compositeType51.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType57);
        comparators.CompositeType compositeType63 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray64 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList65 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList65, byteBufferArray64);
        java.lang.String str67 = compositeType63.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList65);
        java.lang.String str68 = compositeType57.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList65);
        java.util.List<java.util.List<java.lang.Object>> objListList69 = compositeListSerializer50.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList65);
        comparators.CompositeType compositeType70 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator71 = compositeType70.indexComparator;
        comparators.CompositeType compositeType72 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator73 = compositeType70.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType72);
        java.lang.Object[] objArray74 = new java.lang.Object[] { compositeListSerializer50, compositeType72 };
        java.lang.Object[][] objArray75 = new java.lang.Object[][] { objArray74 };
        java.lang.Object[][] objArray76 = composite34.toArray(objArray75);
        java.lang.Object[][] objArray77 = composite32.toArray(objArray76);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray84 = new byte[] {};
        int int85 = comparators.Composite.compare(byteArray83, byteArray84);
        java.util.List<java.lang.Object> objList86 = comparators.Composite.deserialize(byteArray84);
        boolean boolean87 = comparators.Composite.validate(90, byteArray84);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator88 = composite9.new CompositeTypeIterator(composite32, 10, byteArray84);
        java.util.UUID uUID89 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite90 = composite9.addTimeUUID(uUID89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(objList29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(compositeType51);
        org.junit.Assert.assertNotNull(byteBufferArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(indexInfoComparator56);
        org.junit.Assert.assertNotNull(compositeType57);
        org.junit.Assert.assertNotNull(byteBufferArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(byteBufferComparator62);
        org.junit.Assert.assertNotNull(compositeType63);
        org.junit.Assert.assertNotNull(byteBufferArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(objListList69);
        org.junit.Assert.assertNotNull(indexInfoComparator71);
        org.junit.Assert.assertNotNull(compositeType72);
        org.junit.Assert.assertNotNull(byteBufferComparator73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(objList86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        int int81 = compositeTypeIterator80.offset;
        int int82 = compositeTypeIterator80.start;
        int int83 = compositeTypeIterator80.offset;
        compositeTypeIterator80.start = 341;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj86 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 67 + "'", int81 == 67);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 67 + "'", int82 == 67);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 67 + "'", int83 == 67);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        int int1 = placeholder0.type;
        placeholder0.type = 6;
        comparators.CompositeType compositeType4 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray5 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList6 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList6, byteBufferArray5);
        java.lang.String str8 = compositeType4.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList6);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator9 = compositeType4.indexComparator;
        boolean boolean10 = comparators.Composite.isValidType((java.lang.Object) compositeType4);
        comparators.CompositeType compositeType11 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator12 = compositeType11.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = compositeType4.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType11);
        boolean boolean14 = placeholder0.equals((java.lang.Object) byteBufferComparator13);
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
        org.junit.Assert.assertNotNull(compositeType4);
        org.junit.Assert.assertNotNull(byteBufferArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(indexInfoComparator9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(indexInfoComparator12);
        org.junit.Assert.assertNotNull(byteBufferComparator13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType7.validate(byteBuffer50);
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray53 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList54 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54, byteBufferArray53);
        java.lang.String str56 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        org.apache.cassandra.db.IColumn[] iColumnArray57 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList58 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58, iColumnArray57);
        java.lang.String str60 = compositeType52.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58);
        org.apache.cassandra.db.IColumn[] iColumnArray61 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList62 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62, iColumnArray61);
        java.lang.String str64 = compositeType52.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62);
        java.lang.String str65 = compositeType7.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62);
        boolean boolean66 = placeholder0.equals((java.lang.Object) str65);
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        java.lang.String str68 = placeholder0.toString();
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        int int71 = placeholder0.type;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(iColumnArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(iColumnArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Placeholder(6)" + "'", str68, "Placeholder(6)");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 6 + "'", int71 == 6);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray14);
        byte[] byteArray17 = comparators.Composite.serialize(objList16);
        java.util.stream.Stream<java.lang.Object> objStream18 = objList16.parallelStream();
        comparators.Composite composite19 = new comparators.Composite(objList16);
        java.lang.Object[] objArray20 = composite19.toArray();
        int int21 = composite19.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream22 = composite19.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream23 = composite19.parallelStream();
        int int24 = composite19.startOffset;
        int int25 = comparators.Composite.compare(composite9, composite19);
        int int26 = composite19.size();
        comparators.Composite composite28 = composite19.addAscii("Placeholder(58)");
        java.util.stream.BaseStream[] baseStreamArray30 = new java.util.stream.BaseStream[0];
        @SuppressWarnings("unchecked")
        java.util.stream.BaseStream<java.lang.Object, java.util.stream.Stream<java.lang.Object>>[] objBaseStreamArray31 = (java.util.stream.BaseStream<java.lang.Object, java.util.stream.Stream<java.lang.Object>>[]) baseStreamArray30;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.BaseStream<java.lang.Object, java.util.stream.Stream<java.lang.Object>>[] objBaseStreamArray32 = composite28.toArray((java.util.stream.BaseStream<java.lang.Object, java.util.stream.Stream<java.lang.Object>>[]) baseStreamArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(composite28);
        org.junit.Assert.assertNotNull(baseStreamArray30);
        org.junit.Assert.assertNotNull(objBaseStreamArray31);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        comparators.Composite composite17 = composite15.addLong((long) 6);
        byte[] byteArray18 = composite15.serialize();
        boolean boolean19 = comparators.Composite.isValidType((java.lang.Object) composite15);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite15.parallelStream();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 6, 0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.io.ByteArrayOutputStream byteArrayOutputStream18 = composite17.byteStream;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        comparators.Composite composite34 = composite28.addBool(true);
        comparators.Composite composite36 = composite34.addLong((long) 6);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray41 = new byte[] {};
        int int42 = comparators.Composite.compare(byteArray40, byteArray41);
        java.util.List<java.lang.Object> objList43 = comparators.Composite.deserialize(byteArray41);
        byte[] byteArray44 = comparators.Composite.serialize(objList43);
        java.util.stream.Stream<java.lang.Object> objStream45 = objList43.parallelStream();
        comparators.Composite composite46 = new comparators.Composite(objList43);
        java.util.RandomAccess[] randomAccessArray47 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray48 = composite46.toArray(randomAccessArray47);
        comparators.Composite composite50 = composite46.addLong((long) 67);
        byte[] byteArray51 = composite50.serialize();
        comparators.Composite composite52 = composite34.addBytes(byteArray51);
        comparators.Composite composite54 = composite34.addLong((long) (byte) 100);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        java.util.List<java.lang.Object> objList61 = comparators.Composite.deserialize(byteArray59);
        byte[] byteArray62 = comparators.Composite.serialize(objList61);
        java.util.stream.Stream<java.lang.Object> objStream63 = objList61.parallelStream();
        comparators.Composite composite64 = new comparators.Composite(objList61);
        java.lang.Object[] objArray65 = composite64.toArray();
        int int66 = composite64.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream67 = composite64.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream68 = composite64.parallelStream();
        int int69 = composite64.startOffset;
        int int70 = composite64.startOffset;
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray75 = new byte[] {};
        int int76 = comparators.Composite.compare(byteArray74, byteArray75);
        java.util.List<java.lang.Object> objList77 = comparators.Composite.deserialize(byteArray75);
        byte[] byteArray78 = comparators.Composite.serialize(objList77);
        java.util.stream.Stream<java.lang.Object> objStream79 = objList77.parallelStream();
        comparators.Composite composite80 = new comparators.Composite(objList77);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray86 = new byte[] {};
        int int87 = comparators.Composite.compare(byteArray85, byteArray86);
        boolean boolean89 = comparators.Composite.validate((int) ' ', byteArray86, true);
        boolean boolean90 = composite80.contains((java.lang.Object) boolean89);
        java.util.Spliterator<java.lang.Object> objSpliterator91 = composite80.spliterator();
        boolean boolean92 = composite64.containsAll((java.util.Collection<java.lang.Object>) composite80);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray93 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray94 = composite64.toArray(compositeListSerializerArray93);
        comparators.Composite composite96 = composite64.addLong((long) (short) 100);
        boolean boolean97 = composite54.addAll((java.util.Collection<java.lang.Object>) composite96);
        boolean boolean98 = composite17.containsAll((java.util.Collection<java.lang.Object>) composite54);
        boolean boolean99 = composite54.isEmpty();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(byteArrayOutputStream18);
        org.junit.Assert.assertEquals(byteArrayOutputStream18.toString(), "CMP\001\003\000\000\000\000\000\000\000C\002\001\003\000\000\000\000\000\000\000\002\000");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(objList43);
        org.junit.Assert.assertNull(byteArray44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(randomAccessArray47);
        org.junit.Assert.assertNotNull(randomAccessArray48);
        org.junit.Assert.assertNotNull(composite50);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(composite52);
        org.junit.Assert.assertNotNull(composite54);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(objList61);
        org.junit.Assert.assertNull(byteArray62);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(objList77);
        org.junit.Assert.assertNull(byteArray78);
        org.junit.Assert.assertNotNull(objStream79);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(objSpliterator91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray93);
        org.junit.Assert.assertNotNull(compositeListSerializerArray94);
        org.junit.Assert.assertNotNull(composite96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        byte[] byteArray0 = null;
        byte[] byteArray1 = null;
        int int2 = comparators.Composite.compare(byteArray0, byteArray1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        int int13 = composite10.startOffset;
        byte[] byteArray14 = compositeSerializer0.toBytes(composite10);
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        int int41 = composite39.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream42 = composite39.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream43 = composite39.parallelStream();
        int int44 = composite39.startOffset;
        int int45 = composite25.compareTo(composite39);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        comparators.Composite composite52 = composite25.addBytes(byteArray50);
        java.nio.ByteBuffer byteBuffer53 = composite52.serializeToByteBuffer();
        compositeType15.validate(byteBuffer53);
        boolean boolean55 = comparators.Composite.validate(byteBuffer53);
        boolean boolean56 = comparators.Composite.validate(byteBuffer53);
        comparators.Composite composite57 = compositeSerializer0.fromByteBuffer(byteBuffer53);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        boolean boolean67 = comparators.Composite.validate((int) ' ', byteArray64, true);
        boolean boolean68 = comparators.Composite.validate(100, byteArray64);
        java.util.List<java.lang.Object> objList69 = comparators.Composite.deserialize(byteArray64);
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray75 = new byte[] {};
        int int76 = comparators.Composite.compare(byteArray74, byteArray75);
        java.util.List<java.lang.Object> objList77 = comparators.Composite.deserialize(byteArray75);
        boolean boolean78 = comparators.Composite.validate(90, byteArray75);
        int int79 = comparators.Composite.compare(byteArray64, byteArray75);
        comparators.Composite composite80 = compositeSerializer0.fromBytes(byteArray64);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(composite52);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(composite57);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objList69);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(objList77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(composite80);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        byte[] byteArray20 = comparators.Composite.serialize(objList18);
        byte[] byteArray21 = compositeListSerializer0.toBytes(objList18);
        byte[] byteArray22 = null;
        java.util.List<java.lang.Object> objList23 = compositeListSerializer0.fromBytes(byteArray22);
        int int25 = compositeListSerializer0.computeInitialHashSize(77);
        int int27 = compositeListSerializer0.computeInitialHashSize((int) (byte) 100);
        java.util.List<java.util.List<java.lang.Object>> objListList28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.nio.ByteBuffer> byteBufferList29 = compositeListSerializer0.toBytesList(objListList28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 103 + "'", int25 == 103);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 134 + "'", int27 == 134);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.offset;
        int int85 = compositeTypeIterator80.offset;
        boolean boolean86 = compositeTypeIterator80.hasNext();
        int int87 = compositeTypeIterator80.offset;
        compositeTypeIterator80.type = 5;
        compositeTypeIterator80.type = 15;
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 67 + "'", int84 == 67);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 71 + "'", int87 == 71);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        int int13 = composite10.startOffset;
        byte[] byteArray14 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        comparators.Composite composite30 = composite24.addBool(true);
        java.util.Iterator<java.lang.Object> objItor31 = composite24.iterator();
        comparators.Composite composite33 = composite24.addReal((java.lang.Double) 100.0d);
        comparators.Composite composite35 = composite33.addLong((long) '#');
        byte[] byteArray36 = compositeSerializer0.toBytes(composite35);
        comparators.Composite composite38 = composite35.addReal((java.lang.Double) 1.0d);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        boolean boolean57 = comparators.Composite.validate((int) ' ', byteArray54, true);
        boolean boolean58 = composite48.contains((java.lang.Object) boolean57);
        java.util.Spliterator<java.lang.Object> objSpliterator59 = composite48.spliterator();
        byte[] byteArray60 = composite48.bytes;
        int int61 = composite35.compareTo(composite48);
        java.util.stream.Stream<java.lang.Object> objStream62 = composite35.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream63 = composite35.stream();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[67, 77, 80, 1, 2, 1, 0, 4, 64, 89, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 35, 0]");
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objSpliterator59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(objStream63);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        comparators.Composite composite38 = composite11.addBytes(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = composite38.serializeToByteBuffer();
        compositeType1.validate(byteBuffer39);
        boolean boolean41 = comparators.Composite.validate(byteBuffer39);
        comparators.Composite composite42 = new comparators.Composite(byteBuffer39);
        java.nio.ByteBuffer byteBuffer43 = null;
        int int44 = compositeType0.compare(byteBuffer39, byteBuffer43);
        comparators.Composite composite45 = new comparators.Composite(byteBuffer39);
        composite45.startOffset = (short) 0;
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        java.lang.Object[] objArray58 = composite57.toArray();
        int int59 = composite57.startOffset;
        byte[] byteArray60 = composite57.bytes;
        java.io.DataOutputStream dataOutputStream61 = null;
        composite57.out = dataOutputStream61;
        java.io.ByteArrayOutputStream byteArrayOutputStream63 = null;
        composite57.byteStream = byteArrayOutputStream63;
        java.util.Iterator<java.lang.Object> objItor65 = composite57.iterator();
        int int66 = composite57.startOffset;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = composite45.retainAll((java.util.Collection<java.lang.Object>) composite57);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNotNull(objItor65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        byte[] byteArray38 = null;
        comparators.Composite composite39 = new comparators.Composite(byteArray38);
        boolean boolean40 = composite25.containsAll((java.util.Collection<java.lang.Object>) composite39);
        java.lang.CharSequence[] charSequenceArray41 = new java.lang.CharSequence[] {};
        java.lang.CharSequence[] charSequenceArray42 = composite39.toArray(charSequenceArray41);
        byte[] byteArray43 = comparators.Composite.serialize((java.lang.Object[]) charSequenceArray41);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer44 = comparators.Composite.serializeToByteBuffer((java.lang.Object[]) charSequenceArray41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(charSequenceArray41);
        org.junit.Assert.assertNotNull(charSequenceArray42);
        org.junit.Assert.assertNull(byteArray43);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator12 = compositeType0.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType0.indexComparator;
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator20 = compositeType15.indexComparator;
        comparators.CompositeType compositeType21 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray22 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList23 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23, byteBufferArray22);
        java.lang.String str25 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator26 = compositeType15.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType21);
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray28 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList29 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29, byteBufferArray28);
        java.lang.String str31 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator32 = compositeType27.indexComparator;
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator38 = compositeType27.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType33);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        java.lang.Object[] objArray49 = composite48.toArray();
        int int50 = composite48.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream51 = composite48.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream52 = composite48.parallelStream();
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        java.util.List<java.lang.Object> objList59 = comparators.Composite.deserialize(byteArray57);
        byte[] byteArray60 = comparators.Composite.serialize(objList59);
        java.util.stream.Stream<java.lang.Object> objStream61 = objList59.parallelStream();
        comparators.Composite composite62 = new comparators.Composite(objList59);
        java.lang.Object[] objArray63 = composite62.toArray();
        int int64 = composite62.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream65 = composite62.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream66 = composite62.parallelStream();
        int int67 = composite62.startOffset;
        int int68 = composite48.compareTo(composite62);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        comparators.Composite composite75 = composite48.addBytes(byteArray73);
        java.nio.ByteBuffer byteBuffer76 = composite75.serializeToByteBuffer();
        compositeType33.validate(byteBuffer76);
        comparators.Composite composite78 = new comparators.Composite(byteBuffer76);
        java.nio.ByteBuffer byteBuffer79 = null;
        int int80 = compositeType21.compare(byteBuffer76, byteBuffer79);
        java.lang.String str81 = compositeType0.getString(byteBuffer76);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator82 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator83 = compositeType0.indexReverseComparator;
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(indexInfoComparator12);
        org.junit.Assert.assertNotNull(byteBufferComparator13);
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(indexInfoComparator20);
        org.junit.Assert.assertNotNull(compositeType21);
        org.junit.Assert.assertNotNull(byteBufferArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteBufferComparator26);
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteBufferArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(indexInfoComparator32);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteBufferComparator38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(byteBufferComparator82);
        org.junit.Assert.assertNotNull(indexInfoComparator83);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType7.validate(byteBuffer50);
        java.lang.String str52 = compositeType0.getString(byteBuffer50);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator53 = compositeType0.reversed();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer55 = compositeType0.fromString("Placeholder(255)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteBufferComparator53);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray11 = new byte[] {};
        int int12 = comparators.Composite.compare(byteArray10, byteArray11);
        int int13 = comparators.Composite.compare(byteArray4, byteArray11);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray11);
        comparators.Composite composite15 = compositeSerializer0.fromBytes(byteArray11);
        int int17 = compositeSerializer0.computeInitialHashSize(1);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.util.RandomAccess[] randomAccessArray28 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray29 = composite27.toArray(randomAccessArray28);
        comparators.Composite composite31 = composite27.addLong((long) 67);
        comparators.Composite composite33 = composite31.addBool(true);
        comparators.Composite composite35 = composite31.addLong((long) 2);
        java.nio.ByteBuffer byteBuffer36 = composite31.serializeToByteBuffer();
        comparators.Composite composite37 = compositeSerializer0.fromByteBuffer(byteBuffer36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteBuffer36);
        comparators.Composite composite39 = new comparators.Composite(byteBuffer36);
        java.util.UUID uUID40 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite41 = composite39.addLexicalUUID(uUID40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(randomAccessArray28);
        org.junit.Assert.assertNotNull(randomAccessArray29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(objList38);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        byte[] byteArray2 = null;
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray8 = new byte[] {};
        int int9 = comparators.Composite.compare(byteArray7, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        int int16 = comparators.Composite.compare(byteArray7, byteArray14);
        int int17 = comparators.Composite.compare((int) (byte) 1, byteArray2, 10, byteArray7);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        int int30 = comparators.Composite.compare(byteArray21, byteArray28);
        java.util.List<java.lang.Object> objList31 = comparators.Composite.deserialize(byteArray28);
        int int32 = comparators.Composite.compare(byteArray7, byteArray28);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray28);
        boolean boolean35 = comparators.Composite.validate((int) (byte) 10, byteArray28, true);
        comparators.Composite composite36 = new comparators.Composite(byteArray28);
        java.lang.CharSequence[] charSequenceArray38 = new java.lang.CharSequence[] { "Placeholder(100)" };
        java.lang.CharSequence[] charSequenceArray40 = new java.lang.CharSequence[] { "Placeholder(100)" };
        java.lang.CharSequence[] charSequenceArray42 = new java.lang.CharSequence[] { "Placeholder(100)" };
        java.lang.CharSequence[] charSequenceArray44 = new java.lang.CharSequence[] { "Placeholder(100)" };
        java.lang.CharSequence[][] charSequenceArray45 = new java.lang.CharSequence[][] { charSequenceArray38, charSequenceArray40, charSequenceArray42, charSequenceArray44 };
        java.lang.CharSequence[][] charSequenceArray46 = composite36.toArray(charSequenceArray45);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer47 = comparators.Composite.serializeToByteBuffer((java.lang.Object[]) charSequenceArray45);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(objList31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(charSequenceArray38);
        org.junit.Assert.assertNotNull(charSequenceArray40);
        org.junit.Assert.assertNotNull(charSequenceArray42);
        org.junit.Assert.assertNotNull(charSequenceArray44);
        org.junit.Assert.assertNotNull(charSequenceArray45);
        org.junit.Assert.assertNotNull(charSequenceArray46);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        comparators.Composite composite13 = composite9.addBool(false);
        comparators.hector.CompositeSerializer compositeSerializer14 = new comparators.hector.CompositeSerializer();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        int int27 = comparators.Composite.compare(byteArray18, byteArray25);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray25);
        comparators.Composite composite29 = compositeSerializer14.fromBytes(byteArray25);
        int int31 = compositeSerializer14.computeInitialHashSize(1);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray36);
        byte[] byteArray39 = comparators.Composite.serialize(objList38);
        java.util.stream.Stream<java.lang.Object> objStream40 = objList38.parallelStream();
        comparators.Composite composite41 = new comparators.Composite(objList38);
        java.util.RandomAccess[] randomAccessArray42 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray43 = composite41.toArray(randomAccessArray42);
        comparators.Composite composite45 = composite41.addLong((long) 67);
        comparators.Composite composite47 = composite45.addBool(true);
        comparators.Composite composite49 = composite45.addLong((long) 2);
        java.nio.ByteBuffer byteBuffer50 = composite45.serializeToByteBuffer();
        comparators.Composite composite51 = compositeSerializer14.fromByteBuffer(byteBuffer50);
        java.util.List<java.lang.Object> objList52 = comparators.Composite.deserialize(byteBuffer50);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean53 = composite9.retainAll((java.util.Collection<java.lang.Object>) objList52);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(randomAccessArray42);
        org.junit.Assert.assertNotNull(randomAccessArray43);
        org.junit.Assert.assertNotNull(composite45);
        org.junit.Assert.assertNotNull(composite47);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(composite51);
        org.junit.Assert.assertNotNull(objList52);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (short) 1;
        java.lang.String str3 = placeholder0.toString();
        boolean boolean5 = placeholder0.equals((java.lang.Object) 10L);
        int int6 = placeholder0.type;
        placeholder0.type = 255;
        java.lang.String str9 = placeholder0.toString();
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Placeholder(1)" + "'", str3, "Placeholder(1)");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Placeholder(255)" + "'", str9, "Placeholder(255)");
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        int int13 = composite10.startOffset;
        byte[] byteArray14 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        comparators.Composite composite30 = composite24.addBool(true);
        java.util.Iterator<java.lang.Object> objItor31 = composite24.iterator();
        comparators.Composite composite33 = composite24.addReal((java.lang.Double) 100.0d);
        comparators.Composite composite35 = composite33.addLong((long) '#');
        byte[] byteArray36 = compositeSerializer0.toBytes(composite35);
        comparators.Composite composite38 = composite35.addReal((java.lang.Double) 1.0d);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        boolean boolean57 = comparators.Composite.validate((int) ' ', byteArray54, true);
        boolean boolean58 = composite48.contains((java.lang.Object) boolean57);
        java.util.Spliterator<java.lang.Object> objSpliterator59 = composite48.spliterator();
        byte[] byteArray60 = composite48.bytes;
        int int61 = composite35.compareTo(composite48);
        comparators.Composite composite63 = composite35.addBool(false);
        composite63.startOffset = ' ';
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[67, 77, 80, 1, 2, 1, 0, 4, 64, 89, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 35, 0]");
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objSpliterator59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(composite63);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        comparators.Composite composite17 = composite15.addLong((long) 6);
        java.io.DataOutputStream dataOutputStream18 = composite15.out;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.stream.Stream<java.lang.Object> objStream39 = composite28.parallelStream();
        composite28.startOffset = 8;
        comparators.Composite composite43 = composite28.addAscii("hi!");
        comparators.Composite composite45 = composite28.addLong((long) 4);
        java.nio.ByteBuffer byteBuffer46 = composite45.serializeToByteBuffer();
        boolean boolean47 = composite15.contains((java.lang.Object) byteBuffer46);
        boolean boolean48 = comparators.Composite.validate(byteBuffer46);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(dataOutputStream18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(composite43);
        org.junit.Assert.assertNotNull(composite45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator10 = compositeType0.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator11 = compositeType0.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator12 = compositeType0.indexReverseComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator13 = compositeType0.indexReverseComparator;
        comparators.CompositeType compositeType14 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray15 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList16 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16, byteBufferArray15);
        java.lang.String str18 = compositeType14.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16);
        org.apache.cassandra.db.IColumn[] iColumnArray19 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList20 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList20, iColumnArray19);
        java.lang.String str22 = compositeType14.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList20);
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator28 = compositeType23.indexComparator;
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator34 = compositeType23.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator35 = compositeType14.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType23);
        comparators.CompositeType compositeType36 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray37 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList38 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38, byteBufferArray37);
        java.lang.String str40 = compositeType36.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator41 = compositeType36.indexComparator;
        boolean boolean42 = comparators.Composite.isValidType((java.lang.Object) compositeType36);
        comparators.CompositeType compositeType43 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator44 = compositeType43.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator45 = compositeType36.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType43);
        comparators.CompositeType compositeType46 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray47 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList48 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48, byteBufferArray47);
        java.lang.String str50 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator51 = compositeType46.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator52 = compositeType43.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType46);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator53 = compositeType14.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType43);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator54 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType14);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator55 = compositeType0.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator56 = compositeType0.getReverseComparator();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(indexInfoComparator10);
        org.junit.Assert.assertNotNull(indexInfoComparator11);
        org.junit.Assert.assertNotNull(indexInfoComparator12);
        org.junit.Assert.assertNotNull(indexInfoComparator13);
        org.junit.Assert.assertNotNull(compositeType14);
        org.junit.Assert.assertNotNull(byteBufferArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(iColumnArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(indexInfoComparator28);
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteBufferComparator34);
        org.junit.Assert.assertNotNull(byteBufferComparator35);
        org.junit.Assert.assertNotNull(compositeType36);
        org.junit.Assert.assertNotNull(byteBufferArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(indexInfoComparator41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(indexInfoComparator44);
        org.junit.Assert.assertNotNull(byteBufferComparator45);
        org.junit.Assert.assertNotNull(compositeType46);
        org.junit.Assert.assertNotNull(byteBufferArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(indexInfoComparator51);
        org.junit.Assert.assertNotNull(byteBufferComparator52);
        org.junit.Assert.assertNotNull(byteBufferComparator53);
        org.junit.Assert.assertNotNull(byteBufferComparator54);
        org.junit.Assert.assertNotNull(indexInfoComparator55);
        org.junit.Assert.assertNotNull(byteBufferComparator56);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        comparators.CompositeType compositeType27 = new comparators.CompositeType();
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        int int40 = composite38.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream41 = composite38.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream42 = composite38.parallelStream();
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.lang.Object[] objArray53 = composite52.toArray();
        int int54 = composite52.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream55 = composite52.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream56 = composite52.parallelStream();
        int int57 = composite52.startOffset;
        int int58 = composite38.compareTo(composite52);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        comparators.Composite composite65 = composite38.addBytes(byteArray63);
        java.nio.ByteBuffer byteBuffer66 = composite65.serializeToByteBuffer();
        compositeType28.validate(byteBuffer66);
        boolean boolean68 = comparators.Composite.validate(byteBuffer66);
        comparators.Composite composite69 = new comparators.Composite(byteBuffer66);
        java.nio.ByteBuffer byteBuffer70 = null;
        int int71 = compositeType27.compare(byteBuffer66, byteBuffer70);
        comparators.Composite composite72 = new comparators.Composite(byteBuffer66);
        java.util.Spliterator<java.lang.Object> objSpliterator73 = composite72.spliterator();
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray86 = new byte[] {};
        int int87 = comparators.Composite.compare(byteArray85, byteArray86);
        int int88 = comparators.Composite.compare(byteArray79, byteArray86);
        boolean boolean90 = comparators.Composite.validate((int) (byte) 0, byteArray86, true);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator91 = composite26.new CompositeTypeIterator(composite72, 97, byteArray86);
        int int92 = compositeTypeIterator91.start;
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator91.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objSpliterator73);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 97 + "'", int92 == 97);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        comparators.CompositeType compositeType10 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray11 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList12 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12, byteBufferArray11);
        java.lang.String str14 = compositeType10.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12);
        org.apache.cassandra.db.IColumn[] iColumnArray15 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList16 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16, iColumnArray15);
        java.lang.String str18 = compositeType10.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        java.lang.String str19 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator25 = compositeType20.indexComparator;
        comparators.CompositeType compositeType26 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray27 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList28 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28, byteBufferArray27);
        java.lang.String str30 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType20.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType26);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator32 = compositeType0.thenComparing(byteBufferComparator31);
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        org.apache.cassandra.db.IColumn[] iColumnArray38 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList39 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList39, iColumnArray38);
        java.lang.String str41 = compositeType33.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList39);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator42 = compositeType33.getReverseComparator();
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray44 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList45 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45, byteBufferArray44);
        java.lang.String str47 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45);
        org.apache.cassandra.db.IColumn[] iColumnArray48 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList49 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49, iColumnArray48);
        java.lang.String str51 = compositeType43.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49);
        java.lang.String str52 = compositeType33.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49);
        java.lang.String str53 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator54 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator55 = compositeType0.indexReverseComparator;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer57 = compositeType0.fromString("Placeholder(35)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(compositeType10);
        org.junit.Assert.assertNotNull(byteBufferArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(iColumnArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexInfoComparator25);
        org.junit.Assert.assertNotNull(compositeType26);
        org.junit.Assert.assertNotNull(byteBufferArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(byteBufferComparator32);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(iColumnArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteBufferComparator42);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(byteBufferArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(iColumnArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteBufferComparator54);
        org.junit.Assert.assertNotNull(indexInfoComparator55);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.offset;
        int int85 = compositeTypeIterator80.offset;
        compositeTypeIterator80.len = 138;
        int int88 = compositeTypeIterator80.len;
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 67 + "'", int84 == 67);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 138 + "'", int88 == 138);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        byte[] byteArray68 = composite65.bytes;
        int int69 = composite65.size();
        byte[] byteArray74 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray75 = new byte[] {};
        int int76 = comparators.Composite.compare(byteArray74, byteArray75);
        java.util.List<java.lang.Object> objList77 = comparators.Composite.deserialize(byteArray75);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray82 = new byte[] {};
        int int83 = comparators.Composite.compare(byteArray81, byteArray82);
        java.util.List<java.lang.Object> objList84 = comparators.Composite.deserialize(byteArray82);
        byte[] byteArray85 = comparators.Composite.serialize(objList84);
        java.util.stream.Stream<java.lang.Object> objStream86 = objList84.parallelStream();
        comparators.Composite composite87 = new comparators.Composite(objList84);
        java.util.RandomAccess[] randomAccessArray88 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray89 = composite87.toArray(randomAccessArray88);
        comparators.Composite composite91 = composite87.addLong((long) 67);
        byte[] byteArray92 = composite91.serialize();
        java.util.List<java.lang.Object> objList93 = comparators.Composite.deserialize(byteArray92);
        int int94 = comparators.Composite.compare(byteArray75, byteArray92);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator95 = composite17.new CompositeTypeIterator(composite65, 255, byteArray92);
        comparators.Composite composite96 = compositeTypeIterator95.collection;
        java.io.DataOutputStream dataOutputStream97 = null;
        composite96.out = dataOutputStream97;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNull(byteArray68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(objList77);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(objList84);
        org.junit.Assert.assertNull(byteArray85);
        org.junit.Assert.assertNotNull(objStream86);
        org.junit.Assert.assertNotNull(randomAccessArray88);
        org.junit.Assert.assertNotNull(randomAccessArray89);
        org.junit.Assert.assertNotNull(composite91);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(composite96);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (short) 1;
        java.lang.String str3 = placeholder0.toString();
        boolean boolean5 = placeholder0.equals((java.lang.Object) 10L);
        int int6 = placeholder0.type;
        java.lang.String str7 = placeholder0.toString();
        placeholder0.type = 0;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        placeholder0.type = (byte) 10;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Placeholder(1)" + "'", str3, "Placeholder(1)");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Placeholder(1)" + "'", str7, "Placeholder(1)");
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 80;
        byte[] byteArray83 = compositeTypeIterator80.bytes;
        byte[] byteArray84 = compositeTypeIterator80.bytes;
        compositeTypeIterator80.len = (short) 1;
        compositeTypeIterator80.offset = 103;
        int int89 = compositeTypeIterator80.len;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        java.lang.Object[][][] objArray32 = new java.lang.Object[][][] {};
        java.lang.Object[][][] objArray33 = composite9.toArray(objArray32);
        java.util.UUID uUID34 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite35 = composite9.addTimeUUID(uUID34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(objArray33);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        comparators.Composite composite0 = new comparators.Composite();
        comparators.Composite composite2 = composite0.addUTF8("Placeholder(58)");
        composite0.startOffset = 90;
        org.junit.Assert.assertNotNull(composite2);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        byte[] byteArray82 = compositeTypeIterator80.bytes;
        int int83 = compositeTypeIterator80.type;
        byte[] byteArray87 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray88 = new byte[] {};
        int int89 = comparators.Composite.compare(byteArray87, byteArray88);
        byte[] byteArray93 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray94 = new byte[] {};
        int int95 = comparators.Composite.compare(byteArray93, byteArray94);
        int int96 = comparators.Composite.compare(byteArray87, byteArray94);
        compositeTypeIterator80.bytes = byteArray87;
        compositeTypeIterator80.offset = 47;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        boolean boolean32 = composite9.isEmpty();
        int int33 = composite9.startOffset;
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        comparators.Composite composite49 = composite43.addBool(true);
        comparators.Composite composite51 = composite49.addLong((long) 6);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray56 = new byte[] {};
        int int57 = comparators.Composite.compare(byteArray55, byteArray56);
        java.util.List<java.lang.Object> objList58 = comparators.Composite.deserialize(byteArray56);
        byte[] byteArray59 = comparators.Composite.serialize(objList58);
        java.util.stream.Stream<java.lang.Object> objStream60 = objList58.parallelStream();
        comparators.Composite composite61 = new comparators.Composite(objList58);
        java.util.RandomAccess[] randomAccessArray62 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray63 = composite61.toArray(randomAccessArray62);
        comparators.Composite composite65 = composite61.addLong((long) 67);
        byte[] byteArray66 = composite65.serialize();
        comparators.Composite composite67 = composite49.addBytes(byteArray66);
        comparators.Composite composite69 = composite49.addLong((long) (byte) 100);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray74 = new byte[] {};
        int int75 = comparators.Composite.compare(byteArray73, byteArray74);
        java.util.List<java.lang.Object> objList76 = comparators.Composite.deserialize(byteArray74);
        byte[] byteArray77 = comparators.Composite.serialize(objList76);
        java.util.stream.Stream<java.lang.Object> objStream78 = objList76.parallelStream();
        comparators.Composite composite79 = new comparators.Composite(objList76);
        int int80 = composite79.size();
        byte[] byteArray81 = composite79.bytes;
        boolean boolean82 = composite69.contains((java.lang.Object) composite79);
        java.lang.String str83 = composite69.toString();
        boolean boolean84 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite69);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(composite51);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(objList58);
        org.junit.Assert.assertNull(byteArray59);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(randomAccessArray62);
        org.junit.Assert.assertNotNull(randomAccessArray63);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(composite67);
        org.junit.Assert.assertNotNull(composite69);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertNull(byteArray77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNull(byteArray81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "true,6,434d500103000000000000004300,100" + "'", str83, "true,6,434d500103000000000000004300,100");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite12 = new comparators.Composite((java.lang.Object[]) randomAccessArray11);
        java.lang.Object obj13 = null;
        boolean boolean14 = composite12.equals(obj13);
        comparators.Composite composite16 = composite12.addLong(10L);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        comparators.Composite composite32 = composite26.addBool(true);
        java.util.Iterator<java.lang.Object> objItor33 = composite26.iterator();
        comparators.Composite composite34 = new comparators.Composite();
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.lang.Object[] objArray45 = composite44.toArray();
        int int46 = composite44.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream47 = composite44.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream48 = composite44.parallelStream();
        int int49 = composite34.compareTo(composite44);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray65 = new byte[] {};
        int int66 = comparators.Composite.compare(byteArray64, byteArray65);
        boolean boolean68 = comparators.Composite.validate((int) ' ', byteArray65, true);
        boolean boolean69 = composite59.contains((java.lang.Object) boolean68);
        java.util.stream.Stream<java.lang.Object> objStream70 = composite59.parallelStream();
        boolean boolean71 = composite34.contains((java.lang.Object) composite59);
        boolean boolean72 = composite26.addAll((java.util.Collection<java.lang.Object>) composite34);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray77);
        byte[] byteArray80 = comparators.Composite.serialize(objList79);
        java.util.stream.Stream<java.lang.Object> objStream81 = objList79.parallelStream();
        comparators.Composite composite82 = new comparators.Composite(objList79);
        java.lang.Object[] objArray83 = composite82.toArray();
        int int84 = composite82.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream85 = composite82.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream86 = composite82.parallelStream();
        int int87 = composite82.startOffset;
        int int88 = composite82.startOffset;
        int int89 = composite34.compareTo(composite82);
        comparators.Composite composite91 = composite34.addLong((long) 80);
        comparators.Composite composite93 = composite34.addLong((long) 6);
        byte[] byteArray94 = composite93.serialize();
        comparators.Composite composite95 = new comparators.Composite(byteArray94);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = composite12.removeAll((java.util.Collection<java.lang.Object>) composite95);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(composite32);
        org.junit.Assert.assertNotNull(objItor33);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNull(byteArray80);
        org.junit.Assert.assertNotNull(objStream81);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(objStream85);
        org.junit.Assert.assertNotNull(objStream86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(composite91);
        org.junit.Assert.assertNotNull(composite93);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 80, 3, 0, 0, 0, 0, 0, 0, 0, 6, 0]");
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        comparators.Composite composite38 = composite11.addBytes(byteArray36);
        boolean boolean40 = comparators.Composite.validate((int) (short) 0, byteArray36, true);
        boolean boolean41 = comparators.Composite.validate(0, byteArray36);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        comparators.Composite composite26 = composite9.addLong((long) 4);
        comparators.CompositeType compositeType27 = new comparators.CompositeType();
        comparators.CompositeType compositeType28 = comparators.CompositeType.instance;
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        int int40 = composite38.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream41 = composite38.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream42 = composite38.parallelStream();
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.lang.Object[] objArray53 = composite52.toArray();
        int int54 = composite52.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream55 = composite52.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream56 = composite52.parallelStream();
        int int57 = composite52.startOffset;
        int int58 = composite38.compareTo(composite52);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        comparators.Composite composite65 = composite38.addBytes(byteArray63);
        java.nio.ByteBuffer byteBuffer66 = composite65.serializeToByteBuffer();
        compositeType28.validate(byteBuffer66);
        boolean boolean68 = comparators.Composite.validate(byteBuffer66);
        comparators.Composite composite69 = new comparators.Composite(byteBuffer66);
        java.nio.ByteBuffer byteBuffer70 = null;
        int int71 = compositeType27.compare(byteBuffer66, byteBuffer70);
        comparators.Composite composite72 = new comparators.Composite(byteBuffer66);
        java.util.Spliterator<java.lang.Object> objSpliterator73 = composite72.spliterator();
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray86 = new byte[] {};
        int int87 = comparators.Composite.compare(byteArray85, byteArray86);
        int int88 = comparators.Composite.compare(byteArray79, byteArray86);
        boolean boolean90 = comparators.Composite.validate((int) (byte) 0, byteArray86, true);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator91 = composite26.new CompositeTypeIterator(composite72, 97, byteArray86);
        boolean boolean92 = compositeTypeIterator91.hasNext();
        byte[] byteArray93 = compositeTypeIterator91.bytes;
        comparators.Composite composite94 = compositeTypeIterator91.collection;
        compositeTypeIterator91.len = 'a';
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertNotNull(compositeType28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertNotNull(byteBuffer66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objSpliterator73);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertNotNull(composite94);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        int int81 = compositeTypeIterator80.start;
        int int82 = compositeTypeIterator80.type;
        boolean boolean83 = compositeTypeIterator80.hasNext();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 67 + "'", int81 == 67);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        byte[] byteArray20 = comparators.Composite.serialize(objList18);
        byte[] byteArray21 = compositeListSerializer0.toBytes(objList18);
        byte[] byteArray22 = null;
        java.util.List<java.lang.Object> objList23 = compositeListSerializer0.fromBytes(byteArray22);
        comparators.Composite composite24 = new comparators.Composite(objList23);
        comparators.Composite composite26 = composite24.addBool(true);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        boolean boolean36 = comparators.Composite.validate(0, byteArray33);
        boolean boolean38 = comparators.Composite.validate((int) 'a', byteArray33, true);
        comparators.CompositeType compositeType39 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray40 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList41 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41, byteBufferArray40);
        java.lang.String str43 = compositeType39.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList41);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator44 = compositeType39.indexComparator;
        comparators.CompositeType compositeType45 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray46 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList47 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47, byteBufferArray46);
        java.lang.String str49 = compositeType45.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList47);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator50 = compositeType39.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType45);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        java.util.List<java.lang.Object> objList57 = comparators.Composite.deserialize(byteArray55);
        byte[] byteArray58 = comparators.Composite.serialize(objList57);
        java.util.stream.Stream<java.lang.Object> objStream59 = objList57.parallelStream();
        comparators.Composite composite60 = new comparators.Composite(objList57);
        java.lang.Object[] objArray61 = composite60.toArray();
        int int62 = composite60.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream63 = composite60.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream64 = composite60.parallelStream();
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        java.util.List<java.lang.Object> objList71 = comparators.Composite.deserialize(byteArray69);
        byte[] byteArray72 = comparators.Composite.serialize(objList71);
        java.util.stream.Stream<java.lang.Object> objStream73 = objList71.parallelStream();
        comparators.Composite composite74 = new comparators.Composite(objList71);
        java.lang.Object[] objArray75 = composite74.toArray();
        int int76 = composite74.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream77 = composite74.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream78 = composite74.parallelStream();
        int int79 = composite74.startOffset;
        int int80 = composite60.compareTo(composite74);
        byte[] byteArray84 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray85 = new byte[] {};
        int int86 = comparators.Composite.compare(byteArray84, byteArray85);
        comparators.Composite composite87 = composite60.addBytes(byteArray85);
        java.nio.ByteBuffer byteBuffer88 = composite87.serializeToByteBuffer();
        compositeType45.validate(byteBuffer88);
        comparators.Composite composite90 = new comparators.Composite(byteBuffer88);
        boolean boolean92 = comparators.Composite.validate(byteBuffer88, true);
        comparators.Composite composite93 = new comparators.Composite(byteBuffer88);
        byte[] byteArray94 = composite93.serialize();
        int int95 = comparators.Composite.compare(byteArray33, byteArray94);
        boolean boolean96 = composite24.add((java.lang.Object) int95);
        java.util.Collection<java.lang.Object>[] objCollectionArray97 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Collection<java.lang.Object>[] objCollectionArray98 = composite24.toArray(objCollectionArray97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNotNull(composite26);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(compositeType39);
        org.junit.Assert.assertNotNull(byteBufferArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(indexInfoComparator44);
        org.junit.Assert.assertNotNull(compositeType45);
        org.junit.Assert.assertNotNull(byteBufferArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteBufferComparator50);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(objList57);
        org.junit.Assert.assertNull(byteArray58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(objList71);
        org.junit.Assert.assertNull(byteArray72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(composite87);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[67, 77, 80, 1, 9, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        byte[] byteArray2 = null;
        byte[] byteArray7 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray8 = new byte[] {};
        int int9 = comparators.Composite.compare(byteArray7, byteArray8);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        int int16 = comparators.Composite.compare(byteArray7, byteArray14);
        int int17 = comparators.Composite.compare((int) (byte) 1, byteArray2, 10, byteArray7);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.util.RandomAccess[] randomAccessArray28 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray29 = composite27.toArray(randomAccessArray28);
        comparators.Composite composite31 = composite27.addLong((long) 67);
        byte[] byteArray32 = composite31.serialize();
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray32);
        int int34 = comparators.Composite.compare(byteArray2, byteArray32);
        byte[] byteArray36 = null;
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        int int50 = comparators.Composite.compare(byteArray41, byteArray48);
        int int51 = comparators.Composite.compare((int) (byte) 1, byteArray36, 10, byteArray41);
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        java.util.List<java.lang.Object> objList59 = comparators.Composite.deserialize(byteArray57);
        boolean boolean60 = comparators.Composite.validate(0, byteArray57);
        byte[] byteArray61 = null;
        int int62 = comparators.Composite.compare(byteArray57, byteArray61);
        int int63 = comparators.Composite.compare(byteArray41, byteArray57);
        comparators.Composite composite64 = new comparators.Composite(byteArray57);
        int int65 = comparators.Composite.compare(byteArray2, byteArray57);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray71 = new byte[] {};
        int int72 = comparators.Composite.compare(byteArray70, byteArray71);
        java.util.List<java.lang.Object> objList73 = comparators.Composite.deserialize(byteArray71);
        byte[] byteArray74 = comparators.Composite.serialize(objList73);
        java.util.stream.Stream<java.lang.Object> objStream75 = objList73.parallelStream();
        comparators.Composite composite76 = new comparators.Composite(objList73);
        java.util.RandomAccess[] randomAccessArray77 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray78 = composite76.toArray(randomAccessArray77);
        comparators.Composite composite80 = composite76.addLong((long) 67);
        byte[] byteArray81 = composite80.serialize();
        int int82 = comparators.Composite.compare((int) (short) 0, byteArray2, (int) '4', byteArray81);
        java.lang.Class<?> wildcardClass83 = byteArray81.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(randomAccessArray28);
        org.junit.Assert.assertNotNull(randomAccessArray29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(objList73);
        org.junit.Assert.assertNull(byteArray74);
        org.junit.Assert.assertNotNull(objStream75);
        org.junit.Assert.assertNotNull(randomAccessArray77);
        org.junit.Assert.assertNotNull(randomAccessArray78);
        org.junit.Assert.assertNotNull(composite80);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray38 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray39 = composite9.toArray(compositeListSerializerArray38);
        comparators.Composite composite40 = new comparators.Composite((java.lang.Object[]) compositeListSerializerArray39);
        byte[] byteArray41 = comparators.Composite.serialize((java.lang.Object[]) compositeListSerializerArray39);
        comparators.Composite composite42 = new comparators.Composite((java.lang.Object[]) compositeListSerializerArray39);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray58 = new byte[] {};
        int int59 = comparators.Composite.compare(byteArray57, byteArray58);
        boolean boolean61 = comparators.Composite.validate((int) ' ', byteArray58, true);
        boolean boolean62 = composite52.contains((java.lang.Object) boolean61);
        java.util.Spliterator<java.lang.Object> objSpliterator63 = composite52.spliterator();
        int int64 = composite52.startOffset;
        java.lang.Object[] objArray65 = composite52.toArray();
        comparators.Composite composite66 = new comparators.Composite(objArray65);
        composite66.startOffset = '4';
        boolean boolean69 = composite66.isEmpty();
        java.io.DataOutputStream dataOutputStream70 = composite66.out;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean71 = composite42.retainAll((java.util.Collection<java.lang.Object>) composite66);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray38);
        org.junit.Assert.assertNotNull(compositeListSerializerArray39);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objSpliterator63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNull(dataOutputStream70);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MINIMUM;
        placeholder0.type = '#';
        int int3 = placeholder0.type;
        java.lang.String str4 = placeholder0.toString();
        java.lang.String str5 = placeholder0.toString();
        java.lang.String str6 = placeholder0.toString();
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Placeholder(35)" + "'", str4, "Placeholder(35)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Placeholder(35)" + "'", str5, "Placeholder(35)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Placeholder(35)" + "'", str6, "Placeholder(35)");
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        java.lang.Object[][][] objArray32 = new java.lang.Object[][][] {};
        java.lang.Object[][][] objArray33 = composite9.toArray(objArray32);
        java.util.stream.Stream<java.lang.Object> objStream34 = composite9.parallelStream();
        boolean boolean35 = comparators.Composite.isValidType((java.lang.Object) composite9);
        boolean boolean36 = composite9.isEmpty();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 80;
        byte[] byteArray83 = compositeTypeIterator80.bytes;
        byte[] byteArray84 = null;
        int int85 = comparators.Composite.compare(byteArray83, byteArray84);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        comparators.CompositeType compositeType11 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray12 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList13 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13, byteBufferArray12);
        java.lang.String str15 = compositeType11.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator16 = compositeType11.indexComparator;
        comparators.CompositeType compositeType17 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray18 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList19 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19, byteBufferArray18);
        java.lang.String str21 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType11.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType17);
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.lang.String str28 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator34 = compositeType29.indexComparator;
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator40 = compositeType29.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType35);
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray42 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList43 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43, byteBufferArray42);
        java.lang.String str45 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.lang.String str46 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.util.AbstractList[] abstractListArray48 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray49 = (java.util.AbstractList<java.nio.ByteBuffer>[]) abstractListArray48;
        byteBufferListArray49[0] = byteBufferList25;
        byteBufferListArray49[1] = byteBufferList43;
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray54 = composite9.toArray(byteBufferListArray49);
        java.util.stream.Stream<java.lang.Object> objStream55 = composite9.parallelStream();
        comparators.Composite composite57 = composite9.addUTF8("UTF-8");
        comparators.Composite composite59 = composite57.addLong((-1L));
        java.util.stream.Stream<java.lang.Object> objStream60 = composite59.parallelStream();
        java.util.Iterator<java.lang.Object> objItor61 = composite59.iterator();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(compositeType11);
        org.junit.Assert.assertNotNull(byteBufferArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(indexInfoComparator16);
        org.junit.Assert.assertNotNull(compositeType17);
        org.junit.Assert.assertNotNull(byteBufferArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(indexInfoComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteBufferComparator40);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteBufferArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(abstractListArray48);
        org.junit.Assert.assertNotNull(byteBufferListArray49);
        org.junit.Assert.assertNotNull(byteBufferListArray54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(composite57);
        org.junit.Assert.assertNotNull(composite59);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(objItor61);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray13 = new byte[] {};
        int int14 = comparators.Composite.compare(byteArray12, byteArray13);
        java.util.List<java.lang.Object> objList15 = comparators.Composite.deserialize(byteArray13);
        byte[] byteArray16 = comparators.Composite.serialize(objList15);
        java.util.stream.Stream<java.lang.Object> objStream17 = objList15.parallelStream();
        comparators.Composite composite18 = new comparators.Composite(objList15);
        java.util.RandomAccess[] randomAccessArray19 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray20 = composite18.toArray(randomAccessArray19);
        comparators.Composite composite22 = composite18.addLong((long) 67);
        byte[] byteArray23 = composite22.serialize();
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray23);
        int int25 = comparators.Composite.compare(byteArray6, byteArray23);
        comparators.hector.CompositeSerializer compositeSerializer26 = new comparators.hector.CompositeSerializer();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        comparators.Composite composite42 = composite36.addBool(true);
        java.io.DataOutputStream dataOutputStream43 = composite36.out;
        byte[] byteArray44 = compositeSerializer26.toBytes(composite36);
        int int45 = comparators.Composite.compare(byteArray23, byteArray44);
        boolean boolean47 = comparators.Composite.validate(67, byteArray44, true);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        boolean boolean50 = comparators.Composite.validate(3, byteArray49);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(objList15);
        org.junit.Assert.assertNull(byteArray16);
        org.junit.Assert.assertNotNull(objStream17);
        org.junit.Assert.assertNotNull(randomAccessArray19);
        org.junit.Assert.assertNotNull(randomAccessArray20);
        org.junit.Assert.assertNotNull(composite22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(composite42);
        org.junit.Assert.assertNotNull(dataOutputStream43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        comparators.Composite composite36 = composite9.addBytes(byteArray34);
        java.util.List<java.lang.Object> objList37 = comparators.Composite.deserialize(byteArray34);
        comparators.Composite composite38 = new comparators.Composite(objList37);
        comparators.Composite composite39 = new comparators.Composite();
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList46.parallelStream();
        comparators.Composite composite49 = new comparators.Composite(objList46);
        java.lang.Object[] objArray50 = composite49.toArray();
        int int51 = composite49.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream52 = composite49.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream53 = composite49.parallelStream();
        int int54 = composite39.compareTo(composite49);
        int int55 = composite39.size();
        byte[] byteArray56 = composite39.serialize();
        java.util.stream.Stream<java.lang.Object> objStream57 = composite39.stream();
        int int58 = comparators.Composite.compare(composite38, composite39);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(objList37);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray38 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray39 = composite9.toArray(compositeListSerializerArray38);
        comparators.Composite composite40 = new comparators.Composite((java.lang.Object[]) compositeListSerializerArray38);
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.nio.ByteBuffer byteBuffer79 = composite78.serializeToByteBuffer();
        compositeType41.validate(byteBuffer79);
        boolean boolean81 = comparators.Composite.validate(byteBuffer79);
        comparators.Composite composite82 = new comparators.Composite(byteBuffer79);
        comparators.Composite composite83 = new comparators.Composite(byteBuffer79);
        int int84 = comparators.Composite.compare(composite40, composite83);
        java.util.Spliterator<java.lang.Object> objSpliterator85 = composite40.spliterator();
        byte[] byteArray86 = composite40.bytes;
        java.util.UUID uUID87 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite88 = composite40.addTimeUUID(uUID87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray38);
        org.junit.Assert.assertNotNull(compositeListSerializerArray39);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(objSpliterator85);
        org.junit.Assert.assertNull(byteArray86);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        comparators.hector.CompositeListSerializer compositeListSerializer20 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType21 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray22 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList23 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23, byteBufferArray22);
        java.lang.String str25 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator26 = compositeType21.indexComparator;
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray28 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList29 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29, byteBufferArray28);
        java.lang.String str31 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator32 = compositeType21.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType27);
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.lang.String str38 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.List<java.util.List<java.lang.Object>> objListList39 = compositeListSerializer20.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList35);
        int int41 = compositeListSerializer20.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer42 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray44 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList45 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45, byteBufferArray44);
        java.lang.String str47 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator48 = compositeType43.indexComparator;
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray50 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList51 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51, byteBufferArray50);
        java.lang.String str53 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator54 = compositeType43.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType49);
        comparators.CompositeType compositeType55 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray56 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList57 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57, byteBufferArray56);
        java.lang.String str59 = compositeType55.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        java.lang.String str60 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        java.util.List<java.util.List<java.lang.Object>> objListList61 = compositeListSerializer42.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList57);
        java.util.List<java.nio.ByteBuffer> byteBufferList62 = compositeListSerializer20.toBytesList(objListList61);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet63 = compositeListSerializer0.toBytesSet(objListList61);
        int int65 = compositeListSerializer0.computeInitialHashSize((int) '4');
        int int67 = compositeListSerializer0.computeInitialHashSize(0);
        java.util.List<java.nio.ByteBuffer> byteBufferList68 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.List<java.lang.Object>> objListList69 = compositeListSerializer0.fromBytesList(byteBufferList68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertNotNull(compositeType21);
        org.junit.Assert.assertNotNull(byteBufferArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(indexInfoComparator26);
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteBufferArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteBufferComparator32);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(objListList39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(byteBufferArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(indexInfoComparator48);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteBufferComparator54);
        org.junit.Assert.assertNotNull(compositeType55);
        org.junit.Assert.assertNotNull(byteBufferArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(objListList61);
        org.junit.Assert.assertNotNull(byteBufferList62);
        org.junit.Assert.assertNotNull(byteBufferSet63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 70 + "'", int65 == 70);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        comparators.Composite composite38 = composite11.addBytes(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = composite38.serializeToByteBuffer();
        compositeType1.validate(byteBuffer39);
        boolean boolean41 = comparators.Composite.validate(byteBuffer39);
        comparators.Composite composite42 = new comparators.Composite(byteBuffer39);
        java.nio.ByteBuffer byteBuffer43 = null;
        int int44 = compositeType0.compare(byteBuffer39, byteBuffer43);
        comparators.Composite composite45 = new comparators.Composite(byteBuffer39);
        comparators.Composite composite46 = new comparators.Composite(byteBuffer39);
        comparators.Composite composite47 = new comparators.Composite(byteBuffer39);
        boolean boolean49 = comparators.Composite.validate(byteBuffer39, true);
        java.util.List<java.lang.Object> objList50 = comparators.Composite.deserialize(byteBuffer39);
        boolean boolean51 = comparators.Composite.validate(byteBuffer39);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objList50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite65.startOffset;
        int int72 = composite17.compareTo(composite65);
        comparators.Composite composite74 = composite17.addLong((long) 80);
        comparators.Composite composite76 = composite17.addLong((long) 6);
        java.util.Iterator<java.lang.Object> objItor77 = composite17.iterator();
        comparators.Composite composite78 = composite17.addMatchMaximum();
        java.lang.String str79 = composite17.toString();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(composite76);
        org.junit.Assert.assertNotNull(objItor77);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "80,6" + "'", str79, "80,6");
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        boolean boolean19 = comparators.Composite.validate((int) ' ', byteArray16, true);
        boolean boolean20 = composite10.contains((java.lang.Object) boolean19);
        java.util.stream.Stream<java.lang.Object> objStream21 = composite10.parallelStream();
        composite10.startOffset = 8;
        comparators.Composite composite25 = composite10.addAscii("hi!");
        comparators.Composite composite27 = composite10.addLong((long) 4);
        comparators.CompositeType compositeType28 = new comparators.CompositeType();
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        int int41 = composite39.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream42 = composite39.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream43 = composite39.parallelStream();
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        java.util.List<java.lang.Object> objList50 = comparators.Composite.deserialize(byteArray48);
        byte[] byteArray51 = comparators.Composite.serialize(objList50);
        java.util.stream.Stream<java.lang.Object> objStream52 = objList50.parallelStream();
        comparators.Composite composite53 = new comparators.Composite(objList50);
        java.lang.Object[] objArray54 = composite53.toArray();
        int int55 = composite53.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream56 = composite53.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream57 = composite53.parallelStream();
        int int58 = composite53.startOffset;
        int int59 = composite39.compareTo(composite53);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        comparators.Composite composite66 = composite39.addBytes(byteArray64);
        java.nio.ByteBuffer byteBuffer67 = composite66.serializeToByteBuffer();
        compositeType29.validate(byteBuffer67);
        boolean boolean69 = comparators.Composite.validate(byteBuffer67);
        comparators.Composite composite70 = new comparators.Composite(byteBuffer67);
        java.nio.ByteBuffer byteBuffer71 = null;
        int int72 = compositeType28.compare(byteBuffer67, byteBuffer71);
        comparators.Composite composite73 = new comparators.Composite(byteBuffer67);
        java.util.Spliterator<java.lang.Object> objSpliterator74 = composite73.spliterator();
        byte[] byteArray80 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray81 = new byte[] {};
        int int82 = comparators.Composite.compare(byteArray80, byteArray81);
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray87 = new byte[] {};
        int int88 = comparators.Composite.compare(byteArray86, byteArray87);
        int int89 = comparators.Composite.compare(byteArray80, byteArray87);
        boolean boolean91 = comparators.Composite.validate((int) (byte) 0, byteArray87, true);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator92 = composite27.new CompositeTypeIterator(composite73, 97, byteArray87);
        boolean boolean93 = compositeTypeIterator92.hasNext();
        byte[] byteArray94 = compositeTypeIterator92.bytes;
        boolean boolean96 = comparators.Composite.validate(21, byteArray94, false);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(composite25);
        org.junit.Assert.assertNotNull(composite27);
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(objList50);
        org.junit.Assert.assertNull(byteArray51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(composite66);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(objSpliterator74);
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        byte[] byteArray12 = composite9.bytes;
        java.io.DataOutputStream dataOutputStream13 = null;
        composite9.out = dataOutputStream13;
        comparators.Composite composite16 = composite9.addUTF8("Placeholder(35)");
        comparators.Composite composite18 = composite9.addLong((long) 6);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(composite18);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        comparators.hector.CompositeListSerializer compositeListSerializer2 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType3 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray4 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList5 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList5, byteBufferArray4);
        java.lang.String str7 = compositeType3.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList5);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator8 = compositeType3.indexComparator;
        comparators.CompositeType compositeType9 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray10 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList11 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11, byteBufferArray10);
        java.lang.String str13 = compositeType9.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator14 = compositeType3.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType9);
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.lang.String str20 = compositeType9.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.List<java.util.List<java.lang.Object>> objListList21 = compositeListSerializer2.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList17);
        int int23 = compositeListSerializer2.computeInitialHashSize(9);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        byte[] byteArray34 = compositeListSerializer2.toBytes(objList30);
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.util.RandomAccess[] randomAccessArray45 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray46 = composite44.toArray(randomAccessArray45);
        comparators.Composite composite48 = composite44.addLong((long) 67);
        byte[] byteArray49 = composite48.serialize();
        java.util.List<java.lang.Object> objList50 = comparators.Composite.deserialize(byteArray49);
        java.nio.ByteBuffer byteBuffer51 = compositeListSerializer2.toByteBuffer(objList50);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray56 = new byte[] {};
        int int57 = comparators.Composite.compare(byteArray55, byteArray56);
        java.util.List<java.lang.Object> objList58 = comparators.Composite.deserialize(byteArray56);
        byte[] byteArray59 = comparators.Composite.serialize(objList58);
        java.util.stream.Stream<java.lang.Object> objStream60 = objList58.parallelStream();
        comparators.Composite composite61 = new comparators.Composite(objList58);
        java.lang.Object[] objArray62 = composite61.toArray();
        int int63 = composite61.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream64 = composite61.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream65 = composite61.parallelStream();
        byte[] byteArray69 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray70 = new byte[] {};
        int int71 = comparators.Composite.compare(byteArray69, byteArray70);
        java.util.List<java.lang.Object> objList72 = comparators.Composite.deserialize(byteArray70);
        byte[] byteArray73 = comparators.Composite.serialize(objList72);
        java.util.stream.Stream<java.lang.Object> objStream74 = objList72.parallelStream();
        comparators.Composite composite75 = new comparators.Composite(objList72);
        java.lang.Object[] objArray76 = composite75.toArray();
        int int77 = composite75.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream78 = composite75.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream79 = composite75.parallelStream();
        int int80 = composite75.startOffset;
        int int81 = composite61.compareTo(composite75);
        byte[] byteArray85 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray86 = new byte[] {};
        int int87 = comparators.Composite.compare(byteArray85, byteArray86);
        comparators.Composite composite88 = composite61.addBytes(byteArray86);
        java.nio.ByteBuffer byteBuffer89 = composite88.serializeToByteBuffer();
        java.util.List<java.lang.Object> objList90 = comparators.Composite.deserialize(byteBuffer89);
        byte[] byteArray91 = compositeListSerializer2.toBytes(objList90);
        boolean boolean93 = comparators.Composite.validate(21, byteArray91, true);
        boolean boolean94 = comparators.Composite.validate(77, byteArray91);
        org.junit.Assert.assertNotNull(compositeType3);
        org.junit.Assert.assertNotNull(byteBufferArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(indexInfoComparator8);
        org.junit.Assert.assertNotNull(compositeType9);
        org.junit.Assert.assertNotNull(byteBufferArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteBufferComparator14);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(objListList21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 13 + "'", int23 == 13);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(randomAccessArray45);
        org.junit.Assert.assertNotNull(randomAccessArray46);
        org.junit.Assert.assertNotNull(composite48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList50);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(objList58);
        org.junit.Assert.assertNull(byteArray59);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objList72);
        org.junit.Assert.assertNull(byteArray73);
        org.junit.Assert.assertNotNull(objStream74);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(objStream79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(composite88);
        org.junit.Assert.assertNotNull(byteBuffer89);
        org.junit.Assert.assertNotNull(objList90);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[67, 77, 80, 1, 9, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        comparators.CompositeType compositeType12 = new comparators.CompositeType();
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        byte[] byteArray31 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray32 = new byte[] {};
        int int33 = comparators.Composite.compare(byteArray31, byteArray32);
        java.util.List<java.lang.Object> objList34 = comparators.Composite.deserialize(byteArray32);
        byte[] byteArray35 = comparators.Composite.serialize(objList34);
        java.util.stream.Stream<java.lang.Object> objStream36 = objList34.parallelStream();
        comparators.Composite composite37 = new comparators.Composite(objList34);
        java.lang.Object[] objArray38 = composite37.toArray();
        int int39 = composite37.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream40 = composite37.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream41 = composite37.parallelStream();
        int int42 = composite37.startOffset;
        int int43 = composite23.compareTo(composite37);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        comparators.Composite composite50 = composite23.addBytes(byteArray48);
        java.nio.ByteBuffer byteBuffer51 = composite50.serializeToByteBuffer();
        compositeType13.validate(byteBuffer51);
        boolean boolean53 = comparators.Composite.validate(byteBuffer51);
        comparators.Composite composite54 = new comparators.Composite(byteBuffer51);
        java.nio.ByteBuffer byteBuffer55 = null;
        int int56 = compositeType12.compare(byteBuffer51, byteBuffer55);
        comparators.Composite composite57 = new comparators.Composite(byteBuffer51);
        java.util.List<java.lang.Object> objList58 = compositeListSerializer0.fromByteBuffer(byteBuffer51);
        comparators.Composite composite59 = new comparators.Composite(byteBuffer51);
        java.util.Iterator<java.lang.Object> objItor60 = composite59.iterator();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(objList34);
        org.junit.Assert.assertNull(byteArray35);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(composite50);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(objList58);
        org.junit.Assert.assertNotNull(objItor60);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator10 = compositeType0.indexComparator;
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        java.util.List<java.lang.Object> objList17 = comparators.Composite.deserialize(byteArray15);
        byte[] byteArray18 = comparators.Composite.serialize(objList17);
        java.util.stream.Stream<java.lang.Object> objStream19 = objList17.parallelStream();
        comparators.Composite composite20 = new comparators.Composite(objList17);
        java.lang.Object[] objArray21 = composite20.toArray();
        int int22 = composite20.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream23 = composite20.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream24 = composite20.parallelStream();
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray29 = new byte[] {};
        int int30 = comparators.Composite.compare(byteArray28, byteArray29);
        java.util.List<java.lang.Object> objList31 = comparators.Composite.deserialize(byteArray29);
        byte[] byteArray32 = comparators.Composite.serialize(objList31);
        java.util.stream.Stream<java.lang.Object> objStream33 = objList31.parallelStream();
        comparators.Composite composite34 = new comparators.Composite(objList31);
        java.lang.Object[] objArray35 = composite34.toArray();
        int int36 = composite34.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream37 = composite34.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream38 = composite34.parallelStream();
        int int39 = composite34.startOffset;
        int int40 = composite20.compareTo(composite34);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray45 = new byte[] {};
        int int46 = comparators.Composite.compare(byteArray44, byteArray45);
        comparators.Composite composite47 = composite20.addBytes(byteArray45);
        java.nio.ByteBuffer byteBuffer48 = composite47.serializeToByteBuffer();
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteBuffer48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList49.stream();
        java.nio.ByteBuffer byteBuffer51 = comparators.Composite.serializeToByteBuffer(objList49);
        comparators.Composite composite52 = new comparators.Composite(byteBuffer51);
        java.lang.String str53 = compositeType0.getString(byteBuffer51);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(indexInfoComparator10);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(objList17);
        org.junit.Assert.assertNull(byteArray18);
        org.junit.Assert.assertNotNull(objStream19);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(objList31);
        org.junit.Assert.assertNull(byteArray32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(composite47);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(byteBuffer51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MINIMUM;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        placeholder0.type = 'a';
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        org.junit.Assert.assertNotNull(placeholder0);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray11 = new byte[] {};
        int int12 = comparators.Composite.compare(byteArray10, byteArray11);
        int int13 = comparators.Composite.compare(byteArray4, byteArray11);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray11);
        comparators.Composite composite15 = compositeSerializer0.fromBytes(byteArray11);
        int int17 = compositeSerializer0.computeInitialHashSize(1);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.util.RandomAccess[] randomAccessArray28 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray29 = composite27.toArray(randomAccessArray28);
        comparators.Composite composite31 = composite27.addLong((long) 67);
        comparators.Composite composite33 = composite31.addBool(true);
        comparators.Composite composite35 = composite31.addLong((long) 2);
        java.nio.ByteBuffer byteBuffer36 = composite31.serializeToByteBuffer();
        comparators.Composite composite37 = compositeSerializer0.fromByteBuffer(byteBuffer36);
        int int39 = compositeSerializer0.computeInitialHashSize(67);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(randomAccessArray28);
        org.junit.Assert.assertNotNull(randomAccessArray29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 90 + "'", int39 == 90);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        comparators.Composite composite38 = composite11.addBytes(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = composite38.serializeToByteBuffer();
        compositeType1.validate(byteBuffer39);
        boolean boolean41 = comparators.Composite.validate(byteBuffer39);
        comparators.Composite composite42 = new comparators.Composite(byteBuffer39);
        java.nio.ByteBuffer byteBuffer43 = null;
        int int44 = compositeType0.compare(byteBuffer39, byteBuffer43);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator45 = compositeType0.getReverseComparator();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer47 = compositeType0.fromString("Placeholder(10)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(byteBufferComparator45);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        boolean boolean39 = composite9.contains((java.lang.Object) (-1));
        int int40 = composite9.size();
        java.util.Spliterator<java.lang.Object> objSpliterator41 = composite9.spliterator();
        java.io.ByteArrayOutputStream byteArrayOutputStream42 = composite9.byteStream;
        comparators.Composite composite44 = composite9.addLong((long) (short) 100);
        comparators.Composite composite46 = composite44.addAscii("Placeholder(-1)");
        java.util.UUID uUID47 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite48 = composite46.addTimeUUID(uUID47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(objSpliterator41);
        org.junit.Assert.assertNull(byteArrayOutputStream42);
        org.junit.Assert.assertNotNull(composite44);
        org.junit.Assert.assertNotNull(composite46);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        int int13 = composite10.startOffset;
        java.lang.Object[] objArray14 = composite10.toArray();
        java.util.Spliterator<java.lang.Object> objSpliterator15 = composite10.spliterator();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream30 = null;
        composite27.byteStream = byteArrayOutputStream30;
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray36);
        byte[] byteArray39 = comparators.Composite.serialize(objList38);
        java.util.stream.Stream<java.lang.Object> objStream40 = objList38.parallelStream();
        comparators.Composite composite41 = new comparators.Composite(objList38);
        java.lang.Object[] objArray42 = composite41.toArray();
        int int43 = composite41.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream44 = composite41.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream45 = composite41.parallelStream();
        comparators.Composite composite47 = composite41.addBool(true);
        java.util.Iterator<java.lang.Object> objItor48 = composite41.iterator();
        int int49 = composite27.compareTo(composite41);
        java.lang.Object[][][] objArray50 = new java.lang.Object[][][] {};
        java.lang.Object[][][] objArray51 = composite27.toArray(objArray50);
        byte[] byteArray55 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray56 = new byte[] {};
        int int57 = comparators.Composite.compare(byteArray55, byteArray56);
        java.util.List<java.lang.Object> objList58 = comparators.Composite.deserialize(byteArray56);
        byte[] byteArray59 = comparators.Composite.serialize(objList58);
        java.util.stream.Stream<java.lang.Object> objStream60 = objList58.parallelStream();
        comparators.Composite composite61 = new comparators.Composite(objList58);
        java.util.RandomAccess[] randomAccessArray62 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray63 = composite61.toArray(randomAccessArray62);
        comparators.Composite composite65 = composite61.addLong((long) 67);
        byte[] byteArray66 = composite65.serialize();
        java.util.List<java.lang.Object> objList67 = comparators.Composite.deserialize(byteArray66);
        comparators.Composite composite68 = composite27.addBytes(byteArray66);
        boolean boolean69 = comparators.Composite.validate(13, byteArray66);
        comparators.Composite composite70 = new comparators.Composite(byteArray66);
        boolean boolean71 = comparators.Composite.validate(100, byteArray66);
        composite10.bytes = byteArray66;
        comparators.Composite composite73 = new comparators.Composite(byteArray66);
        comparators.hector.CompositeSerializer compositeSerializer75 = new comparators.hector.CompositeSerializer();
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        java.util.List<java.lang.Object> objList82 = comparators.Composite.deserialize(byteArray80);
        byte[] byteArray83 = comparators.Composite.serialize(objList82);
        java.util.stream.Stream<java.lang.Object> objStream84 = objList82.parallelStream();
        comparators.Composite composite85 = new comparators.Composite(objList82);
        java.lang.Object[] objArray86 = composite85.toArray();
        int int87 = composite85.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream88 = composite85.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream89 = composite85.parallelStream();
        comparators.Composite composite91 = composite85.addBool(true);
        java.io.DataOutputStream dataOutputStream92 = composite85.out;
        byte[] byteArray93 = compositeSerializer75.toBytes(composite85);
        comparators.Composite composite94 = new comparators.Composite(byteArray93);
        java.util.List<java.lang.Object> objList95 = comparators.Composite.deserialize(byteArray93);
        // The following exception was thrown during execution in test generation
        try {
            int int96 = comparators.Composite.compare(130, byteArray66, 71, byteArray93);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objSpliterator15);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(composite47);
        org.junit.Assert.assertNotNull(objItor48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(objList58);
        org.junit.Assert.assertNull(byteArray59);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(randomAccessArray62);
        org.junit.Assert.assertNotNull(randomAccessArray63);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList67);
        org.junit.Assert.assertNotNull(composite68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(objList82);
        org.junit.Assert.assertNull(byteArray83);
        org.junit.Assert.assertNotNull(objStream84);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(objStream88);
        org.junit.Assert.assertNotNull(objStream89);
        org.junit.Assert.assertNotNull(composite91);
        org.junit.Assert.assertNotNull(dataOutputStream92);
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(objList95);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        int int86 = compositeTypeIterator80.type;
        compositeTypeIterator80.start = 5;
        int int89 = compositeTypeIterator80.start;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 5 + "'", int89 == 5);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        comparators.CompositeType compositeType10 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray11 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList12 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12, byteBufferArray11);
        java.lang.String str14 = compositeType10.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12);
        org.apache.cassandra.db.IColumn[] iColumnArray15 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList16 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16, iColumnArray15);
        java.lang.String str18 = compositeType10.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        java.lang.String str19 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator25 = compositeType20.indexComparator;
        comparators.CompositeType compositeType26 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray27 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList28 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28, byteBufferArray27);
        java.lang.String str30 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType20.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType26);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator32 = compositeType0.thenComparing(byteBufferComparator31);
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        org.apache.cassandra.db.IColumn[] iColumnArray38 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList39 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList39, iColumnArray38);
        java.lang.String str41 = compositeType33.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList39);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator42 = compositeType33.getReverseComparator();
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray44 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList45 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45, byteBufferArray44);
        java.lang.String str47 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45);
        org.apache.cassandra.db.IColumn[] iColumnArray48 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList49 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49, iColumnArray48);
        java.lang.String str51 = compositeType43.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49);
        java.lang.String str52 = compositeType33.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49);
        java.lang.String str53 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator54 = compositeType0.getReverseComparator();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator55 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator56 = compositeType0.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator57 = compositeType0.getReverseComparator();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer59 = compositeType0.fromString("Placeholder(95)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(compositeType10);
        org.junit.Assert.assertNotNull(byteBufferArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(iColumnArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexInfoComparator25);
        org.junit.Assert.assertNotNull(compositeType26);
        org.junit.Assert.assertNotNull(byteBufferArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(byteBufferComparator32);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(iColumnArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteBufferComparator42);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(byteBufferArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(iColumnArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteBufferComparator54);
        org.junit.Assert.assertNotNull(byteBufferComparator55);
        org.junit.Assert.assertNotNull(indexInfoComparator56);
        org.junit.Assert.assertNotNull(byteBufferComparator57);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        comparators.Composite composite36 = composite9.addBytes(byteArray34);
        java.util.List<java.lang.Object> objList37 = comparators.Composite.deserialize(byteArray34);
        comparators.Composite composite38 = new comparators.Composite(objList37);
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray45 = new byte[] {};
        int int46 = comparators.Composite.compare(byteArray44, byteArray45);
        boolean boolean48 = comparators.Composite.validate((int) ' ', byteArray45, true);
        boolean boolean49 = comparators.Composite.validate((int) (short) 0, byteArray45);
        boolean boolean50 = composite38.contains((java.lang.Object) boolean49);
        java.io.DataOutputStream dataOutputStream51 = composite38.out;
        comparators.Composite composite53 = composite38.addUTF8("Placeholder(100)");
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray58 = new byte[] {};
        int int59 = comparators.Composite.compare(byteArray57, byteArray58);
        java.util.List<java.lang.Object> objList60 = comparators.Composite.deserialize(byteArray58);
        byte[] byteArray61 = comparators.Composite.serialize(objList60);
        java.util.stream.Stream<java.lang.Object> objStream62 = objList60.parallelStream();
        comparators.Composite composite63 = new comparators.Composite(objList60);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        boolean boolean72 = comparators.Composite.validate((int) ' ', byteArray69, true);
        boolean boolean73 = composite63.contains((java.lang.Object) boolean72);
        java.util.stream.Stream<java.lang.Object> objStream74 = composite63.parallelStream();
        composite63.startOffset = 8;
        comparators.Composite composite78 = composite63.addAscii("hi!");
        comparators.Composite composite80 = composite63.addLong((long) 4);
        java.nio.ByteBuffer byteBuffer81 = composite80.serializeToByteBuffer();
        java.util.stream.Stream<java.lang.Object> objStream82 = composite80.stream();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean83 = composite53.add((java.lang.Object) composite80);
            org.junit.Assert.fail("Expected exception of type org.apache.cassandra.db.marshal.MarshalException; message: Not a composite type (ID byte 0 incorrect)");
        } catch (org.apache.cassandra.db.marshal.MarshalException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(objList37);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(dataOutputStream51);
        org.junit.Assert.assertNotNull(composite53);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(objList60);
        org.junit.Assert.assertNull(byteArray61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objStream74);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(composite80);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(objStream82);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (byte) -1;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        boolean boolean4 = comparators.Composite.isValidType((java.lang.Object) placeholder0);
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        int int6 = placeholder0.type;
        placeholder0.type = 13;
        placeholder0.type = 607;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.util.RandomAccess[] randomAccessArray11 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray12 = composite10.toArray(randomAccessArray11);
        comparators.Composite composite14 = composite10.addLong((long) 67);
        comparators.Composite composite16 = composite14.addBool(true);
        comparators.Composite composite18 = composite14.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator19 = composite14.spliterator();
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        boolean boolean38 = comparators.Composite.validate((int) ' ', byteArray35, true);
        boolean boolean39 = composite29.contains((java.lang.Object) boolean38);
        java.util.Spliterator<java.lang.Object> objSpliterator40 = composite29.spliterator();
        java.io.DataOutputStream dataOutputStream41 = composite29.out;
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        java.lang.Object[] objArray53 = composite52.toArray();
        int int54 = composite52.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream55 = composite52.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream56 = composite52.parallelStream();
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        java.util.List<java.lang.Object> objList63 = comparators.Composite.deserialize(byteArray61);
        byte[] byteArray64 = comparators.Composite.serialize(objList63);
        java.util.stream.Stream<java.lang.Object> objStream65 = objList63.parallelStream();
        comparators.Composite composite66 = new comparators.Composite(objList63);
        java.lang.Object[] objArray67 = composite66.toArray();
        int int68 = composite66.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream69 = composite66.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream70 = composite66.parallelStream();
        int int71 = composite66.startOffset;
        int int72 = composite52.compareTo(composite66);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        comparators.Composite composite79 = composite52.addBytes(byteArray77);
        java.util.List<java.lang.Object> objList80 = comparators.Composite.deserialize(byteArray77);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator81 = composite14.new CompositeTypeIterator(composite29, 67, byteArray77);
        compositeTypeIterator81.len = 0;
        int int84 = compositeTypeIterator81.len;
        int int85 = compositeTypeIterator81.len;
        int int86 = compositeTypeIterator81.start;
        compositeTypeIterator81.len = 58;
        byte[] byteArray89 = compositeTypeIterator81.bytes;
        boolean boolean91 = comparators.Composite.validate((int) 'a', byteArray89, true);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(randomAccessArray12);
        org.junit.Assert.assertNotNull(composite14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(objSpliterator19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(objSpliterator40);
        org.junit.Assert.assertNull(dataOutputStream41);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(objList63);
        org.junit.Assert.assertNull(byteArray64);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(composite79);
        org.junit.Assert.assertNotNull(objList80);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 67 + "'", int86 == 67);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        comparators.Composite composite36 = composite9.addBytes(byteArray34);
        java.nio.ByteBuffer byteBuffer37 = composite36.serializeToByteBuffer();
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteBuffer37);
        java.util.stream.Stream<java.lang.Object> objStream39 = objList38.stream();
        java.nio.ByteBuffer byteBuffer40 = comparators.Composite.serializeToByteBuffer(objList38);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList38.stream();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertNotNull(objStream41);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(9);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        byte[] byteArray32 = compositeListSerializer0.toBytes(objList28);
        byte[] byteArray35 = null;
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray41 = new byte[] {};
        int int42 = comparators.Composite.compare(byteArray40, byteArray41);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        int int49 = comparators.Composite.compare(byteArray40, byteArray47);
        int int50 = comparators.Composite.compare((int) (byte) 1, byteArray35, 10, byteArray40);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        int int63 = comparators.Composite.compare(byteArray54, byteArray61);
        java.util.List<java.lang.Object> objList64 = comparators.Composite.deserialize(byteArray61);
        int int65 = comparators.Composite.compare(byteArray40, byteArray61);
        java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(byteArray61);
        boolean boolean68 = comparators.Composite.validate((int) (byte) 10, byteArray61, true);
        java.util.List<java.lang.Object> objList69 = compositeListSerializer0.fromBytes(byteArray61);
        comparators.Composite composite70 = new comparators.Composite(objList69);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNull(byteArray32);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(objList64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(objList66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objList69);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MINIMUM;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        placeholder0.type = 'a';
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        java.lang.String str6 = placeholder0.toString();
        java.lang.String str7 = placeholder0.toString();
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Placeholder(97)" + "'", str6, "Placeholder(97)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Placeholder(97)" + "'", str7, "Placeholder(97)");
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        byte[] byteArray20 = comparators.Composite.serialize(objList18);
        byte[] byteArray21 = compositeListSerializer0.toBytes(objList18);
        byte[] byteArray22 = null;
        java.util.List<java.lang.Object> objList23 = compositeListSerializer0.fromBytes(byteArray22);
        int int25 = compositeListSerializer0.computeInitialHashSize(77);
        byte[] byteArray26 = null;
        java.util.List<java.lang.Object> objList27 = compositeListSerializer0.fromBytes(byteArray26);
        int int29 = compositeListSerializer0.computeInitialHashSize((-5));
        byte[] byteArray34 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray35 = new byte[] {};
        int int36 = comparators.Composite.compare(byteArray34, byteArray35);
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray41 = new byte[] {};
        int int42 = comparators.Composite.compare(byteArray40, byteArray41);
        int int43 = comparators.Composite.compare(byteArray34, byteArray41);
        boolean boolean45 = comparators.Composite.validate(0, byteArray41, false);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray41);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer47 = compositeListSerializer0.toByteBuffer(objList46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 103 + "'", int25 == 103);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-6) + "'", int29 == (-6));
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objList46);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.len = 58;
        byte[] byteArray88 = compositeTypeIterator80.bytes;
        boolean boolean89 = compositeTypeIterator80.hasNext();
        compositeTypeIterator80.offset = (byte) -1;
        compositeTypeIterator80.len = 97;
        compositeTypeIterator80.start = (short) 10;
        comparators.Composite composite96 = compositeTypeIterator80.collection;
        java.util.Iterator<java.lang.Object> objItor97 = composite96.iterator();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(composite96);
        org.junit.Assert.assertNotNull(objItor97);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        comparators.CompositeType compositeType9 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray10 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList11 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11, byteBufferArray10);
        java.lang.String str13 = compositeType9.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType9.indexComparator;
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator20 = compositeType9.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType15);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator21 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType9);
        comparators.CompositeType compositeType22 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray23 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList24 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24, byteBufferArray23);
        java.lang.String str26 = compositeType22.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator27 = compositeType22.indexComparator;
        boolean boolean28 = comparators.Composite.isValidType((java.lang.Object) compositeType22);
        comparators.CompositeType compositeType29 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator30 = compositeType29.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType22.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        comparators.CompositeType compositeType32 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray33 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList34 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34, byteBufferArray33);
        java.lang.String str36 = compositeType32.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList34);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator37 = compositeType32.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator38 = compositeType29.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType32);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator39 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator40 = compositeType29.getReverseComparator();
        comparators.hector.CompositeListSerializer compositeListSerializer41 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType42 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray43 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList44 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44, byteBufferArray43);
        java.lang.String str46 = compositeType42.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList44);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator47 = compositeType42.indexComparator;
        comparators.CompositeType compositeType48 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray49 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList50 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList50, byteBufferArray49);
        java.lang.String str52 = compositeType48.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList50);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator53 = compositeType42.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType48);
        comparators.CompositeType compositeType54 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray55 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList56 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList56, byteBufferArray55);
        java.lang.String str58 = compositeType54.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList56);
        java.lang.String str59 = compositeType48.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList56);
        java.util.List<java.util.List<java.lang.Object>> objListList60 = compositeListSerializer41.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList56);
        int int62 = compositeListSerializer41.computeInitialHashSize(9);
        comparators.hector.CompositeListSerializer compositeListSerializer63 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray68 = new byte[] {};
        int int69 = comparators.Composite.compare(byteArray67, byteArray68);
        java.util.List<java.lang.Object> objList70 = comparators.Composite.deserialize(byteArray68);
        byte[] byteArray71 = comparators.Composite.serialize(objList70);
        java.util.stream.Stream<java.lang.Object> objStream72 = objList70.parallelStream();
        comparators.Composite composite73 = new comparators.Composite(objList70);
        byte[] byteArray74 = compositeListSerializer63.toBytes(objList70);
        int int76 = compositeListSerializer63.computeInitialHashSize((int) ' ');
        comparators.hector.CompositeListSerializer compositeListSerializer77 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType78 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray79 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList80 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList80, byteBufferArray79);
        java.lang.String str82 = compositeType78.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList80);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator83 = compositeType78.indexComparator;
        comparators.CompositeType compositeType84 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray85 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList86 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList86, byteBufferArray85);
        java.lang.String str88 = compositeType84.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList86);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator89 = compositeType78.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType84);
        comparators.CompositeType compositeType90 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray91 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList92 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList92, byteBufferArray91);
        java.lang.String str94 = compositeType90.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList92);
        java.lang.String str95 = compositeType84.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList92);
        java.util.List<java.util.List<java.lang.Object>> objListList96 = compositeListSerializer77.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList92);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet97 = compositeListSerializer63.toBytesSet(objListList96);
        java.util.List<java.nio.ByteBuffer> byteBufferList98 = compositeListSerializer41.toBytesList(objListList96);
        java.lang.String str99 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList98);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(compositeType9);
        org.junit.Assert.assertNotNull(byteBufferArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteBufferComparator20);
        org.junit.Assert.assertNotNull(byteBufferComparator21);
        org.junit.Assert.assertNotNull(compositeType22);
        org.junit.Assert.assertNotNull(byteBufferArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(indexInfoComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(indexInfoComparator30);
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(compositeType32);
        org.junit.Assert.assertNotNull(byteBufferArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(indexInfoComparator37);
        org.junit.Assert.assertNotNull(byteBufferComparator38);
        org.junit.Assert.assertNotNull(byteBufferComparator39);
        org.junit.Assert.assertNotNull(byteBufferComparator40);
        org.junit.Assert.assertNotNull(compositeType42);
        org.junit.Assert.assertNotNull(byteBufferArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(indexInfoComparator47);
        org.junit.Assert.assertNotNull(compositeType48);
        org.junit.Assert.assertNotNull(byteBufferArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteBufferComparator53);
        org.junit.Assert.assertNotNull(compositeType54);
        org.junit.Assert.assertNotNull(byteBufferArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(objListList60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 13 + "'", int62 == 13);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(objList70);
        org.junit.Assert.assertNull(byteArray71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNull(byteArray74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 43 + "'", int76 == 43);
        org.junit.Assert.assertNotNull(compositeType78);
        org.junit.Assert.assertNotNull(byteBufferArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(indexInfoComparator83);
        org.junit.Assert.assertNotNull(compositeType84);
        org.junit.Assert.assertNotNull(byteBufferArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(byteBufferComparator89);
        org.junit.Assert.assertNotNull(compositeType90);
        org.junit.Assert.assertNotNull(byteBufferArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertNotNull(objListList96);
        org.junit.Assert.assertNotNull(byteBufferSet97);
        org.junit.Assert.assertNotNull(byteBufferList98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(9);
        comparators.hector.CompositeListSerializer compositeListSerializer22 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        java.util.List<java.lang.Object> objList29 = comparators.Composite.deserialize(byteArray27);
        byte[] byteArray30 = comparators.Composite.serialize(objList29);
        java.util.stream.Stream<java.lang.Object> objStream31 = objList29.parallelStream();
        comparators.Composite composite32 = new comparators.Composite(objList29);
        byte[] byteArray33 = compositeListSerializer22.toBytes(objList29);
        int int35 = compositeListSerializer22.computeInitialHashSize((int) ' ');
        comparators.hector.CompositeListSerializer compositeListSerializer36 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType37 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray38 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList39 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList39, byteBufferArray38);
        java.lang.String str41 = compositeType37.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList39);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator42 = compositeType37.indexComparator;
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray44 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList45 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45, byteBufferArray44);
        java.lang.String str47 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator48 = compositeType37.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType43);
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray50 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList51 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51, byteBufferArray50);
        java.lang.String str53 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        java.lang.String str54 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        java.util.List<java.util.List<java.lang.Object>> objListList55 = compositeListSerializer36.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList51);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet56 = compositeListSerializer22.toBytesSet(objListList55);
        java.util.List<java.nio.ByteBuffer> byteBufferList57 = compositeListSerializer0.toBytesList(objListList55);
        int int59 = compositeListSerializer0.computeInitialHashSize(97);
        int int61 = compositeListSerializer0.computeInitialHashSize(71);
        int int63 = compositeListSerializer0.computeInitialHashSize(19);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(objList29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 43 + "'", int35 == 43);
        org.junit.Assert.assertNotNull(compositeType37);
        org.junit.Assert.assertNotNull(byteBufferArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(indexInfoComparator42);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(byteBufferArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteBufferComparator48);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(objListList55);
        org.junit.Assert.assertNotNull(byteBufferSet56);
        org.junit.Assert.assertNotNull(byteBufferList57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 130 + "'", int59 == 130);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 95 + "'", int61 == 95);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 26 + "'", int63 == 26);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        comparators.Composite composite33 = composite9.addBool(false);
        java.util.UUID uUID34 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite35 = composite33.addTimeUUID(uUID34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(composite33);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addUTF8("UTF-8");
        comparators.Composite composite14 = new comparators.Composite();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite14.compareTo(composite24);
        comparators.hector.CompositeListSerializer compositeListSerializer30 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType31 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray32 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList33 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList33, byteBufferArray32);
        java.lang.String str35 = compositeType31.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList33);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator36 = compositeType31.indexComparator;
        comparators.CompositeType compositeType37 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray38 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList39 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList39, byteBufferArray38);
        java.lang.String str41 = compositeType37.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList39);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator42 = compositeType31.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType37);
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray44 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList45 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45, byteBufferArray44);
        java.lang.String str47 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45);
        java.lang.String str48 = compositeType37.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45);
        java.util.List<java.util.List<java.lang.Object>> objListList49 = compositeListSerializer30.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList45);
        comparators.CompositeType compositeType50 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator51 = compositeType50.indexComparator;
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator53 = compositeType50.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType52);
        java.lang.Object[] objArray54 = new java.lang.Object[] { compositeListSerializer30, compositeType52 };
        java.lang.Object[][] objArray55 = new java.lang.Object[][] { objArray54 };
        java.lang.Object[][] objArray56 = composite14.toArray(objArray55);
        comparators.Composite composite57 = new comparators.Composite((java.lang.Object[]) objArray56);
        byte[] byteArray61 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray62 = new byte[] {};
        int int63 = comparators.Composite.compare(byteArray61, byteArray62);
        java.util.List<java.lang.Object> objList64 = comparators.Composite.deserialize(byteArray62);
        byte[] byteArray65 = comparators.Composite.serialize(objList64);
        java.util.stream.Stream<java.lang.Object> objStream66 = objList64.parallelStream();
        comparators.Composite composite67 = new comparators.Composite(objList64);
        java.lang.Object[] objArray68 = composite67.toArray();
        int int69 = composite67.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream70 = composite67.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream71 = composite67.parallelStream();
        int int72 = composite67.startOffset;
        boolean boolean73 = composite67.isEmpty();
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray78 = new byte[] {};
        int int79 = comparators.Composite.compare(byteArray77, byteArray78);
        java.util.List<java.lang.Object> objList80 = comparators.Composite.deserialize(byteArray78);
        byte[] byteArray81 = comparators.Composite.serialize(objList80);
        java.util.stream.Stream<java.lang.Object> objStream82 = objList80.parallelStream();
        comparators.Composite composite83 = new comparators.Composite(objList80);
        int int84 = composite83.size();
        boolean boolean85 = composite67.containsAll((java.util.Collection<java.lang.Object>) composite83);
        java.io.ByteArrayOutputStream byteArrayOutputStream86 = composite67.byteStream;
        java.io.DataOutputStream dataOutputStream87 = composite67.out;
        int int88 = comparators.Composite.compare(composite57, composite67);
        boolean boolean89 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite57);
        java.util.UUID uUID90 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite91 = composite9.addLexicalUUID(uUID90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(compositeType31);
        org.junit.Assert.assertNotNull(byteBufferArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(indexInfoComparator36);
        org.junit.Assert.assertNotNull(compositeType37);
        org.junit.Assert.assertNotNull(byteBufferArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteBufferComparator42);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(byteBufferArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(objListList49);
        org.junit.Assert.assertNotNull(indexInfoComparator51);
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferComparator53);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(objList64);
        org.junit.Assert.assertNull(byteArray65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(objList80);
        org.junit.Assert.assertNull(byteArray81);
        org.junit.Assert.assertNotNull(objStream82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNull(byteArrayOutputStream86);
        org.junit.Assert.assertNull(dataOutputStream87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.offset = 100;
        int int88 = compositeTypeIterator80.type;
        int int89 = compositeTypeIterator80.offset;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 100 + "'", int89 == 100);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.lang.String str17 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        comparators.hector.CompositeSerializer compositeSerializer18 = new comparators.hector.CompositeSerializer();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        byte[] byteArray28 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray29 = new byte[] {};
        int int30 = comparators.Composite.compare(byteArray28, byteArray29);
        int int31 = comparators.Composite.compare(byteArray22, byteArray29);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray29);
        comparators.Composite composite33 = compositeSerializer18.fromBytes(byteArray29);
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        comparators.Composite composite49 = composite43.addBool(true);
        java.util.Iterator<java.lang.Object> objItor50 = composite43.iterator();
        comparators.Composite composite52 = composite43.addReal((java.lang.Double) 100.0d);
        java.nio.ByteBuffer byteBuffer53 = compositeSerializer18.toByteBuffer(composite52);
        java.lang.String str54 = compositeType6.getString(byteBuffer53);
        boolean boolean55 = comparators.Composite.validate(byteBuffer53);
        boolean boolean56 = comparators.Composite.validate(byteBuffer53);
        java.util.List<java.lang.Object> objList57 = comparators.Composite.deserialize(byteBuffer53);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(objItor50);
        org.junit.Assert.assertNotNull(composite52);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "true" + "'", str54, "true");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(objList57);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        int int33 = composite28.startOffset;
        composite28.clear();
        boolean boolean35 = composite18.containsAll((java.util.Collection<java.lang.Object>) composite28);
        comparators.Composite composite37 = composite28.addAscii("hi!");
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        java.util.List<java.lang.Object> objList44 = comparators.Composite.deserialize(byteArray42);
        byte[] byteArray45 = comparators.Composite.serialize(objList44);
        java.util.stream.Stream<java.lang.Object> objStream46 = objList44.parallelStream();
        comparators.Composite composite47 = new comparators.Composite(objList44);
        java.lang.Object[] objArray48 = composite47.toArray();
        int int49 = composite47.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream50 = composite47.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream51 = composite47.parallelStream();
        comparators.Composite composite53 = composite47.addBool(true);
        comparators.Composite composite55 = composite53.addLong((long) 6);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        comparators.Composite composite71 = composite65.addBool(true);
        comparators.Composite composite73 = composite71.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream74 = composite71.byteStream;
        composite55.byteStream = byteArrayOutputStream74;
        composite28.byteStream = byteArrayOutputStream74;
        java.util.Iterator<java.lang.Object> objItor77 = composite28.iterator();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(objList44);
        org.junit.Assert.assertNull(byteArray45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(composite53);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(composite71);
        org.junit.Assert.assertNotNull(composite73);
        org.junit.Assert.assertNotNull(byteArrayOutputStream74);
// flaky:         org.junit.Assert.assertEquals(byteArrayOutputStream74.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(objItor77);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(9);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        byte[] byteArray32 = compositeListSerializer0.toBytes(objList28);
        int int34 = compositeListSerializer0.computeInitialHashSize((int) (byte) 0);
        int int36 = compositeListSerializer0.computeInitialHashSize((int) '#');
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNull(byteArray32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 47 + "'", int36 == 47);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        comparators.CompositeType compositeType11 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray12 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList13 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13, byteBufferArray12);
        java.lang.String str15 = compositeType11.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList13);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator16 = compositeType11.indexComparator;
        comparators.CompositeType compositeType17 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray18 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList19 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19, byteBufferArray18);
        java.lang.String str21 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList19);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType11.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType17);
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.lang.String str28 = compositeType17.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator34 = compositeType29.indexComparator;
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator40 = compositeType29.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType35);
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray42 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList43 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43, byteBufferArray42);
        java.lang.String str45 = compositeType41.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.lang.String str46 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        java.util.AbstractList[] abstractListArray48 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray49 = (java.util.AbstractList<java.nio.ByteBuffer>[]) abstractListArray48;
        byteBufferListArray49[0] = byteBufferList25;
        byteBufferListArray49[1] = byteBufferList43;
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray54 = composite9.toArray(byteBufferListArray49);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        java.util.List<java.lang.Object> objList61 = comparators.Composite.deserialize(byteArray59);
        boolean boolean62 = composite9.equals((java.lang.Object) objList61);
        java.util.stream.Stream<java.lang.Object> objStream63 = objList61.parallelStream();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(compositeType11);
        org.junit.Assert.assertNotNull(byteBufferArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(indexInfoComparator16);
        org.junit.Assert.assertNotNull(compositeType17);
        org.junit.Assert.assertNotNull(byteBufferArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(indexInfoComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteBufferComparator40);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteBufferArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(abstractListArray48);
        org.junit.Assert.assertNotNull(byteBufferListArray49);
        org.junit.Assert.assertNotNull(byteBufferListArray54);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(objList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objStream63);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        boolean boolean15 = composite9.isEmpty();
        java.lang.String str16 = composite9.toString();
        java.util.Iterator<java.lang.Object> objItor17 = composite9.iterator();
        byte[] byteArray18 = composite9.bytes;
        java.util.Iterator<java.lang.Object> objItor19 = composite9.iterator();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(objItor17);
        org.junit.Assert.assertNull(byteArray18);
        org.junit.Assert.assertNotNull(objItor19);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray38 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray39 = composite9.toArray(compositeListSerializerArray38);
        comparators.Composite composite41 = composite9.addLong((long) (short) 100);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        int int52 = composite51.size();
        composite51.clear();
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray58 = new byte[] {};
        int int59 = comparators.Composite.compare(byteArray57, byteArray58);
        java.util.List<java.lang.Object> objList60 = comparators.Composite.deserialize(byteArray58);
        byte[] byteArray61 = comparators.Composite.serialize(objList60);
        java.util.stream.Stream<java.lang.Object> objStream62 = objList60.parallelStream();
        comparators.Composite composite63 = new comparators.Composite(objList60);
        byte[] byteArray68 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray69 = new byte[] {};
        int int70 = comparators.Composite.compare(byteArray68, byteArray69);
        boolean boolean72 = comparators.Composite.validate((int) ' ', byteArray69, true);
        boolean boolean73 = composite63.contains((java.lang.Object) boolean72);
        java.util.stream.Stream<java.lang.Object> objStream74 = composite63.parallelStream();
        composite63.startOffset = 8;
        comparators.Composite composite78 = composite63.addAscii("hi!");
        boolean boolean79 = composite51.containsAll((java.util.Collection<java.lang.Object>) composite63);
        int int80 = composite41.compareTo(composite63);
        java.io.DataOutputStream dataOutputStream81 = composite63.out;
        java.util.stream.Stream<java.lang.Object> objStream82 = composite63.stream();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray38);
        org.junit.Assert.assertNotNull(compositeListSerializerArray39);
        org.junit.Assert.assertNotNull(composite41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(objList60);
        org.junit.Assert.assertNull(byteArray61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objStream74);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNull(dataOutputStream81);
        org.junit.Assert.assertNotNull(objStream82);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        java.util.List<java.lang.Object> objList9 = comparators.Composite.deserialize(byteArray7);
        boolean boolean10 = comparators.Composite.validate(0, byteArray7);
        boolean boolean12 = comparators.Composite.validate((int) 'a', byteArray7, true);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object> objList13 = comparators.Composite.deserialize(80, byteArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        java.lang.String str56 = composite17.toString();
        boolean boolean57 = composite17.isEmpty();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        byte[] byteArray82 = compositeTypeIterator80.bytes;
        byte[] byteArray86 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray87 = new byte[] {};
        int int88 = comparators.Composite.compare(byteArray86, byteArray87);
        byte[] byteArray92 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray93 = new byte[] {};
        int int94 = comparators.Composite.compare(byteArray92, byteArray93);
        int int95 = comparators.Composite.compare(byteArray86, byteArray93);
        boolean boolean96 = comparators.Composite.isValidType((java.lang.Object) byteArray86);
        compositeTypeIterator80.bytes = byteArray86;
        int int98 = compositeTypeIterator80.len;
        int int99 = compositeTypeIterator80.type;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(byteArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        comparators.Composite composite81 = compositeTypeIterator80.collection;
        compositeTypeIterator80.offset = 1;
        int int84 = compositeTypeIterator80.start;
        int int85 = compositeTypeIterator80.len;
        java.lang.Class<?> wildcardClass86 = compositeTypeIterator80.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 67 + "'", int84 == 67);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        comparators.CompositeType compositeType9 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray10 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList11 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11, byteBufferArray10);
        java.lang.String str13 = compositeType9.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType9.indexComparator;
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator20 = compositeType9.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType15);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator21 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType9);
        comparators.CompositeType compositeType22 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray23 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList24 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24, byteBufferArray23);
        java.lang.String str26 = compositeType22.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList24);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator27 = compositeType22.indexComparator;
        boolean boolean28 = comparators.Composite.isValidType((java.lang.Object) compositeType22);
        comparators.CompositeType compositeType29 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator30 = compositeType29.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType22.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        comparators.CompositeType compositeType32 = new comparators.CompositeType();
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        java.lang.Object[] objArray58 = composite57.toArray();
        int int59 = composite57.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream60 = composite57.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream61 = composite57.parallelStream();
        int int62 = composite57.startOffset;
        int int63 = composite43.compareTo(composite57);
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray68 = new byte[] {};
        int int69 = comparators.Composite.compare(byteArray67, byteArray68);
        comparators.Composite composite70 = composite43.addBytes(byteArray68);
        java.nio.ByteBuffer byteBuffer71 = composite70.serializeToByteBuffer();
        compositeType33.validate(byteBuffer71);
        boolean boolean73 = comparators.Composite.validate(byteBuffer71);
        comparators.Composite composite74 = new comparators.Composite(byteBuffer71);
        java.nio.ByteBuffer byteBuffer75 = null;
        int int76 = compositeType32.compare(byteBuffer71, byteBuffer75);
        comparators.Composite composite77 = new comparators.Composite(byteBuffer71);
        comparators.Composite composite78 = new comparators.Composite(byteBuffer71);
        java.lang.String str79 = compositeType22.getString(byteBuffer71);
        java.lang.String str80 = compositeType0.getString(byteBuffer71);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer82 = compositeType0.fromString("Placeholder(32)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(compositeType9);
        org.junit.Assert.assertNotNull(byteBufferArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteBufferComparator20);
        org.junit.Assert.assertNotNull(byteBufferComparator21);
        org.junit.Assert.assertNotNull(compositeType22);
        org.junit.Assert.assertNotNull(byteBufferArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(indexInfoComparator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(indexInfoComparator30);
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(composite70);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        int int86 = compositeTypeIterator80.type;
        compositeTypeIterator80.offset = (byte) 1;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj89 = compositeTypeIterator80.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        java.lang.String str1 = placeholder0.toString();
        java.lang.String str2 = placeholder0.toString();
        byte[] byteArray6 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray7 = new byte[] {};
        int int8 = comparators.Composite.compare(byteArray6, byteArray7);
        java.util.List<java.lang.Object> objList9 = comparators.Composite.deserialize(byteArray7);
        byte[] byteArray10 = comparators.Composite.serialize(objList9);
        java.util.stream.Stream<java.lang.Object> objStream11 = objList9.parallelStream();
        comparators.Composite composite12 = new comparators.Composite(objList9);
        java.lang.Object[] objArray13 = composite12.toArray();
        int int14 = composite12.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream15 = null;
        composite12.byteStream = byteArrayOutputStream15;
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        comparators.Composite composite32 = composite26.addBool(true);
        java.util.Iterator<java.lang.Object> objItor33 = composite26.iterator();
        int int34 = composite12.compareTo(composite26);
        java.lang.Object[][][] objArray35 = new java.lang.Object[][][] {};
        java.lang.Object[][][] objArray36 = composite12.toArray(objArray35);
        java.util.Spliterator<java.lang.Object> objSpliterator37 = composite12.spliterator();
        comparators.Composite composite39 = composite12.addLong((long) (short) 10);
        boolean boolean40 = placeholder0.equals((java.lang.Object) composite39);
        placeholder0.type = 6;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        placeholder0.type = 71;
        org.junit.Assert.assertNotNull(placeholder0);
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Placeholder(70)" + "'", str1, "Placeholder(70)");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Placeholder(70)" + "'", str2, "Placeholder(70)");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(objList9);
        org.junit.Assert.assertNull(byteArray10);
        org.junit.Assert.assertNotNull(objStream11);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(composite32);
        org.junit.Assert.assertNotNull(objItor33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertNotNull(objSpliterator37);
        org.junit.Assert.assertNotNull(composite39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.util.RandomAccess[] randomAccessArray11 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray12 = composite10.toArray(randomAccessArray11);
        comparators.Composite composite14 = composite10.addLong((long) 67);
        byte[] byteArray15 = composite14.serialize();
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray15);
        comparators.Composite composite17 = new comparators.Composite(byteArray15);
        comparators.Composite composite18 = compositeSerializer0.fromBytes(byteArray15);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.stream.Stream<java.lang.Object> objStream39 = composite28.parallelStream();
        boolean boolean40 = composite28.isEmpty();
        byte[] byteArray44 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray45 = new byte[] {};
        int int46 = comparators.Composite.compare(byteArray44, byteArray45);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray45);
        byte[] byteArray48 = comparators.Composite.serialize(objList47);
        java.util.stream.Stream<java.lang.Object> objStream49 = objList47.parallelStream();
        comparators.Composite composite50 = new comparators.Composite(objList47);
        java.lang.Object[] objArray51 = composite50.toArray();
        int int52 = composite50.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream53 = composite50.parallelStream();
        boolean boolean54 = composite28.containsAll((java.util.Collection<java.lang.Object>) composite50);
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        java.util.List<java.lang.Object> objList61 = comparators.Composite.deserialize(byteArray59);
        byte[] byteArray62 = comparators.Composite.serialize(objList61);
        java.util.stream.Stream<java.lang.Object> objStream63 = objList61.parallelStream();
        comparators.Composite composite64 = new comparators.Composite(objList61);
        java.lang.Object[] objArray65 = composite64.toArray();
        int int66 = composite64.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream67 = composite64.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream68 = composite64.parallelStream();
        int int69 = composite64.startOffset;
        composite64.clear();
        boolean boolean71 = composite28.equals((java.lang.Object) composite64);
        int int72 = comparators.Composite.compare(composite18, composite28);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(randomAccessArray12);
        org.junit.Assert.assertNotNull(composite14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNull(byteArray48);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(objList61);
        org.junit.Assert.assertNull(byteArray62);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray19 = composite10.serialize();
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        int int34 = composite29.startOffset;
        boolean boolean35 = composite29.isEmpty();
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(byteArray40);
        byte[] byteArray43 = comparators.Composite.serialize(objList42);
        java.util.stream.Stream<java.lang.Object> objStream44 = objList42.parallelStream();
        comparators.Composite composite45 = new comparators.Composite(objList42);
        int int46 = composite45.size();
        boolean boolean47 = composite29.containsAll((java.util.Collection<java.lang.Object>) composite45);
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        boolean boolean66 = comparators.Composite.validate((int) ' ', byteArray63, true);
        boolean boolean67 = composite57.contains((java.lang.Object) boolean66);
        java.util.stream.Stream<java.lang.Object> objStream68 = composite57.parallelStream();
        boolean boolean69 = composite57.isEmpty();
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray74 = new byte[] {};
        int int75 = comparators.Composite.compare(byteArray73, byteArray74);
        java.util.List<java.lang.Object> objList76 = comparators.Composite.deserialize(byteArray74);
        byte[] byteArray77 = comparators.Composite.serialize(objList76);
        java.util.stream.Stream<java.lang.Object> objStream78 = objList76.parallelStream();
        comparators.Composite composite79 = new comparators.Composite(objList76);
        java.lang.Object[] objArray80 = composite79.toArray();
        int int81 = composite79.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream82 = composite79.parallelStream();
        boolean boolean83 = composite57.containsAll((java.util.Collection<java.lang.Object>) composite79);
        comparators.Composite composite85 = composite57.addLong((long) (short) 1);
        int int86 = comparators.Composite.compare(composite29, composite85);
        composite29.clear();
        boolean boolean88 = composite10.containsAll((java.util.Collection<java.lang.Object>) composite29);
        java.io.DataOutputStream dataOutputStream89 = composite10.out;
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(objList42);
        org.junit.Assert.assertNull(byteArray43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertNull(byteArray77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(objStream82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(composite85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNull(dataOutputStream89);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        byte[] byteArray21 = composite9.bytes;
        comparators.Composite composite23 = composite9.addUTF8("Placeholder(1)");
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.lang.Object[] objArray34 = composite33.toArray();
        int int35 = composite33.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream36 = null;
        composite33.byteStream = byteArrayOutputStream36;
        boolean boolean38 = composite23.containsAll((java.util.Collection<java.lang.Object>) composite33);
        comparators.Composite composite40 = composite23.addLong((long) 13);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        java.util.List<java.lang.Object> objList55 = comparators.Composite.deserialize(byteArray53);
        byte[] byteArray56 = comparators.Composite.serialize(objList55);
        java.util.stream.Stream<java.lang.Object> objStream57 = objList55.parallelStream();
        comparators.Composite composite58 = new comparators.Composite(objList55);
        java.util.RandomAccess[] randomAccessArray59 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray60 = composite58.toArray(randomAccessArray59);
        comparators.Composite composite62 = composite58.addLong((long) 67);
        byte[] byteArray63 = composite62.serialize();
        java.util.List<java.lang.Object> objList64 = comparators.Composite.deserialize(byteArray63);
        int int65 = comparators.Composite.compare(byteArray46, byteArray63);
        comparators.hector.CompositeSerializer compositeSerializer66 = new comparators.hector.CompositeSerializer();
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray71 = new byte[] {};
        int int72 = comparators.Composite.compare(byteArray70, byteArray71);
        java.util.List<java.lang.Object> objList73 = comparators.Composite.deserialize(byteArray71);
        byte[] byteArray74 = comparators.Composite.serialize(objList73);
        java.util.stream.Stream<java.lang.Object> objStream75 = objList73.parallelStream();
        comparators.Composite composite76 = new comparators.Composite(objList73);
        java.lang.Object[] objArray77 = composite76.toArray();
        int int78 = composite76.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream79 = composite76.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream80 = composite76.parallelStream();
        comparators.Composite composite82 = composite76.addBool(true);
        java.io.DataOutputStream dataOutputStream83 = composite76.out;
        byte[] byteArray84 = compositeSerializer66.toBytes(composite76);
        int int85 = comparators.Composite.compare(byteArray63, byteArray84);
        boolean boolean87 = comparators.Composite.validate(67, byteArray84, true);
        java.util.List<java.lang.Object> objList88 = comparators.Composite.deserialize(byteArray84);
        boolean boolean89 = composite40.equals((java.lang.Object) byteArray84);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(composite23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(composite40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(objList55);
        org.junit.Assert.assertNull(byteArray56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertNotNull(randomAccessArray59);
        org.junit.Assert.assertNotNull(randomAccessArray60);
        org.junit.Assert.assertNotNull(composite62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(objList73);
        org.junit.Assert.assertNull(byteArray74);
        org.junit.Assert.assertNotNull(objStream75);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(objStream79);
        org.junit.Assert.assertNotNull(objStream80);
        org.junit.Assert.assertNotNull(composite82);
        org.junit.Assert.assertNotNull(dataOutputStream83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(objList88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        comparators.CompositeType compositeType19 = comparators.CompositeType.instance;
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        java.lang.Object[] objArray44 = composite43.toArray();
        int int45 = composite43.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream46 = composite43.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream47 = composite43.parallelStream();
        int int48 = composite43.startOffset;
        int int49 = composite29.compareTo(composite43);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        comparators.Composite composite56 = composite29.addBytes(byteArray54);
        java.nio.ByteBuffer byteBuffer57 = composite56.serializeToByteBuffer();
        compositeType19.validate(byteBuffer57);
        boolean boolean59 = comparators.Composite.validate(byteBuffer57);
        boolean boolean60 = comparators.Composite.validate(byteBuffer57);
        comparators.Composite composite61 = compositeSerializer0.fromByteBuffer(byteBuffer57);
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        java.util.List<java.lang.Object> objList68 = comparators.Composite.deserialize(byteArray66);
        byte[] byteArray69 = comparators.Composite.serialize(objList68);
        java.util.stream.Stream<java.lang.Object> objStream70 = objList68.parallelStream();
        comparators.Composite composite71 = new comparators.Composite(objList68);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        boolean boolean80 = comparators.Composite.validate((int) ' ', byteArray77, true);
        boolean boolean81 = composite71.contains((java.lang.Object) boolean80);
        java.util.stream.Stream<java.lang.Object> objStream82 = composite71.parallelStream();
        composite71.startOffset = 8;
        comparators.Composite composite86 = composite71.addAscii("hi!");
        java.lang.String str87 = composite71.toString();
        byte[] byteArray88 = composite71.bytes;
        comparators.Composite composite89 = compositeSerializer0.fromBytes(byteArray88);
        int int91 = compositeSerializer0.computeInitialHashSize(138);
        java.util.Set<java.nio.ByteBuffer> byteBufferSet92 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<comparators.Composite> compositeList93 = compositeSerializer0.fromBytesSet(byteBufferSet92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(compositeType19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(composite56);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(composite61);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(objList68);
        org.junit.Assert.assertNull(byteArray69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objStream82);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[67, 77, 80, 1, 7, 0, 3, 104, 105, 33, 0]");
        org.junit.Assert.assertNotNull(composite89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 185 + "'", int91 == 185);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        comparators.hector.CompositeListSerializer compositeListSerializer1 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType2 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray3 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList4 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList4, byteBufferArray3);
        java.lang.String str6 = compositeType2.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList4);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator7 = compositeType2.indexComparator;
        comparators.CompositeType compositeType8 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray9 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList10 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList10, byteBufferArray9);
        java.lang.String str12 = compositeType8.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList10);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = compositeType2.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType8);
        comparators.CompositeType compositeType14 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray15 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList16 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16, byteBufferArray15);
        java.lang.String str18 = compositeType14.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16);
        java.lang.String str19 = compositeType8.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList16);
        java.util.List<java.util.List<java.lang.Object>> objListList20 = compositeListSerializer1.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList16);
        int int22 = compositeListSerializer1.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer23 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType24 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray25 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList26 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList26, byteBufferArray25);
        java.lang.String str28 = compositeType24.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList26);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator29 = compositeType24.indexComparator;
        comparators.CompositeType compositeType30 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray31 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList32 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32, byteBufferArray31);
        java.lang.String str34 = compositeType30.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator35 = compositeType24.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType30);
        comparators.CompositeType compositeType36 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray37 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList38 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38, byteBufferArray37);
        java.lang.String str40 = compositeType36.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38);
        java.lang.String str41 = compositeType30.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList38);
        java.util.List<java.util.List<java.lang.Object>> objListList42 = compositeListSerializer23.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList38);
        java.util.List<java.nio.ByteBuffer> byteBufferList43 = compositeListSerializer1.toBytesList(objListList42);
        java.lang.String str44 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList43);
        comparators.CompositeType compositeType45 = comparators.CompositeType.instance;
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        java.util.List<java.lang.Object> objList52 = comparators.Composite.deserialize(byteArray50);
        byte[] byteArray53 = comparators.Composite.serialize(objList52);
        java.util.stream.Stream<java.lang.Object> objStream54 = objList52.parallelStream();
        comparators.Composite composite55 = new comparators.Composite(objList52);
        java.lang.Object[] objArray56 = composite55.toArray();
        int int57 = composite55.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream58 = composite55.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream59 = composite55.parallelStream();
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(byteArray64);
        byte[] byteArray67 = comparators.Composite.serialize(objList66);
        java.util.stream.Stream<java.lang.Object> objStream68 = objList66.parallelStream();
        comparators.Composite composite69 = new comparators.Composite(objList66);
        java.lang.Object[] objArray70 = composite69.toArray();
        int int71 = composite69.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream72 = composite69.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream73 = composite69.parallelStream();
        int int74 = composite69.startOffset;
        int int75 = composite55.compareTo(composite69);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        comparators.Composite composite82 = composite55.addBytes(byteArray80);
        java.nio.ByteBuffer byteBuffer83 = composite82.serializeToByteBuffer();
        compositeType45.validate(byteBuffer83);
        boolean boolean85 = comparators.Composite.validate(byteBuffer83);
        comparators.Composite composite86 = new comparators.Composite(byteBuffer83);
        boolean boolean87 = comparators.Composite.validate(byteBuffer83);
        compositeType0.validate(byteBuffer83);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator89 = compositeType0.reversed();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator90 = compositeType0.getReverseComparator();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(compositeType2);
        org.junit.Assert.assertNotNull(byteBufferArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(indexInfoComparator7);
        org.junit.Assert.assertNotNull(compositeType8);
        org.junit.Assert.assertNotNull(byteBufferArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteBufferComparator13);
        org.junit.Assert.assertNotNull(compositeType14);
        org.junit.Assert.assertNotNull(byteBufferArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(objListList20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 6 + "'", int22 == 6);
        org.junit.Assert.assertNotNull(compositeType24);
        org.junit.Assert.assertNotNull(byteBufferArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(indexInfoComparator29);
        org.junit.Assert.assertNotNull(compositeType30);
        org.junit.Assert.assertNotNull(byteBufferArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteBufferComparator35);
        org.junit.Assert.assertNotNull(compositeType36);
        org.junit.Assert.assertNotNull(byteBufferArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(objListList42);
        org.junit.Assert.assertNotNull(byteBufferList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(compositeType45);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(objList52);
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(objList66);
        org.junit.Assert.assertNull(byteArray67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(composite82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(byteBufferComparator89);
        org.junit.Assert.assertNotNull(byteBufferComparator90);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray13 = new byte[] {};
        int int14 = comparators.Composite.compare(byteArray12, byteArray13);
        java.util.List<java.lang.Object> objList15 = comparators.Composite.deserialize(byteArray13);
        byte[] byteArray16 = comparators.Composite.serialize(objList15);
        java.util.stream.Stream<java.lang.Object> objStream17 = objList15.parallelStream();
        comparators.Composite composite18 = new comparators.Composite(objList15);
        java.util.RandomAccess[] randomAccessArray19 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray20 = composite18.toArray(randomAccessArray19);
        comparators.Composite composite22 = composite18.addLong((long) 67);
        byte[] byteArray23 = composite22.serialize();
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray23);
        int int25 = comparators.Composite.compare(byteArray6, byteArray23);
        comparators.hector.CompositeSerializer compositeSerializer26 = new comparators.hector.CompositeSerializer();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        comparators.Composite composite42 = composite36.addBool(true);
        java.io.DataOutputStream dataOutputStream43 = composite36.out;
        byte[] byteArray44 = compositeSerializer26.toBytes(composite36);
        int int45 = comparators.Composite.compare(byteArray23, byteArray44);
        boolean boolean46 = comparators.Composite.validate(1, byteArray44);
        java.util.List<java.lang.Object> objList47 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray48 = comparators.Composite.serialize(objList47);
        byte[] byteArray49 = comparators.Composite.serialize(objList47);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        java.util.RandomAccess[] randomAccessArray60 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray61 = composite59.toArray(randomAccessArray60);
        comparators.Composite composite63 = composite59.addLong((long) 67);
        byte[] byteArray64 = composite63.serialize();
        int int65 = comparators.Composite.compare(byteArray49, byteArray64);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = comparators.Composite.validate(2, byteArray49, true);
            org.junit.Assert.fail("Expected exception of type org.apache.cassandra.db.marshal.MarshalException; message: Not a composite type (ID byte 0 incorrect)");
        } catch (org.apache.cassandra.db.marshal.MarshalException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(objList15);
        org.junit.Assert.assertNull(byteArray16);
        org.junit.Assert.assertNotNull(objStream17);
        org.junit.Assert.assertNotNull(randomAccessArray19);
        org.junit.Assert.assertNotNull(randomAccessArray20);
        org.junit.Assert.assertNotNull(composite22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(composite42);
        org.junit.Assert.assertNotNull(dataOutputStream43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objList47);
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(randomAccessArray60);
        org.junit.Assert.assertNotNull(randomAccessArray61);
        org.junit.Assert.assertNotNull(composite63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        int int30 = composite25.startOffset;
        int int31 = composite11.compareTo(composite25);
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        comparators.Composite composite38 = composite11.addBytes(byteArray36);
        java.nio.ByteBuffer byteBuffer39 = composite38.serializeToByteBuffer();
        compositeType1.validate(byteBuffer39);
        boolean boolean41 = comparators.Composite.validate(byteBuffer39);
        comparators.Composite composite42 = new comparators.Composite(byteBuffer39);
        java.nio.ByteBuffer byteBuffer43 = null;
        int int44 = compositeType0.compare(byteBuffer39, byteBuffer43);
        comparators.CompositeType compositeType45 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator46 = compositeType45.indexReverseComparator;
        comparators.CompositeType compositeType47 = comparators.CompositeType.instance;
        byte[] byteArray51 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray52 = new byte[] {};
        int int53 = comparators.Composite.compare(byteArray51, byteArray52);
        java.util.List<java.lang.Object> objList54 = comparators.Composite.deserialize(byteArray52);
        byte[] byteArray55 = comparators.Composite.serialize(objList54);
        java.util.stream.Stream<java.lang.Object> objStream56 = objList54.parallelStream();
        comparators.Composite composite57 = new comparators.Composite(objList54);
        java.lang.Object[] objArray58 = composite57.toArray();
        int int59 = composite57.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream60 = composite57.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream61 = composite57.parallelStream();
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        java.util.List<java.lang.Object> objList68 = comparators.Composite.deserialize(byteArray66);
        byte[] byteArray69 = comparators.Composite.serialize(objList68);
        java.util.stream.Stream<java.lang.Object> objStream70 = objList68.parallelStream();
        comparators.Composite composite71 = new comparators.Composite(objList68);
        java.lang.Object[] objArray72 = composite71.toArray();
        int int73 = composite71.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream74 = composite71.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream75 = composite71.parallelStream();
        int int76 = composite71.startOffset;
        int int77 = composite57.compareTo(composite71);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray82 = new byte[] {};
        int int83 = comparators.Composite.compare(byteArray81, byteArray82);
        comparators.Composite composite84 = composite57.addBytes(byteArray82);
        java.nio.ByteBuffer byteBuffer85 = composite84.serializeToByteBuffer();
        compositeType47.validate(byteBuffer85);
        java.util.List<java.lang.Object> objList87 = comparators.Composite.deserialize(byteBuffer85);
        java.lang.String str88 = compositeType45.getString(byteBuffer85);
        int int89 = comparators.Composite.compare(byteBuffer39, byteBuffer85);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(indexInfoComparator46);
        org.junit.Assert.assertNotNull(compositeType47);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(objList54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(objList68);
        org.junit.Assert.assertNull(byteArray69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(objStream74);
        org.junit.Assert.assertNotNull(objStream75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(composite84);
        org.junit.Assert.assertNotNull(byteBuffer85);
        org.junit.Assert.assertNotNull(objList87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        int int14 = composite9.startOffset;
        int int15 = composite9.startOffset;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        boolean boolean34 = comparators.Composite.validate((int) ' ', byteArray31, true);
        boolean boolean35 = composite25.contains((java.lang.Object) boolean34);
        java.util.Spliterator<java.lang.Object> objSpliterator36 = composite25.spliterator();
        boolean boolean37 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite25);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray38 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray39 = composite9.toArray(compositeListSerializerArray38);
        comparators.Composite composite40 = new comparators.Composite((java.lang.Object[]) compositeListSerializerArray38);
        comparators.CompositeType compositeType41 = comparators.CompositeType.instance;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.nio.ByteBuffer byteBuffer79 = composite78.serializeToByteBuffer();
        compositeType41.validate(byteBuffer79);
        boolean boolean81 = comparators.Composite.validate(byteBuffer79);
        comparators.Composite composite82 = new comparators.Composite(byteBuffer79);
        comparators.Composite composite83 = new comparators.Composite(byteBuffer79);
        int int84 = comparators.Composite.compare(composite40, composite83);
        java.util.Spliterator<java.lang.Object> objSpliterator85 = composite40.spliterator();
        boolean boolean86 = comparators.Composite.isValidType((java.lang.Object) objSpliterator85);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objSpliterator36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray38);
        org.junit.Assert.assertNotNull(compositeListSerializerArray39);
        org.junit.Assert.assertNotNull(compositeType41);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(objSpliterator85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        int int81 = compositeTypeIterator80.start;
        int int82 = compositeTypeIterator80.type;
        compositeTypeIterator80.start = 19;
        int int85 = compositeTypeIterator80.offset;
        int int86 = compositeTypeIterator80.len;
        comparators.Composite composite87 = compositeTypeIterator80.collection;
        java.lang.Class<?> wildcardClass88 = compositeTypeIterator80.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 67 + "'", int81 == 67);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(composite87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        java.lang.Object[] objArray13 = composite9.toArray();
        int int14 = composite9.startOffset;
        composite9.clear();
        java.util.UUID uUID16 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite17 = composite9.addTimeUUID(uUID16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        byte[] byteArray24 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray25 = new byte[] {};
        int int26 = comparators.Composite.compare(byteArray24, byteArray25);
        java.util.List<java.lang.Object> objList27 = comparators.Composite.deserialize(byteArray25);
        byte[] byteArray28 = comparators.Composite.serialize(objList27);
        java.util.stream.Stream<java.lang.Object> objStream29 = objList27.parallelStream();
        comparators.Composite composite30 = new comparators.Composite(objList27);
        java.lang.Object[] objArray31 = composite30.toArray();
        comparators.Composite composite32 = new comparators.Composite();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite32.compareTo(composite42);
        comparators.hector.CompositeListSerializer compositeListSerializer48 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType49 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray50 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList51 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51, byteBufferArray50);
        java.lang.String str53 = compositeType49.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList51);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator54 = compositeType49.indexComparator;
        comparators.CompositeType compositeType55 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray56 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList57 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57, byteBufferArray56);
        java.lang.String str59 = compositeType55.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList57);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator60 = compositeType49.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType55);
        comparators.CompositeType compositeType61 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray62 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList63 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList63, byteBufferArray62);
        java.lang.String str65 = compositeType61.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList63);
        java.lang.String str66 = compositeType55.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList63);
        java.util.List<java.util.List<java.lang.Object>> objListList67 = compositeListSerializer48.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList63);
        comparators.CompositeType compositeType68 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator69 = compositeType68.indexComparator;
        comparators.CompositeType compositeType70 = comparators.CompositeType.instance;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator71 = compositeType68.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType70);
        java.lang.Object[] objArray72 = new java.lang.Object[] { compositeListSerializer48, compositeType70 };
        java.lang.Object[][] objArray73 = new java.lang.Object[][] { objArray72 };
        java.lang.Object[][] objArray74 = composite32.toArray(objArray73);
        java.lang.Object[][] objArray75 = composite30.toArray(objArray74);
        boolean boolean76 = composite9.addAll((java.util.Collection<java.lang.Object>) composite30);
        comparators.Composite composite78 = composite30.addLong(10L);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(objList27);
        org.junit.Assert.assertNull(byteArray28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(compositeType49);
        org.junit.Assert.assertNotNull(byteBufferArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(indexInfoComparator54);
        org.junit.Assert.assertNotNull(compositeType55);
        org.junit.Assert.assertNotNull(byteBufferArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteBufferComparator60);
        org.junit.Assert.assertNotNull(compositeType61);
        org.junit.Assert.assertNotNull(byteBufferArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(objListList67);
        org.junit.Assert.assertNotNull(indexInfoComparator69);
        org.junit.Assert.assertNotNull(compositeType70);
        org.junit.Assert.assertNotNull(byteBufferComparator71);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(composite78);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        byte[] byteArray11 = compositeListSerializer0.toBytes(objList7);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        byte[] byteArray20 = comparators.Composite.serialize(objList18);
        byte[] byteArray21 = compositeListSerializer0.toBytes(objList18);
        byte[] byteArray22 = null;
        java.util.List<java.lang.Object> objList23 = compositeListSerializer0.fromBytes(byteArray22);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.util.RandomAccess[] randomAccessArray34 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray35 = composite33.toArray(randomAccessArray34);
        comparators.Composite composite37 = composite33.addLong((long) 67);
        byte[] byteArray38 = composite37.serialize();
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray38);
        comparators.Composite composite40 = new comparators.Composite(objList39);
        byte[] byteArray41 = compositeListSerializer0.toBytes(objList39);
        comparators.hector.CompositeListSerializer compositeListSerializer42 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        byte[] byteArray53 = compositeListSerializer42.toBytes(objList49);
        comparators.hector.CompositeSerializer compositeSerializer54 = new comparators.hector.CompositeSerializer();
        byte[] byteArray58 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray59 = new byte[] {};
        int int60 = comparators.Composite.compare(byteArray58, byteArray59);
        java.util.List<java.lang.Object> objList61 = comparators.Composite.deserialize(byteArray59);
        byte[] byteArray62 = comparators.Composite.serialize(objList61);
        java.util.stream.Stream<java.lang.Object> objStream63 = objList61.parallelStream();
        comparators.Composite composite64 = new comparators.Composite(objList61);
        java.lang.Object[] objArray65 = composite64.toArray();
        int int66 = composite64.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream67 = composite64.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream68 = composite64.parallelStream();
        comparators.Composite composite70 = composite64.addBool(true);
        java.io.DataOutputStream dataOutputStream71 = composite64.out;
        byte[] byteArray72 = compositeSerializer54.toBytes(composite64);
        byte[] byteArray73 = composite64.serialize();
        boolean boolean74 = comparators.Composite.isValidType((java.lang.Object) composite64);
        byte[] byteArray75 = composite64.bytes;
        java.util.List<java.lang.Object> objList76 = compositeListSerializer42.fromBytes(byteArray75);
        byte[] byteArray77 = compositeListSerializer0.toBytes(objList76);
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray82 = new byte[] {};
        int int83 = comparators.Composite.compare(byteArray81, byteArray82);
        java.util.List<java.lang.Object> objList84 = comparators.Composite.deserialize(byteArray82);
        byte[] byteArray85 = comparators.Composite.serialize(objList84);
        byte[] byteArray86 = comparators.Composite.serialize(objList84);
        byte[] byteArray87 = compositeListSerializer0.toBytes(objList84);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(randomAccessArray34);
        org.junit.Assert.assertNotNull(randomAccessArray35);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(objList61);
        org.junit.Assert.assertNull(byteArray62);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(composite70);
        org.junit.Assert.assertNotNull(dataOutputStream71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(objList84);
        org.junit.Assert.assertNull(byteArray85);
        org.junit.Assert.assertNull(byteArray86);
        org.junit.Assert.assertNull(byteArray87);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        int int86 = compositeTypeIterator80.start;
        comparators.Composite composite87 = compositeTypeIterator80.collection;
        compositeTypeIterator80.len = 32;
        comparators.Composite composite90 = compositeTypeIterator80.collection;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 67 + "'", int86 == 67);
        org.junit.Assert.assertNotNull(composite87);
        org.junit.Assert.assertNotNull(composite90);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        comparators.Composite composite0 = new comparators.Composite();
        comparators.Composite composite2 = composite0.addUTF8("Placeholder(58)");
        comparators.Composite composite4 = composite2.addLong((long) (-1));
        byte[] byteArray6 = null;
        comparators.hector.CompositeSerializer compositeSerializer9 = new comparators.hector.CompositeSerializer();
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray14);
        byte[] byteArray17 = comparators.Composite.serialize(objList16);
        java.util.stream.Stream<java.lang.Object> objStream18 = objList16.parallelStream();
        comparators.Composite composite19 = new comparators.Composite(objList16);
        java.util.RandomAccess[] randomAccessArray20 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray21 = composite19.toArray(randomAccessArray20);
        comparators.Composite composite23 = composite19.addLong((long) 67);
        byte[] byteArray24 = composite23.serialize();
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray24);
        comparators.Composite composite26 = new comparators.Composite(byteArray24);
        comparators.Composite composite27 = compositeSerializer9.fromBytes(byteArray24);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(0, byteArray24);
        int int29 = comparators.Composite.compare(77, byteArray6, (int) (short) 10, byteArray24);
        composite2.bytes = byteArray24;
        org.junit.Assert.assertNotNull(composite2);
        org.junit.Assert.assertNotNull(composite4);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(randomAccessArray20);
        org.junit.Assert.assertNotNull(randomAccessArray21);
        org.junit.Assert.assertNotNull(composite23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNotNull(composite27);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray14);
        byte[] byteArray17 = comparators.Composite.serialize(objList16);
        java.util.stream.Stream<java.lang.Object> objStream18 = objList16.parallelStream();
        comparators.Composite composite19 = new comparators.Composite(objList16);
        java.lang.Object[] objArray20 = composite19.toArray();
        int int21 = composite19.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream22 = composite19.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream23 = composite19.parallelStream();
        int int24 = composite19.startOffset;
        int int25 = comparators.Composite.compare(composite9, composite19);
        composite9.clear();
        java.util.Iterator<java.lang.Object> objItor27 = composite9.iterator();
        int int28 = composite9.startOffset;
        java.io.DataOutput[] dataOutputArray29 = new java.io.DataOutput[] {};
        java.io.DataOutput[] dataOutputArray30 = composite9.toArray(dataOutputArray29);
        java.util.Iterator<java.lang.Object> objItor31 = composite9.iterator();
        comparators.Composite composite33 = composite9.addAscii("Placeholder(95)");
        byte[] byteArray37 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray38 = new byte[] {};
        int int39 = comparators.Composite.compare(byteArray37, byteArray38);
        java.util.List<java.lang.Object> objList40 = comparators.Composite.deserialize(byteArray38);
        byte[] byteArray41 = comparators.Composite.serialize(objList40);
        java.util.stream.Stream<java.lang.Object> objStream42 = objList40.parallelStream();
        comparators.Composite composite43 = new comparators.Composite(objList40);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        java.util.List<java.lang.Object> objList50 = comparators.Composite.deserialize(byteArray48);
        byte[] byteArray51 = comparators.Composite.serialize(objList50);
        java.util.stream.Stream<java.lang.Object> objStream52 = objList50.parallelStream();
        comparators.Composite composite53 = new comparators.Composite(objList50);
        java.lang.Object[] objArray54 = composite53.toArray();
        int int55 = composite53.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream56 = composite53.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream57 = composite53.parallelStream();
        int int58 = composite53.startOffset;
        int int59 = comparators.Composite.compare(composite43, composite53);
        composite43.clear();
        byte[] byteArray61 = composite43.bytes;
        java.util.Spliterator<java.lang.Object> objSpliterator62 = composite43.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean63 = composite33.add((java.lang.Object) objSpliterator62);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objItor27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dataOutputArray29);
        org.junit.Assert.assertNotNull(dataOutputArray30);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(objList40);
        org.junit.Assert.assertNull(byteArray41);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(objList50);
        org.junit.Assert.assertNull(byteArray51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray54), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(objStream56);
        org.junit.Assert.assertNotNull(objStream57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNull(byteArray61);
        org.junit.Assert.assertNotNull(objSpliterator62);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        int int12 = composite9.startOffset;
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        byte[] byteArray25 = composite22.bytes;
        java.io.DataOutputStream dataOutputStream26 = null;
        composite22.out = dataOutputStream26;
        int int28 = comparators.Composite.compare(composite9, composite22);
        byte[] byteArray32 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray33 = new byte[] {};
        int int34 = comparators.Composite.compare(byteArray32, byteArray33);
        java.util.List<java.lang.Object> objList35 = comparators.Composite.deserialize(byteArray33);
        byte[] byteArray36 = comparators.Composite.serialize(objList35);
        java.util.stream.Stream<java.lang.Object> objStream37 = objList35.parallelStream();
        comparators.Composite composite38 = new comparators.Composite(objList35);
        java.lang.Object[] objArray39 = composite38.toArray();
        comparators.CompositeType compositeType40 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray41 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList42 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42, byteBufferArray41);
        java.lang.String str44 = compositeType40.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList42);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator45 = compositeType40.indexComparator;
        comparators.CompositeType compositeType46 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray47 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList48 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48, byteBufferArray47);
        java.lang.String str50 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList48);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator51 = compositeType40.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType46);
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray53 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList54 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54, byteBufferArray53);
        java.lang.String str56 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        java.lang.String str57 = compositeType46.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        comparators.CompositeType compositeType58 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray59 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList60 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60, byteBufferArray59);
        java.lang.String str62 = compositeType58.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList60);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator63 = compositeType58.indexComparator;
        comparators.CompositeType compositeType64 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray65 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList66 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList66, byteBufferArray65);
        java.lang.String str68 = compositeType64.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList66);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator69 = compositeType58.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType64);
        comparators.CompositeType compositeType70 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray71 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList72 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList72, byteBufferArray71);
        java.lang.String str74 = compositeType70.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList72);
        java.lang.String str75 = compositeType64.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList72);
        java.util.AbstractList[] abstractListArray77 = new java.util.AbstractList[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray78 = (java.util.AbstractList<java.nio.ByteBuffer>[]) abstractListArray77;
        byteBufferListArray78[0] = byteBufferList54;
        byteBufferListArray78[1] = byteBufferList72;
        java.util.AbstractList<java.nio.ByteBuffer>[] byteBufferListArray83 = composite38.toArray(byteBufferListArray78);
        java.util.stream.Stream<java.lang.Object> objStream84 = composite38.parallelStream();
        comparators.Composite composite86 = composite38.addUTF8("UTF-8");
        int int87 = composite22.compareTo(composite86);
        comparators.Composite composite89 = composite22.addLong((long) '4');
        composite22.startOffset = ' ';
        byte[] byteArray92 = composite22.bytes;
        comparators.Composite composite94 = composite22.addUTF8("US-ASCII");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(objList35);
        org.junit.Assert.assertNull(byteArray36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(compositeType40);
        org.junit.Assert.assertNotNull(byteBufferArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(indexInfoComparator45);
        org.junit.Assert.assertNotNull(compositeType46);
        org.junit.Assert.assertNotNull(byteBufferArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(byteBufferComparator51);
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(compositeType58);
        org.junit.Assert.assertNotNull(byteBufferArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(indexInfoComparator63);
        org.junit.Assert.assertNotNull(compositeType64);
        org.junit.Assert.assertNotNull(byteBufferArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteBufferComparator69);
        org.junit.Assert.assertNotNull(compositeType70);
        org.junit.Assert.assertNotNull(byteBufferArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(abstractListArray77);
        org.junit.Assert.assertNotNull(byteBufferListArray78);
        org.junit.Assert.assertNotNull(byteBufferListArray83);
        org.junit.Assert.assertNotNull(objStream84);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(composite89);
        org.junit.Assert.assertNull(byteArray92);
        org.junit.Assert.assertNotNull(composite94);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(9);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        byte[] byteArray32 = compositeListSerializer0.toBytes(objList28);
        byte[] byteArray35 = null;
        byte[] byteArray40 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray41 = new byte[] {};
        int int42 = comparators.Composite.compare(byteArray40, byteArray41);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        int int49 = comparators.Composite.compare(byteArray40, byteArray47);
        int int50 = comparators.Composite.compare((int) (byte) 1, byteArray35, 10, byteArray40);
        byte[] byteArray54 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray55 = new byte[] {};
        int int56 = comparators.Composite.compare(byteArray54, byteArray55);
        byte[] byteArray60 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray61 = new byte[] {};
        int int62 = comparators.Composite.compare(byteArray60, byteArray61);
        int int63 = comparators.Composite.compare(byteArray54, byteArray61);
        java.util.List<java.lang.Object> objList64 = comparators.Composite.deserialize(byteArray61);
        int int65 = comparators.Composite.compare(byteArray40, byteArray61);
        java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(byteArray61);
        boolean boolean68 = comparators.Composite.validate((int) (byte) 10, byteArray61, true);
        java.util.List<java.lang.Object> objList69 = compositeListSerializer0.fromBytes(byteArray61);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray74 = new byte[] {};
        int int75 = comparators.Composite.compare(byteArray73, byteArray74);
        java.util.List<java.lang.Object> objList76 = comparators.Composite.deserialize(byteArray74);
        byte[] byteArray77 = comparators.Composite.serialize(objList76);
        java.util.stream.Stream<java.lang.Object> objStream78 = objList76.parallelStream();
        comparators.Composite composite79 = new comparators.Composite(objList76);
        java.util.RandomAccess[] randomAccessArray80 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray81 = composite79.toArray(randomAccessArray80);
        comparators.Composite composite83 = composite79.addLong((long) 67);
        comparators.Composite composite85 = composite83.addBool(true);
        comparators.Composite composite87 = composite83.addLong((long) 2);
        java.nio.ByteBuffer byteBuffer88 = composite83.serializeToByteBuffer();
        java.util.List<java.lang.Object> objList89 = comparators.Composite.deserialize(byteBuffer88);
        java.util.List<java.lang.Object> objList90 = compositeListSerializer0.fromByteBuffer(byteBuffer88);
        comparators.Composite composite91 = new comparators.Composite();
        comparators.Composite composite93 = composite91.addUTF8("Placeholder(58)");
        comparators.Composite composite95 = composite93.addLong((long) (-1));
        byte[] byteArray96 = composite95.serialize();
        java.util.List<java.lang.Object> objList97 = compositeListSerializer0.fromBytes(byteArray96);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNull(byteArray32);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(objList64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(objList66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objList69);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertNull(byteArray77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(randomAccessArray80);
        org.junit.Assert.assertNotNull(randomAccessArray81);
        org.junit.Assert.assertNotNull(composite83);
        org.junit.Assert.assertNotNull(composite85);
        org.junit.Assert.assertNotNull(composite87);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertNotNull(objList89);
        org.junit.Assert.assertNotNull(objList90);
        org.junit.Assert.assertNotNull(composite93);
        org.junit.Assert.assertNotNull(composite95);
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[67, 77, 80, 1, 8, 0, 15, 80, 108, 97, 99, 101, 104, 111, 108, 100, 101, 114, 40, 53, 56, 41, 3, -1, -1, -1, -1, -1, -1, -1, -1, 0]");
        org.junit.Assert.assertNotNull(objList97);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        java.lang.Object[][][] objArray32 = new java.lang.Object[][][] {};
        java.lang.Object[][][] objArray33 = composite9.toArray(objArray32);
        java.util.Spliterator<java.lang.Object> objSpliterator34 = composite9.spliterator();
        comparators.Composite composite36 = composite9.addLong((long) (short) 10);
        byte[] byteArray37 = composite36.bytes;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(objSpliterator34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNull(byteArray37);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (short) 1;
        java.lang.String str3 = placeholder0.toString();
        boolean boolean5 = placeholder0.equals((java.lang.Object) 10L);
        int int6 = placeholder0.type;
        java.lang.String str7 = placeholder0.toString();
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Placeholder(1)" + "'", str3, "Placeholder(1)");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Placeholder(1)" + "'", str7, "Placeholder(1)");
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        int int16 = composite9.startOffset;
        comparators.CompositeType compositeType17 = new comparators.CompositeType();
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream45 = composite42.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream46 = composite42.parallelStream();
        int int47 = composite42.startOffset;
        int int48 = composite28.compareTo(composite42);
        byte[] byteArray52 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray53 = new byte[] {};
        int int54 = comparators.Composite.compare(byteArray52, byteArray53);
        comparators.Composite composite55 = composite28.addBytes(byteArray53);
        java.nio.ByteBuffer byteBuffer56 = composite55.serializeToByteBuffer();
        compositeType18.validate(byteBuffer56);
        boolean boolean58 = comparators.Composite.validate(byteBuffer56);
        comparators.Composite composite59 = new comparators.Composite(byteBuffer56);
        java.nio.ByteBuffer byteBuffer60 = null;
        int int61 = compositeType17.compare(byteBuffer56, byteBuffer60);
        comparators.Composite composite62 = new comparators.Composite(byteBuffer56);
        comparators.Composite composite63 = new comparators.Composite(byteBuffer56);
        boolean boolean64 = composite9.equals((java.lang.Object) composite63);
        java.io.ByteArrayOutputStream byteArrayOutputStream65 = composite9.byteStream;
        composite9.clear();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(byteArrayOutputStream65);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        comparators.Composite composite17 = composite15.addLong((long) 6);
        int int18 = composite15.startOffset;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        byte[] byteArray14 = composite13.serialize();
        comparators.Composite composite16 = composite13.addAscii("Placeholder(58)");
        java.util.stream.Stream<java.lang.Object> objStream17 = composite13.parallelStream();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(objStream17);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (short) 1;
        java.lang.String str3 = placeholder0.toString();
        boolean boolean5 = placeholder0.equals((java.lang.Object) 10L);
        placeholder0.type = 58;
        byte[] byteArray11 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray12 = new byte[] {};
        int int13 = comparators.Composite.compare(byteArray11, byteArray12);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray12);
        byte[] byteArray15 = comparators.Composite.serialize(objList14);
        java.util.stream.Stream<java.lang.Object> objStream16 = objList14.parallelStream();
        comparators.Composite composite17 = new comparators.Composite(objList14);
        java.lang.Object[] objArray18 = composite17.toArray();
        int int19 = composite17.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream20 = composite17.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream21 = composite17.parallelStream();
        int int22 = composite17.startOffset;
        int int23 = composite17.startOffset;
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        boolean boolean42 = comparators.Composite.validate((int) ' ', byteArray39, true);
        boolean boolean43 = composite33.contains((java.lang.Object) boolean42);
        java.util.Spliterator<java.lang.Object> objSpliterator44 = composite33.spliterator();
        boolean boolean45 = composite17.containsAll((java.util.Collection<java.lang.Object>) composite33);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray46 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray47 = composite17.toArray(compositeListSerializerArray46);
        comparators.Composite composite49 = composite17.addLong((long) (short) 100);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        int int60 = composite59.size();
        composite59.clear();
        byte[] byteArray65 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray66 = new byte[] {};
        int int67 = comparators.Composite.compare(byteArray65, byteArray66);
        java.util.List<java.lang.Object> objList68 = comparators.Composite.deserialize(byteArray66);
        byte[] byteArray69 = comparators.Composite.serialize(objList68);
        java.util.stream.Stream<java.lang.Object> objStream70 = objList68.parallelStream();
        comparators.Composite composite71 = new comparators.Composite(objList68);
        byte[] byteArray76 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray77 = new byte[] {};
        int int78 = comparators.Composite.compare(byteArray76, byteArray77);
        boolean boolean80 = comparators.Composite.validate((int) ' ', byteArray77, true);
        boolean boolean81 = composite71.contains((java.lang.Object) boolean80);
        java.util.stream.Stream<java.lang.Object> objStream82 = composite71.parallelStream();
        composite71.startOffset = 8;
        comparators.Composite composite86 = composite71.addAscii("hi!");
        boolean boolean87 = composite59.containsAll((java.util.Collection<java.lang.Object>) composite71);
        int int88 = composite49.compareTo(composite71);
        java.util.stream.Stream<java.lang.Object> objStream89 = composite71.stream();
        boolean boolean90 = placeholder0.equals((java.lang.Object) objStream89);
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Placeholder(1)" + "'", str3, "Placeholder(1)");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNull(byteArray15);
        org.junit.Assert.assertNotNull(objStream16);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objSpliterator44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray46);
        org.junit.Assert.assertNotNull(compositeListSerializerArray47);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(objList68);
        org.junit.Assert.assertNull(byteArray69);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objStream82);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(objStream89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        int int1 = placeholder0.type;
        placeholder0.type = 6;
        comparators.CompositeType compositeType4 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray5 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList6 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList6, byteBufferArray5);
        java.lang.String str8 = compositeType4.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList6);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator9 = compositeType4.indexComparator;
        boolean boolean10 = comparators.Composite.isValidType((java.lang.Object) compositeType4);
        comparators.CompositeType compositeType11 = new comparators.CompositeType();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator12 = compositeType11.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = compositeType4.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType11);
        boolean boolean14 = placeholder0.equals((java.lang.Object) byteBufferComparator13);
        java.lang.String str15 = placeholder0.toString();
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.util.RandomAccess[] randomAccessArray26 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray27 = composite25.toArray(randomAccessArray26);
        comparators.Composite composite29 = composite25.addLong((long) 67);
        byte[] byteArray30 = composite29.serialize();
        java.util.List<java.lang.Object> objList31 = comparators.Composite.deserialize(byteArray30);
        comparators.Composite composite32 = new comparators.Composite(objList31);
        java.util.Spliterator<java.lang.Object> objSpliterator33 = objList31.spliterator();
        boolean boolean34 = placeholder0.equals((java.lang.Object) objList31);
        placeholder0.type = (-5);
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 58 + "'", int1 == 58);
        org.junit.Assert.assertNotNull(compositeType4);
        org.junit.Assert.assertNotNull(byteBufferArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(indexInfoComparator9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(indexInfoComparator12);
        org.junit.Assert.assertNotNull(byteBufferComparator13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Placeholder(6)" + "'", str15, "Placeholder(6)");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(randomAccessArray26);
        org.junit.Assert.assertNotNull(randomAccessArray27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList31);
        org.junit.Assert.assertNotNull(objSpliterator33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        composite9.startOffset = 8;
        comparators.Composite composite24 = composite9.addAscii("hi!");
        java.lang.String str25 = composite9.toString();
        composite9.startOffset = 2;
        java.util.Collection<java.lang.Object> objCollection28 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = composite9.addAll(objCollection28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(composite24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite65.startOffset;
        int int72 = composite17.compareTo(composite65);
        comparators.Composite composite74 = composite17.addLong((long) 80);
        java.util.stream.Stream<java.lang.Object> objStream75 = composite17.parallelStream();
        comparators.Composite composite77 = composite17.addUTF8("Placeholder(97)");
        byte[] byteArray81 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray82 = new byte[] {};
        int int83 = comparators.Composite.compare(byteArray81, byteArray82);
        java.util.List<java.lang.Object> objList84 = comparators.Composite.deserialize(byteArray82);
        byte[] byteArray85 = comparators.Composite.serialize(objList84);
        java.util.stream.Stream<java.lang.Object> objStream86 = objList84.parallelStream();
        comparators.Composite composite87 = new comparators.Composite(objList84);
        java.util.RandomAccess[] randomAccessArray88 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray89 = composite87.toArray(randomAccessArray88);
        comparators.Composite composite91 = composite87.addLong((long) 67);
        java.util.logging.Logger logger92 = comparators.CompositeType.logger;
        boolean boolean93 = composite91.contains((java.lang.Object) logger92);
        java.nio.ByteBuffer byteBuffer94 = composite91.serializeToByteBuffer();
        int int95 = comparators.Composite.compare(composite17, composite91);
        composite17.clear();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(objStream75);
        org.junit.Assert.assertNotNull(composite77);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(objList84);
        org.junit.Assert.assertNull(byteArray85);
        org.junit.Assert.assertNotNull(objStream86);
        org.junit.Assert.assertNotNull(randomAccessArray88);
        org.junit.Assert.assertNotNull(randomAccessArray89);
        org.junit.Assert.assertNotNull(composite91);
        org.junit.Assert.assertNotNull(logger92);
        org.junit.Assert.assertEquals(logger92.getName(), "comparators.CompositeType");
        org.junit.Assert.assertNull("logger92.getResourceBundleName() == null", logger92.getResourceBundleName());
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(byteBuffer94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(9);
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        byte[] byteArray32 = compositeListSerializer0.toBytes(objList28);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.util.RandomAccess[] randomAccessArray43 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray44 = composite42.toArray(randomAccessArray43);
        comparators.Composite composite46 = composite42.addLong((long) 67);
        byte[] byteArray47 = composite46.serialize();
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray47);
        java.nio.ByteBuffer byteBuffer49 = compositeListSerializer0.toByteBuffer(objList48);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        java.lang.Object[] objArray60 = composite59.toArray();
        int int61 = composite59.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream62 = composite59.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream63 = composite59.parallelStream();
        byte[] byteArray67 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray68 = new byte[] {};
        int int69 = comparators.Composite.compare(byteArray67, byteArray68);
        java.util.List<java.lang.Object> objList70 = comparators.Composite.deserialize(byteArray68);
        byte[] byteArray71 = comparators.Composite.serialize(objList70);
        java.util.stream.Stream<java.lang.Object> objStream72 = objList70.parallelStream();
        comparators.Composite composite73 = new comparators.Composite(objList70);
        java.lang.Object[] objArray74 = composite73.toArray();
        int int75 = composite73.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream76 = composite73.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream77 = composite73.parallelStream();
        int int78 = composite73.startOffset;
        int int79 = composite59.compareTo(composite73);
        byte[] byteArray83 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray84 = new byte[] {};
        int int85 = comparators.Composite.compare(byteArray83, byteArray84);
        comparators.Composite composite86 = composite59.addBytes(byteArray84);
        java.nio.ByteBuffer byteBuffer87 = composite86.serializeToByteBuffer();
        java.util.List<java.lang.Object> objList88 = comparators.Composite.deserialize(byteBuffer87);
        byte[] byteArray89 = compositeListSerializer0.toBytes(objList88);
        comparators.Composite composite90 = new comparators.Composite(byteArray89);
        int int91 = composite90.startOffset;
        int int92 = composite90.size();
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 13 + "'", int21 == 13);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNull(byteArray32);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(randomAccessArray43);
        org.junit.Assert.assertNotNull(randomAccessArray44);
        org.junit.Assert.assertNotNull(composite46);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(objList70);
        org.junit.Assert.assertNull(byteArray71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(objStream76);
        org.junit.Assert.assertNotNull(objStream77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(objList88);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[67, 77, 80, 1, 9, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (short) 1;
        java.lang.String str3 = placeholder0.toString();
        placeholder0.type = (short) 100;
        byte[] byteArray9 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray10 = new byte[] {};
        int int11 = comparators.Composite.compare(byteArray9, byteArray10);
        java.util.List<java.lang.Object> objList12 = comparators.Composite.deserialize(byteArray10);
        byte[] byteArray13 = comparators.Composite.serialize(objList12);
        java.util.stream.Stream<java.lang.Object> objStream14 = objList12.parallelStream();
        comparators.Composite composite15 = new comparators.Composite(objList12);
        java.lang.Object[] objArray16 = composite15.toArray();
        int int17 = composite15.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream18 = composite15.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream19 = composite15.parallelStream();
        int int20 = composite15.startOffset;
        int int21 = composite15.startOffset;
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        boolean boolean40 = comparators.Composite.validate((int) ' ', byteArray37, true);
        boolean boolean41 = composite31.contains((java.lang.Object) boolean40);
        java.util.Spliterator<java.lang.Object> objSpliterator42 = composite31.spliterator();
        boolean boolean43 = composite15.containsAll((java.util.Collection<java.lang.Object>) composite31);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray44 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray45 = composite15.toArray(compositeListSerializerArray44);
        comparators.Composite composite46 = new comparators.Composite((java.lang.Object[]) compositeListSerializerArray45);
        int int47 = composite46.startOffset;
        boolean boolean48 = placeholder0.equals((java.lang.Object) int47);
        int int49 = placeholder0.type;
        int int50 = placeholder0.type;
        java.lang.String str51 = placeholder0.toString();
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Placeholder(1)" + "'", str3, "Placeholder(1)");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(objList12);
        org.junit.Assert.assertNull(byteArray13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(objStream19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objSpliterator42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray44);
        org.junit.Assert.assertNotNull(compositeListSerializerArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Placeholder(100)" + "'", str51, "Placeholder(100)");
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        comparators.Composite composite33 = composite23.addAscii("Placeholder(100)");
        comparators.hector.CompositeListSerializer compositeListSerializer34 = new comparators.hector.CompositeListSerializer();
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        byte[] byteArray45 = compositeListSerializer34.toBytes(objList41);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        java.util.List<java.lang.Object> objList52 = comparators.Composite.deserialize(byteArray50);
        byte[] byteArray53 = comparators.Composite.serialize(objList52);
        byte[] byteArray54 = comparators.Composite.serialize(objList52);
        byte[] byteArray55 = compositeListSerializer34.toBytes(objList52);
        byte[] byteArray56 = null;
        java.util.List<java.lang.Object> objList57 = compositeListSerializer34.fromBytes(byteArray56);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = composite33.remove((java.lang.Object) objList57);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNull(byteArray45);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(objList52);
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertNull(byteArray54);
        org.junit.Assert.assertNull(byteArray55);
        org.junit.Assert.assertNotNull(objList57);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        int int13 = composite10.startOffset;
        byte[] byteArray14 = compositeSerializer0.toBytes(composite10);
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        byte[] byteArray19 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray20 = new byte[] {};
        int int21 = comparators.Composite.compare(byteArray19, byteArray20);
        java.util.List<java.lang.Object> objList22 = comparators.Composite.deserialize(byteArray20);
        byte[] byteArray23 = comparators.Composite.serialize(objList22);
        java.util.stream.Stream<java.lang.Object> objStream24 = objList22.parallelStream();
        comparators.Composite composite25 = new comparators.Composite(objList22);
        java.lang.Object[] objArray26 = composite25.toArray();
        int int27 = composite25.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite25.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream29 = composite25.parallelStream();
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        java.util.List<java.lang.Object> objList36 = comparators.Composite.deserialize(byteArray34);
        byte[] byteArray37 = comparators.Composite.serialize(objList36);
        java.util.stream.Stream<java.lang.Object> objStream38 = objList36.parallelStream();
        comparators.Composite composite39 = new comparators.Composite(objList36);
        java.lang.Object[] objArray40 = composite39.toArray();
        int int41 = composite39.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream42 = composite39.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream43 = composite39.parallelStream();
        int int44 = composite39.startOffset;
        int int45 = composite25.compareTo(composite39);
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        comparators.Composite composite52 = composite25.addBytes(byteArray50);
        java.nio.ByteBuffer byteBuffer53 = composite52.serializeToByteBuffer();
        compositeType15.validate(byteBuffer53);
        boolean boolean55 = comparators.Composite.validate(byteBuffer53);
        boolean boolean56 = comparators.Composite.validate(byteBuffer53);
        comparators.Composite composite57 = compositeSerializer0.fromByteBuffer(byteBuffer53);
        comparators.hector.CompositeSerializer compositeSerializer58 = new comparators.hector.CompositeSerializer();
        byte[] byteArray62 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray63 = new byte[] {};
        int int64 = comparators.Composite.compare(byteArray62, byteArray63);
        java.util.List<java.lang.Object> objList65 = comparators.Composite.deserialize(byteArray63);
        byte[] byteArray66 = comparators.Composite.serialize(objList65);
        java.util.stream.Stream<java.lang.Object> objStream67 = objList65.parallelStream();
        comparators.Composite composite68 = new comparators.Composite(objList65);
        java.lang.Object[] objArray69 = composite68.toArray();
        int int70 = composite68.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream71 = composite68.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream72 = composite68.parallelStream();
        comparators.Composite composite74 = composite68.addBool(true);
        java.io.DataOutputStream dataOutputStream75 = composite68.out;
        byte[] byteArray76 = compositeSerializer58.toBytes(composite68);
        byte[] byteArray77 = composite68.serialize();
        comparators.Composite composite78 = compositeSerializer0.fromBytes(byteArray77);
        java.util.UUID uUID79 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite80 = composite78.addLexicalUUID(uUID79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(objList22);
        org.junit.Assert.assertNull(byteArray23);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(objList36);
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(objStream42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(composite52);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(composite57);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(objList65);
        org.junit.Assert.assertNull(byteArray66);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(objStream71);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(dataOutputStream75);
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(composite78);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray13 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray14 = new byte[] {};
        int int15 = comparators.Composite.compare(byteArray13, byteArray14);
        java.util.List<java.lang.Object> objList16 = comparators.Composite.deserialize(byteArray14);
        byte[] byteArray17 = comparators.Composite.serialize(objList16);
        java.util.stream.Stream<java.lang.Object> objStream18 = objList16.parallelStream();
        comparators.Composite composite19 = new comparators.Composite(objList16);
        java.lang.Object[] objArray20 = composite19.toArray();
        int int21 = composite19.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream22 = composite19.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream23 = composite19.parallelStream();
        int int24 = composite19.startOffset;
        int int25 = comparators.Composite.compare(composite9, composite19);
        composite9.clear();
        byte[] byteArray27 = composite9.bytes;
        java.util.stream.Stream<java.lang.Object> objStream28 = composite9.stream();
        java.util.Spliterator<java.lang.Object> objSpliterator29 = composite9.spliterator();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(objList16);
        org.junit.Assert.assertNull(byteArray17);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objSpliterator29);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (byte) -1;
        comparators.Composite.MATCH_MAXIMUM = placeholder0;
        placeholder0.type = 6;
        org.junit.Assert.assertNotNull(placeholder0);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.Spliterator<java.lang.Object> objSpliterator20 = composite9.spliterator();
        java.io.DataOutputStream dataOutputStream21 = composite9.out;
        java.lang.String str22 = composite9.toString();
        java.util.Iterator<java.lang.Object> objItor23 = composite9.iterator();
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.util.RandomAccess[] randomAccessArray34 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray35 = composite33.toArray(randomAccessArray34);
        comparators.Composite composite37 = composite33.addUTF8("UTF-8");
        boolean boolean38 = composite9.contains((java.lang.Object) composite33);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        boolean boolean57 = comparators.Composite.validate((int) ' ', byteArray54, true);
        boolean boolean58 = composite48.contains((java.lang.Object) boolean57);
        java.util.Spliterator<java.lang.Object> objSpliterator59 = composite48.spliterator();
        byte[] byteArray60 = composite48.bytes;
        comparators.Composite composite62 = composite48.addUTF8("Placeholder(1)");
        int int63 = composite48.startOffset;
        java.lang.Object[] objArray64 = composite48.toArray();
        boolean boolean65 = composite9.addAll((java.util.Collection<java.lang.Object>) composite48);
        comparators.Composite composite67 = composite9.addBool(false);
        comparators.Composite composite69 = composite67.addUTF8("true,6,434d500103000000000000004300,100");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objSpliterator20);
        org.junit.Assert.assertNull(dataOutputStream21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(objItor23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(randomAccessArray34);
        org.junit.Assert.assertNotNull(randomAccessArray35);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objSpliterator59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNotNull(composite62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[Placeholder(1)]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[Placeholder(1)]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(composite67);
        org.junit.Assert.assertNotNull(composite69);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        comparators.CompositeType compositeType0 = new comparators.CompositeType();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator1 = compositeType0.reversed();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator2 = compositeType0.indexComparator;
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator3 = compositeType0.indexReverseComparator;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer5 = compositeType0.fromString("Placeholder(-1)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBufferComparator1);
        org.junit.Assert.assertNotNull(indexInfoComparator2);
        org.junit.Assert.assertNotNull(indexInfoComparator3);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.offset;
        int int85 = compositeTypeIterator80.offset;
        comparators.Composite composite86 = compositeTypeIterator80.collection;
        int int87 = compositeTypeIterator80.offset;
        int int88 = compositeTypeIterator80.len;
        compositeTypeIterator80.type = 0;
        byte[] byteArray91 = compositeTypeIterator80.bytes;
        byte[] byteArray95 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray96 = new byte[] {};
        int int97 = comparators.Composite.compare(byteArray95, byteArray96);
        compositeTypeIterator80.bytes = byteArray96;
        // The following exception was thrown during execution in test generation
        try {
            compositeTypeIterator80.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 67 + "'", int84 == 67);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertNotNull(composite86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 67 + "'", int87 == 67);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[]");
        org.junit.Assert.assertNotNull(byteArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        comparators.Composite composite19 = new comparators.Composite(byteArray18);
        java.util.UUID uUID20 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite21 = composite19.addTimeUUID(uUID20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        comparators.CompositeType compositeType12 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray13 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList14 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14, byteBufferArray13);
        java.lang.String str16 = compositeType12.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList14);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator17 = compositeType12.indexComparator;
        comparators.CompositeType compositeType18 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray19 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList20 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList20, byteBufferArray19);
        java.lang.String str22 = compositeType18.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList20);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator23 = compositeType12.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType18);
        byte[] byteArray27 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray28 = new byte[] {};
        int int29 = comparators.Composite.compare(byteArray27, byteArray28);
        java.util.List<java.lang.Object> objList30 = comparators.Composite.deserialize(byteArray28);
        byte[] byteArray31 = comparators.Composite.serialize(objList30);
        java.util.stream.Stream<java.lang.Object> objStream32 = objList30.parallelStream();
        comparators.Composite composite33 = new comparators.Composite(objList30);
        java.lang.Object[] objArray34 = composite33.toArray();
        int int35 = composite33.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream36 = composite33.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream37 = composite33.parallelStream();
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        java.util.List<java.lang.Object> objList44 = comparators.Composite.deserialize(byteArray42);
        byte[] byteArray45 = comparators.Composite.serialize(objList44);
        java.util.stream.Stream<java.lang.Object> objStream46 = objList44.parallelStream();
        comparators.Composite composite47 = new comparators.Composite(objList44);
        java.lang.Object[] objArray48 = composite47.toArray();
        int int49 = composite47.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream50 = composite47.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream51 = composite47.parallelStream();
        int int52 = composite47.startOffset;
        int int53 = composite33.compareTo(composite47);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray58 = new byte[] {};
        int int59 = comparators.Composite.compare(byteArray57, byteArray58);
        comparators.Composite composite60 = composite33.addBytes(byteArray58);
        java.nio.ByteBuffer byteBuffer61 = composite60.serializeToByteBuffer();
        compositeType18.validate(byteBuffer61);
        comparators.Composite composite63 = new comparators.Composite(byteBuffer61);
        java.nio.ByteBuffer byteBuffer64 = null;
        int int65 = compositeType6.compare(byteBuffer61, byteBuffer64);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer67 = compositeType6.fromString("Placeholder(77)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(compositeType12);
        org.junit.Assert.assertNotNull(byteBufferArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(indexInfoComparator17);
        org.junit.Assert.assertNotNull(compositeType18);
        org.junit.Assert.assertNotNull(byteBufferArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteBufferComparator23);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(objList30);
        org.junit.Assert.assertNull(byteArray31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(objStream36);
        org.junit.Assert.assertNotNull(objStream37);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(objList44);
        org.junit.Assert.assertNull(byteArray45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(composite60);
        org.junit.Assert.assertNotNull(byteBuffer61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        byte[] byteArray14 = composite13.serialize();
        java.util.List<java.lang.Object> objList15 = comparators.Composite.deserialize(byteArray14);
        comparators.Composite composite16 = new comparators.Composite(objList15);
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        comparators.Composite composite32 = composite26.addBool(true);
        java.util.Iterator<java.lang.Object> objItor33 = composite26.iterator();
        comparators.Composite composite34 = new comparators.Composite();
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.lang.Object[] objArray45 = composite44.toArray();
        int int46 = composite44.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream47 = composite44.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream48 = composite44.parallelStream();
        int int49 = composite34.compareTo(composite44);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray65 = new byte[] {};
        int int66 = comparators.Composite.compare(byteArray64, byteArray65);
        boolean boolean68 = comparators.Composite.validate((int) ' ', byteArray65, true);
        boolean boolean69 = composite59.contains((java.lang.Object) boolean68);
        java.util.stream.Stream<java.lang.Object> objStream70 = composite59.parallelStream();
        boolean boolean71 = composite34.contains((java.lang.Object) composite59);
        boolean boolean72 = composite26.addAll((java.util.Collection<java.lang.Object>) composite34);
        int int73 = composite34.startOffset;
        comparators.Composite composite75 = composite34.addAscii("hi!");
        int int76 = composite75.startOffset;
        int int77 = comparators.Composite.compare(composite16, composite75);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList15);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(composite32);
        org.junit.Assert.assertNotNull(objItor33);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite18 = composite9.addReal((java.lang.Double) 100.0d);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        int int33 = composite28.startOffset;
        composite28.clear();
        boolean boolean35 = composite18.containsAll((java.util.Collection<java.lang.Object>) composite28);
        comparators.Composite composite37 = composite28.addAscii("hi!");
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        java.util.List<java.lang.Object> objList44 = comparators.Composite.deserialize(byteArray42);
        byte[] byteArray45 = comparators.Composite.serialize(objList44);
        java.util.stream.Stream<java.lang.Object> objStream46 = objList44.parallelStream();
        comparators.Composite composite47 = new comparators.Composite(objList44);
        java.lang.Object[] objArray48 = composite47.toArray();
        int int49 = composite47.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream50 = composite47.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream51 = composite47.parallelStream();
        comparators.Composite composite53 = composite47.addBool(true);
        comparators.Composite composite55 = composite53.addLong((long) 6);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        comparators.Composite composite71 = composite65.addBool(true);
        comparators.Composite composite73 = composite71.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream74 = composite71.byteStream;
        composite55.byteStream = byteArrayOutputStream74;
        composite28.byteStream = byteArrayOutputStream74;
        comparators.Composite composite78 = composite28.addUTF8("US-ASCII");
        java.io.DataOutputStream dataOutputStream79 = composite28.out;
        java.util.Iterator<java.lang.Object> objItor80 = composite28.iterator();
        java.lang.Class<?> wildcardClass81 = objItor80.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(composite18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(objList44);
        org.junit.Assert.assertNull(byteArray45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(composite53);
        org.junit.Assert.assertNotNull(composite55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertNotNull(composite71);
        org.junit.Assert.assertNotNull(composite73);
        org.junit.Assert.assertNotNull(byteArrayOutputStream74);
// flaky:         org.junit.Assert.assertEquals(byteArrayOutputStream74.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(dataOutputStream79);
        org.junit.Assert.assertNotNull(objItor80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        int int16 = composite13.startOffset;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        comparators.Composite composite15 = composite9.addBool(true);
        java.util.Iterator<java.lang.Object> objItor16 = composite9.iterator();
        comparators.Composite composite17 = new comparators.Composite();
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.lang.Object[] objArray28 = composite27.toArray();
        int int29 = composite27.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream30 = composite27.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream31 = composite27.parallelStream();
        int int32 = composite17.compareTo(composite27);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        byte[] byteArray47 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray48 = new byte[] {};
        int int49 = comparators.Composite.compare(byteArray47, byteArray48);
        boolean boolean51 = comparators.Composite.validate((int) ' ', byteArray48, true);
        boolean boolean52 = composite42.contains((java.lang.Object) boolean51);
        java.util.stream.Stream<java.lang.Object> objStream53 = composite42.parallelStream();
        boolean boolean54 = composite17.contains((java.lang.Object) composite42);
        boolean boolean55 = composite9.addAll((java.util.Collection<java.lang.Object>) composite17);
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite65.startOffset;
        int int72 = composite17.compareTo(composite65);
        comparators.Composite composite74 = composite17.addLong((long) 80);
        comparators.Composite composite76 = composite17.addLong((long) 6);
        java.util.Iterator<java.lang.Object> objItor77 = composite17.iterator();
        comparators.Composite composite78 = composite17.addMatchMaximum();
        comparators.Composite composite80 = composite78.addUTF8("true");
        composite80.startOffset = 11;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(objItor16);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(composite74);
        org.junit.Assert.assertNotNull(composite76);
        org.junit.Assert.assertNotNull(objItor77);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(composite80);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        byte[] byteArray16 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray17 = new byte[] {};
        int int18 = comparators.Composite.compare(byteArray16, byteArray17);
        java.util.List<java.lang.Object> objList19 = comparators.Composite.deserialize(byteArray17);
        byte[] byteArray20 = comparators.Composite.serialize(objList19);
        java.util.stream.Stream<java.lang.Object> objStream21 = objList19.parallelStream();
        comparators.Composite composite22 = new comparators.Composite(objList19);
        java.lang.Object[] objArray23 = composite22.toArray();
        int int24 = composite22.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream25 = composite22.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream26 = composite22.parallelStream();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        int int41 = composite36.startOffset;
        int int42 = composite22.compareTo(composite36);
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        comparators.Composite composite49 = composite22.addBytes(byteArray47);
        java.nio.ByteBuffer byteBuffer50 = composite49.serializeToByteBuffer();
        compositeType7.validate(byteBuffer50);
        comparators.CompositeType compositeType52 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray53 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList54 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54, byteBufferArray53);
        java.lang.String str56 = compositeType52.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList54);
        org.apache.cassandra.db.IColumn[] iColumnArray57 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList58 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58, iColumnArray57);
        java.lang.String str60 = compositeType52.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList58);
        org.apache.cassandra.db.IColumn[] iColumnArray61 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList62 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62, iColumnArray61);
        java.lang.String str64 = compositeType52.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62);
        java.lang.String str65 = compositeType7.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList62);
        boolean boolean66 = placeholder0.equals((java.lang.Object) str65);
        placeholder0.type = 8;
        comparators.CompositeType compositeType69 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray70 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList71 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList71, byteBufferArray70);
        java.lang.String str73 = compositeType69.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList71);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator74 = compositeType69.indexComparator;
        comparators.CompositeType compositeType75 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray76 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList77 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList77, byteBufferArray76);
        java.lang.String str79 = compositeType75.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList77);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator80 = compositeType69.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType75);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator81 = compositeType69.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator82 = compositeType69.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator83 = compositeType69.indexComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator84 = compositeType69.reversed();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator85 = compositeType69.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator86 = compositeType69.reversed();
        boolean boolean87 = placeholder0.equals((java.lang.Object) byteBufferComparator86);
        java.lang.String str88 = placeholder0.toString();
        placeholder0.type = 127;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(objList19);
        org.junit.Assert.assertNull(byteArray20);
        org.junit.Assert.assertNotNull(objStream21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(composite49);
        org.junit.Assert.assertNotNull(byteBuffer50);
        org.junit.Assert.assertNotNull(compositeType52);
        org.junit.Assert.assertNotNull(byteBufferArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(iColumnArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(iColumnArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(compositeType69);
        org.junit.Assert.assertNotNull(byteBufferArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(indexInfoComparator74);
        org.junit.Assert.assertNotNull(compositeType75);
        org.junit.Assert.assertNotNull(byteBufferArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(byteBufferComparator80);
        org.junit.Assert.assertNotNull(indexInfoComparator81);
        org.junit.Assert.assertNotNull(byteBufferComparator82);
        org.junit.Assert.assertNotNull(indexInfoComparator83);
        org.junit.Assert.assertNotNull(byteBufferComparator84);
        org.junit.Assert.assertNotNull(indexInfoComparator85);
        org.junit.Assert.assertNotNull(byteBufferComparator86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Placeholder(8)" + "'", str88, "Placeholder(8)");
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        comparators.Composite.Placeholder placeholder0 = comparators.Composite.MATCH_MAXIMUM;
        placeholder0.type = (short) 1;
        java.lang.String str3 = placeholder0.toString();
        placeholder0.type = (short) 100;
        byte[] byteArray9 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray10 = new byte[] {};
        int int11 = comparators.Composite.compare(byteArray9, byteArray10);
        java.util.List<java.lang.Object> objList12 = comparators.Composite.deserialize(byteArray10);
        byte[] byteArray13 = comparators.Composite.serialize(objList12);
        java.util.stream.Stream<java.lang.Object> objStream14 = objList12.parallelStream();
        comparators.Composite composite15 = new comparators.Composite(objList12);
        java.lang.Object[] objArray16 = composite15.toArray();
        int int17 = composite15.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream18 = composite15.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream19 = composite15.parallelStream();
        int int20 = composite15.startOffset;
        int int21 = composite15.startOffset;
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        boolean boolean40 = comparators.Composite.validate((int) ' ', byteArray37, true);
        boolean boolean41 = composite31.contains((java.lang.Object) boolean40);
        java.util.Spliterator<java.lang.Object> objSpliterator42 = composite31.spliterator();
        boolean boolean43 = composite15.containsAll((java.util.Collection<java.lang.Object>) composite31);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray44 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray45 = composite15.toArray(compositeListSerializerArray44);
        comparators.Composite composite46 = new comparators.Composite((java.lang.Object[]) compositeListSerializerArray45);
        int int47 = composite46.startOffset;
        boolean boolean48 = placeholder0.equals((java.lang.Object) int47);
        int int49 = placeholder0.type;
        int int50 = placeholder0.type;
        comparators.Composite.MATCH_MINIMUM = placeholder0;
        org.junit.Assert.assertNotNull(placeholder0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Placeholder(1)" + "'", str3, "Placeholder(1)");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(objList12);
        org.junit.Assert.assertNull(byteArray13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(objStream18);
        org.junit.Assert.assertNotNull(objStream19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objSpliterator42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray44);
        org.junit.Assert.assertNotNull(compositeListSerializerArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator12 = compositeType0.indexReverseComparator;
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator13 = compositeType0.getReverseComparator();
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType0.indexComparator;
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator20 = compositeType15.indexComparator;
        comparators.CompositeType compositeType21 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray22 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList23 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23, byteBufferArray22);
        java.lang.String str25 = compositeType21.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList23);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator26 = compositeType15.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType21);
        comparators.CompositeType compositeType27 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray28 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList29 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29, byteBufferArray28);
        java.lang.String str31 = compositeType27.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList29);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator32 = compositeType27.indexComparator;
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator38 = compositeType27.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType33);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        java.lang.Object[] objArray49 = composite48.toArray();
        int int50 = composite48.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream51 = composite48.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream52 = composite48.parallelStream();
        byte[] byteArray56 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray57 = new byte[] {};
        int int58 = comparators.Composite.compare(byteArray56, byteArray57);
        java.util.List<java.lang.Object> objList59 = comparators.Composite.deserialize(byteArray57);
        byte[] byteArray60 = comparators.Composite.serialize(objList59);
        java.util.stream.Stream<java.lang.Object> objStream61 = objList59.parallelStream();
        comparators.Composite composite62 = new comparators.Composite(objList59);
        java.lang.Object[] objArray63 = composite62.toArray();
        int int64 = composite62.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream65 = composite62.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream66 = composite62.parallelStream();
        int int67 = composite62.startOffset;
        int int68 = composite48.compareTo(composite62);
        byte[] byteArray72 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray73 = new byte[] {};
        int int74 = comparators.Composite.compare(byteArray72, byteArray73);
        comparators.Composite composite75 = composite48.addBytes(byteArray73);
        java.nio.ByteBuffer byteBuffer76 = composite75.serializeToByteBuffer();
        compositeType33.validate(byteBuffer76);
        comparators.Composite composite78 = new comparators.Composite(byteBuffer76);
        java.nio.ByteBuffer byteBuffer79 = null;
        int int80 = compositeType21.compare(byteBuffer76, byteBuffer79);
        java.lang.String str81 = compositeType0.getString(byteBuffer76);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator82 = compositeType0.reversed();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer84 = compositeType0.fromString("Placeholder(6)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(indexInfoComparator12);
        org.junit.Assert.assertNotNull(byteBufferComparator13);
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(indexInfoComparator20);
        org.junit.Assert.assertNotNull(compositeType21);
        org.junit.Assert.assertNotNull(byteBufferArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteBufferComparator26);
        org.junit.Assert.assertNotNull(compositeType27);
        org.junit.Assert.assertNotNull(byteBufferArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(indexInfoComparator32);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteBufferComparator38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(objList59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(objStream65);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(composite75);
        org.junit.Assert.assertNotNull(byteBuffer76);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(byteBufferComparator82);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        byte[] byteArray12 = composite9.bytes;
        java.io.DataOutputStream dataOutputStream13 = null;
        composite9.out = dataOutputStream13;
        java.io.ByteArrayOutputStream byteArrayOutputStream15 = null;
        composite9.byteStream = byteArrayOutputStream15;
        java.util.Iterator<java.lang.Object> objItor17 = composite9.iterator();
        java.util.Iterator<java.lang.Object> objItor18 = composite9.iterator();
        comparators.Composite composite20 = composite9.addAscii("US-ASCII");
        int int21 = composite20.startOffset;
        java.lang.String str22 = composite20.toString();
        byte[] byteArray26 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray27 = new byte[] {};
        int int28 = comparators.Composite.compare(byteArray26, byteArray27);
        java.util.List<java.lang.Object> objList29 = comparators.Composite.deserialize(byteArray27);
        byte[] byteArray30 = comparators.Composite.serialize(objList29);
        java.util.stream.Stream<java.lang.Object> objStream31 = objList29.parallelStream();
        comparators.Composite composite32 = new comparators.Composite(objList29);
        java.lang.Object[] objArray33 = composite32.toArray();
        int int34 = composite32.startOffset;
        int int35 = composite32.startOffset;
        java.lang.Object[] objArray36 = composite32.toArray();
        int int37 = composite32.startOffset;
        composite32.startOffset = (byte) 10;
        java.util.stream.Stream<java.lang.Object> objStream40 = composite32.parallelStream();
        composite32.startOffset = 0;
        byte[] byteArray46 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray47 = new byte[] {};
        int int48 = comparators.Composite.compare(byteArray46, byteArray47);
        java.util.List<java.lang.Object> objList49 = comparators.Composite.deserialize(byteArray47);
        byte[] byteArray50 = comparators.Composite.serialize(objList49);
        java.util.stream.Stream<java.lang.Object> objStream51 = objList49.parallelStream();
        comparators.Composite composite52 = new comparators.Composite(objList49);
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray58 = new byte[] {};
        int int59 = comparators.Composite.compare(byteArray57, byteArray58);
        boolean boolean61 = comparators.Composite.validate((int) ' ', byteArray58, true);
        boolean boolean62 = composite52.contains((java.lang.Object) boolean61);
        java.util.Spliterator<java.lang.Object> objSpliterator63 = composite52.spliterator();
        composite52.startOffset = 1;
        byte[] byteArray69 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray70 = new byte[] {};
        int int71 = comparators.Composite.compare(byteArray69, byteArray70);
        java.util.List<java.lang.Object> objList72 = comparators.Composite.deserialize(byteArray70);
        byte[] byteArray73 = comparators.Composite.serialize(objList72);
        java.util.stream.Stream<java.lang.Object> objStream74 = objList72.parallelStream();
        comparators.Composite composite75 = new comparators.Composite(objList72);
        java.lang.Object[] objArray76 = composite75.toArray();
        int int77 = composite75.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream78 = composite75.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream79 = composite75.parallelStream();
        comparators.Composite composite81 = composite75.addBool(true);
        java.io.DataOutputStream dataOutputStream82 = composite75.out;
        composite52.out = dataOutputStream82;
        composite32.out = dataOutputStream82;
        composite20.out = dataOutputStream82;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(byteArray12);
        org.junit.Assert.assertNotNull(objItor17);
        org.junit.Assert.assertNotNull(objItor18);
        org.junit.Assert.assertNotNull(composite20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "US-ASCII" + "'", str22, "US-ASCII");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(objList29);
        org.junit.Assert.assertNull(byteArray30);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(objList49);
        org.junit.Assert.assertNull(byteArray50);
        org.junit.Assert.assertNotNull(objStream51);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objSpliterator63);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(objList72);
        org.junit.Assert.assertNull(byteArray73);
        org.junit.Assert.assertNotNull(objStream74);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(objStream79);
        org.junit.Assert.assertNotNull(composite81);
        org.junit.Assert.assertNotNull(dataOutputStream82);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.io.ByteArrayOutputStream byteArrayOutputStream12 = null;
        composite9.byteStream = byteArrayOutputStream12;
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        comparators.Composite composite29 = composite23.addBool(true);
        java.util.Iterator<java.lang.Object> objItor30 = composite23.iterator();
        int int31 = composite9.compareTo(composite23);
        byte[] byteArray32 = composite23.bytes;
        byte[] byteArray36 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray37 = new byte[] {};
        int int38 = comparators.Composite.compare(byteArray36, byteArray37);
        java.util.List<java.lang.Object> objList39 = comparators.Composite.deserialize(byteArray37);
        byte[] byteArray40 = comparators.Composite.serialize(objList39);
        java.util.stream.Stream<java.lang.Object> objStream41 = objList39.parallelStream();
        comparators.Composite composite42 = new comparators.Composite(objList39);
        java.lang.Object[] objArray43 = composite42.toArray();
        int int44 = composite42.startOffset;
        int int45 = composite42.startOffset;
        byte[] byteArray47 = null;
        comparators.Composite.CompositeTypeIterator compositeTypeIterator48 = composite23.new CompositeTypeIterator(composite42, 341, byteArray47);
        byte[] byteArray49 = compositeTypeIterator48.bytes;
        boolean boolean50 = compositeTypeIterator48.hasNext();
        int int51 = compositeTypeIterator48.len;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(composite29);
        org.junit.Assert.assertNotNull(objItor30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(objList39);
        org.junit.Assert.assertNull(byteArray40);
        org.junit.Assert.assertNotNull(objStream41);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        int int13 = composite10.startOffset;
        byte[] byteArray14 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        comparators.Composite composite30 = composite24.addBool(true);
        java.util.Iterator<java.lang.Object> objItor31 = composite24.iterator();
        comparators.Composite composite33 = composite24.addReal((java.lang.Double) 100.0d);
        comparators.Composite composite35 = composite33.addLong((long) '#');
        byte[] byteArray36 = compositeSerializer0.toBytes(composite35);
        comparators.Composite composite38 = composite35.addReal((java.lang.Double) 1.0d);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        boolean boolean57 = comparators.Composite.validate((int) ' ', byteArray54, true);
        boolean boolean58 = composite48.contains((java.lang.Object) boolean57);
        java.util.Spliterator<java.lang.Object> objSpliterator59 = composite48.spliterator();
        byte[] byteArray60 = composite48.bytes;
        int int61 = composite35.compareTo(composite48);
        comparators.Composite composite63 = composite35.addBool(false);
        comparators.Composite composite65 = composite35.addReal((java.lang.Double) 1.0d);
        comparators.Composite composite66 = composite65.addMatchMaximum();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(composite30);
        org.junit.Assert.assertNotNull(objItor31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[67, 77, 80, 1, 2, 1, 0, 4, 64, 89, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 35, 0]");
        org.junit.Assert.assertNotNull(composite38);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objSpliterator59);
        org.junit.Assert.assertNull(byteArray60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(composite63);
        org.junit.Assert.assertNotNull(composite65);
        org.junit.Assert.assertNotNull(composite66);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        byte[] byteArray10 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray11 = new byte[] {};
        int int12 = comparators.Composite.compare(byteArray10, byteArray11);
        int int13 = comparators.Composite.compare(byteArray4, byteArray11);
        java.util.List<java.lang.Object> objList14 = comparators.Composite.deserialize(byteArray11);
        comparators.Composite composite15 = compositeSerializer0.fromBytes(byteArray11);
        int int17 = compositeSerializer0.computeInitialHashSize(1);
        byte[] byteArray21 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray22 = new byte[] {};
        int int23 = comparators.Composite.compare(byteArray21, byteArray22);
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray22);
        byte[] byteArray25 = comparators.Composite.serialize(objList24);
        java.util.stream.Stream<java.lang.Object> objStream26 = objList24.parallelStream();
        comparators.Composite composite27 = new comparators.Composite(objList24);
        java.util.RandomAccess[] randomAccessArray28 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray29 = composite27.toArray(randomAccessArray28);
        comparators.Composite composite31 = composite27.addLong((long) 67);
        comparators.Composite composite33 = composite31.addBool(true);
        comparators.Composite composite35 = composite31.addLong((long) 2);
        java.nio.ByteBuffer byteBuffer36 = composite31.serializeToByteBuffer();
        comparators.Composite composite37 = compositeSerializer0.fromByteBuffer(byteBuffer36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteBuffer36);
        comparators.Composite composite39 = new comparators.Composite(byteBuffer36);
        boolean boolean40 = comparators.Composite.validate(byteBuffer36);
        comparators.Composite composite41 = new comparators.Composite(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(objList14);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertNull(byteArray25);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(randomAccessArray28);
        org.junit.Assert.assertNotNull(randomAccessArray29);
        org.junit.Assert.assertNotNull(composite31);
        org.junit.Assert.assertNotNull(composite33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 0;
        int int83 = compositeTypeIterator80.len;
        int int84 = compositeTypeIterator80.len;
        int int85 = compositeTypeIterator80.start;
        compositeTypeIterator80.len = 58;
        byte[] byteArray88 = compositeTypeIterator80.bytes;
        compositeTypeIterator80.offset = 97;
        int int91 = compositeTypeIterator80.start;
        compositeTypeIterator80.offset = 8;
        compositeTypeIterator80.offset = 'a';
        boolean boolean96 = compositeTypeIterator80.hasNext();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 67 + "'", int85 == 67);
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[]");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 67 + "'", int91 == 67);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.util.RandomAccess[] randomAccessArray10 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray11 = composite9.toArray(randomAccessArray10);
        comparators.Composite composite13 = composite9.addLong((long) 67);
        comparators.Composite composite15 = composite13.addBool(true);
        comparators.Composite composite17 = composite13.addLong((long) 2);
        java.util.Spliterator<java.lang.Object> objSpliterator18 = composite13.spliterator();
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        boolean boolean37 = comparators.Composite.validate((int) ' ', byteArray34, true);
        boolean boolean38 = composite28.contains((java.lang.Object) boolean37);
        java.util.Spliterator<java.lang.Object> objSpliterator39 = composite28.spliterator();
        java.io.DataOutputStream dataOutputStream40 = composite28.out;
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray46);
        byte[] byteArray49 = comparators.Composite.serialize(objList48);
        java.util.stream.Stream<java.lang.Object> objStream50 = objList48.parallelStream();
        comparators.Composite composite51 = new comparators.Composite(objList48);
        java.lang.Object[] objArray52 = composite51.toArray();
        int int53 = composite51.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream54 = composite51.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream55 = composite51.parallelStream();
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        java.lang.Object[] objArray66 = composite65.toArray();
        int int67 = composite65.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream68 = composite65.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream69 = composite65.parallelStream();
        int int70 = composite65.startOffset;
        int int71 = composite51.compareTo(composite65);
        byte[] byteArray75 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray76 = new byte[] {};
        int int77 = comparators.Composite.compare(byteArray75, byteArray76);
        comparators.Composite composite78 = composite51.addBytes(byteArray76);
        java.util.List<java.lang.Object> objList79 = comparators.Composite.deserialize(byteArray76);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator80 = composite13.new CompositeTypeIterator(composite28, 67, byteArray76);
        compositeTypeIterator80.len = 80;
        byte[] byteArray83 = compositeTypeIterator80.bytes;
        compositeTypeIterator80.type = 67;
        compositeTypeIterator80.offset = 0;
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(randomAccessArray10);
        org.junit.Assert.assertNotNull(randomAccessArray11);
        org.junit.Assert.assertNotNull(composite13);
        org.junit.Assert.assertNotNull(composite15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(objSpliterator18);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objSpliterator39);
        org.junit.Assert.assertNull(dataOutputStream40);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertNull(byteArray49);
        org.junit.Assert.assertNotNull(objStream50);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objStream55);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objStream69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertNotNull(objList79);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        comparators.CompositeType compositeType9 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray10 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList11 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11, byteBufferArray10);
        java.lang.String str13 = compositeType9.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList11);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator14 = compositeType9.indexComparator;
        comparators.CompositeType compositeType15 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray16 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList17 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17, byteBufferArray16);
        java.lang.String str19 = compositeType15.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList17);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator20 = compositeType9.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType15);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator21 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator22 = compositeType0.reversed();
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator23 = compositeType0.getReverseComparator();
        comparators.CompositeType compositeType24 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray25 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList26 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList26, byteBufferArray25);
        java.lang.String str28 = compositeType24.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList26);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator29 = compositeType24.indexComparator;
        comparators.CompositeType compositeType30 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray31 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList32 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32, byteBufferArray31);
        java.lang.String str34 = compositeType30.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList32);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator35 = compositeType24.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType30);
        byte[] byteArray39 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray40 = new byte[] {};
        int int41 = comparators.Composite.compare(byteArray39, byteArray40);
        java.util.List<java.lang.Object> objList42 = comparators.Composite.deserialize(byteArray40);
        byte[] byteArray43 = comparators.Composite.serialize(objList42);
        java.util.stream.Stream<java.lang.Object> objStream44 = objList42.parallelStream();
        comparators.Composite composite45 = new comparators.Composite(objList42);
        java.lang.Object[] objArray46 = composite45.toArray();
        int int47 = composite45.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream48 = composite45.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream49 = composite45.parallelStream();
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        java.lang.Object[] objArray60 = composite59.toArray();
        int int61 = composite59.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream62 = composite59.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream63 = composite59.parallelStream();
        int int64 = composite59.startOffset;
        int int65 = composite45.compareTo(composite59);
        byte[] byteArray69 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray70 = new byte[] {};
        int int71 = comparators.Composite.compare(byteArray69, byteArray70);
        comparators.Composite composite72 = composite45.addBytes(byteArray70);
        java.nio.ByteBuffer byteBuffer73 = composite72.serializeToByteBuffer();
        compositeType30.validate(byteBuffer73);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator75 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType30);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer77 = compositeType30.fromString("Placeholder(9)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(compositeType9);
        org.junit.Assert.assertNotNull(byteBufferArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(indexInfoComparator14);
        org.junit.Assert.assertNotNull(compositeType15);
        org.junit.Assert.assertNotNull(byteBufferArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteBufferComparator20);
        org.junit.Assert.assertNotNull(byteBufferComparator21);
        org.junit.Assert.assertNotNull(byteBufferComparator22);
        org.junit.Assert.assertNotNull(byteBufferComparator23);
        org.junit.Assert.assertNotNull(compositeType24);
        org.junit.Assert.assertNotNull(byteBufferArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(indexInfoComparator29);
        org.junit.Assert.assertNotNull(compositeType30);
        org.junit.Assert.assertNotNull(byteBufferArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteBufferComparator35);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(objList42);
        org.junit.Assert.assertNull(byteArray43);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objStream49);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(objStream63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(composite72);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteBufferComparator75);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        byte[] byteArray18 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray19 = new byte[] {};
        int int20 = comparators.Composite.compare(byteArray18, byteArray19);
        java.util.List<java.lang.Object> objList21 = comparators.Composite.deserialize(byteArray19);
        byte[] byteArray22 = comparators.Composite.serialize(objList21);
        java.util.stream.Stream<java.lang.Object> objStream23 = objList21.parallelStream();
        comparators.Composite composite24 = new comparators.Composite(objList21);
        java.lang.Object[] objArray25 = composite24.toArray();
        int int26 = composite24.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream27 = composite24.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream28 = composite24.parallelStream();
        int int29 = composite24.startOffset;
        int int30 = composite10.compareTo(composite24);
        comparators.hector.CompositeSerializer compositeSerializer31 = new comparators.hector.CompositeSerializer();
        byte[] byteArray35 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray36 = new byte[] {};
        int int37 = comparators.Composite.compare(byteArray35, byteArray36);
        java.util.List<java.lang.Object> objList38 = comparators.Composite.deserialize(byteArray36);
        byte[] byteArray39 = comparators.Composite.serialize(objList38);
        java.util.stream.Stream<java.lang.Object> objStream40 = objList38.parallelStream();
        comparators.Composite composite41 = new comparators.Composite(objList38);
        java.lang.Object[] objArray42 = composite41.toArray();
        int int43 = composite41.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream44 = composite41.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream45 = composite41.parallelStream();
        comparators.Composite composite47 = composite41.addBool(true);
        java.io.DataOutputStream dataOutputStream48 = composite41.out;
        byte[] byteArray49 = compositeSerializer31.toBytes(composite41);
        byte[] byteArray52 = null;
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray58 = new byte[] {};
        int int59 = comparators.Composite.compare(byteArray57, byteArray58);
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        int int66 = comparators.Composite.compare(byteArray57, byteArray64);
        int int67 = comparators.Composite.compare((int) (byte) 1, byteArray52, 10, byteArray57);
        byte[] byteArray71 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray72 = new byte[] {};
        int int73 = comparators.Composite.compare(byteArray71, byteArray72);
        byte[] byteArray77 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray78 = new byte[] {};
        int int79 = comparators.Composite.compare(byteArray77, byteArray78);
        int int80 = comparators.Composite.compare(byteArray71, byteArray78);
        java.util.List<java.lang.Object> objList81 = comparators.Composite.deserialize(byteArray78);
        int int82 = comparators.Composite.compare(byteArray57, byteArray78);
        java.util.List<java.lang.Object> objList83 = comparators.Composite.deserialize(byteArray78);
        comparators.Composite.CompositeTypeIterator compositeTypeIterator84 = composite24.new CompositeTypeIterator(composite41, 5, byteArray78);
        byte[] byteArray85 = compositeTypeIterator84.bytes;
        boolean boolean87 = comparators.Composite.validate(255, byteArray85, false);
        java.util.List<java.lang.Object> objList88 = comparators.Composite.deserialize(byteArray85);
        java.util.List<java.lang.Object> objList89 = comparators.Composite.deserialize(byteArray85);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(objList21);
        org.junit.Assert.assertNull(byteArray22);
        org.junit.Assert.assertNotNull(objStream23);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(objList38);
        org.junit.Assert.assertNull(byteArray39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(objStream44);
        org.junit.Assert.assertNotNull(objStream45);
        org.junit.Assert.assertNotNull(composite47);
        org.junit.Assert.assertNotNull(dataOutputStream48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(objList81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(objList83);
        org.junit.Assert.assertNotNull(byteArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(objList88);
        org.junit.Assert.assertNotNull(objList89);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        comparators.hector.CompositeSerializer compositeSerializer19 = new comparators.hector.CompositeSerializer();
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        int int32 = comparators.Composite.compare(byteArray23, byteArray30);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray30);
        comparators.Composite composite34 = compositeSerializer19.fromBytes(byteArray30);
        int int36 = compositeSerializer19.computeInitialHashSize(1);
        comparators.hector.CompositeListSerializer compositeListSerializer37 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType38 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray39 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList40 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList40, byteBufferArray39);
        java.lang.String str42 = compositeType38.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList40);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator43 = compositeType38.indexComparator;
        comparators.CompositeType compositeType44 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray45 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList46 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList46, byteBufferArray45);
        java.lang.String str48 = compositeType44.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList46);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator49 = compositeType38.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType44);
        comparators.CompositeType compositeType50 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray51 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList52 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52, byteBufferArray51);
        java.lang.String str54 = compositeType50.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52);
        java.lang.String str55 = compositeType44.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList52);
        java.util.List<java.util.List<java.lang.Object>> objListList56 = compositeListSerializer37.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList52);
        int int58 = compositeListSerializer37.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer59 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType60 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray61 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList62 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList62, byteBufferArray61);
        java.lang.String str64 = compositeType60.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList62);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator65 = compositeType60.indexComparator;
        comparators.CompositeType compositeType66 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray67 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList68 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList68, byteBufferArray67);
        java.lang.String str70 = compositeType66.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList68);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator71 = compositeType60.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType66);
        comparators.CompositeType compositeType72 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray73 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList74 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList74, byteBufferArray73);
        java.lang.String str76 = compositeType72.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList74);
        java.lang.String str77 = compositeType66.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList74);
        java.util.List<java.util.List<java.lang.Object>> objListList78 = compositeListSerializer59.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList74);
        java.util.List<java.nio.ByteBuffer> byteBufferList79 = compositeListSerializer37.toBytesList(objListList78);
        java.util.List<comparators.Composite> compositeList80 = compositeSerializer19.fromBytesList(byteBufferList79);
        java.util.List<java.nio.ByteBuffer> byteBufferList81 = compositeSerializer0.toBytesList(compositeList80);
        int int83 = compositeSerializer0.computeInitialHashSize(341);
        java.nio.ByteBuffer byteBuffer84 = null;
        // The following exception was thrown during execution in test generation
        try {
            comparators.Composite composite85 = compositeSerializer0.fromByteBuffer(byteBuffer84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(compositeType38);
        org.junit.Assert.assertNotNull(byteBufferArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(indexInfoComparator43);
        org.junit.Assert.assertNotNull(compositeType44);
        org.junit.Assert.assertNotNull(byteBufferArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteBufferComparator49);
        org.junit.Assert.assertNotNull(compositeType50);
        org.junit.Assert.assertNotNull(byteBufferArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(objListList56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertNotNull(compositeType60);
        org.junit.Assert.assertNotNull(byteBufferArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(indexInfoComparator65);
        org.junit.Assert.assertNotNull(compositeType66);
        org.junit.Assert.assertNotNull(byteBufferArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(byteBufferComparator71);
        org.junit.Assert.assertNotNull(compositeType72);
        org.junit.Assert.assertNotNull(byteBufferArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(objListList78);
        org.junit.Assert.assertNotNull(byteBufferList79);
        org.junit.Assert.assertNotNull(compositeList80);
        org.junit.Assert.assertNotNull(byteBufferList81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 455 + "'", int83 == 455);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray12 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray13 = new byte[] {};
        int int14 = comparators.Composite.compare(byteArray12, byteArray13);
        java.util.List<java.lang.Object> objList15 = comparators.Composite.deserialize(byteArray13);
        byte[] byteArray16 = comparators.Composite.serialize(objList15);
        java.util.stream.Stream<java.lang.Object> objStream17 = objList15.parallelStream();
        comparators.Composite composite18 = new comparators.Composite(objList15);
        java.util.RandomAccess[] randomAccessArray19 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray20 = composite18.toArray(randomAccessArray19);
        comparators.Composite composite22 = composite18.addLong((long) 67);
        byte[] byteArray23 = composite22.serialize();
        java.util.List<java.lang.Object> objList24 = comparators.Composite.deserialize(byteArray23);
        int int25 = comparators.Composite.compare(byteArray6, byteArray23);
        comparators.hector.CompositeSerializer compositeSerializer26 = new comparators.hector.CompositeSerializer();
        byte[] byteArray30 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray31 = new byte[] {};
        int int32 = comparators.Composite.compare(byteArray30, byteArray31);
        java.util.List<java.lang.Object> objList33 = comparators.Composite.deserialize(byteArray31);
        byte[] byteArray34 = comparators.Composite.serialize(objList33);
        java.util.stream.Stream<java.lang.Object> objStream35 = objList33.parallelStream();
        comparators.Composite composite36 = new comparators.Composite(objList33);
        java.lang.Object[] objArray37 = composite36.toArray();
        int int38 = composite36.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream39 = composite36.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream40 = composite36.parallelStream();
        comparators.Composite composite42 = composite36.addBool(true);
        java.io.DataOutputStream dataOutputStream43 = composite36.out;
        byte[] byteArray44 = compositeSerializer26.toBytes(composite36);
        int int45 = comparators.Composite.compare(byteArray23, byteArray44);
        boolean boolean47 = comparators.Composite.validate(67, byteArray44, true);
        java.util.List<java.lang.Object> objList48 = comparators.Composite.deserialize(byteArray44);
        boolean boolean49 = comparators.Composite.validate(47, byteArray44);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(objList15);
        org.junit.Assert.assertNull(byteArray16);
        org.junit.Assert.assertNotNull(objStream17);
        org.junit.Assert.assertNotNull(randomAccessArray19);
        org.junit.Assert.assertNotNull(randomAccessArray20);
        org.junit.Assert.assertNotNull(composite22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(objList33);
        org.junit.Assert.assertNull(byteArray34);
        org.junit.Assert.assertNotNull(objStream35);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertNotNull(objStream40);
        org.junit.Assert.assertNotNull(composite42);
        org.junit.Assert.assertNotNull(dataOutputStream43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        comparators.hector.CompositeListSerializer compositeListSerializer0 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType1 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray2 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList3 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3, byteBufferArray2);
        java.lang.String str5 = compositeType1.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList3);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator6 = compositeType1.indexComparator;
        comparators.CompositeType compositeType7 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray8 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList9 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9, byteBufferArray8);
        java.lang.String str11 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList9);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator12 = compositeType1.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType7);
        comparators.CompositeType compositeType13 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray14 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList15 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15, byteBufferArray14);
        java.lang.String str17 = compositeType13.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.lang.String str18 = compositeType7.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList15);
        java.util.List<java.util.List<java.lang.Object>> objListList19 = compositeListSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList15);
        int int21 = compositeListSerializer0.computeInitialHashSize(4);
        comparators.hector.CompositeListSerializer compositeListSerializer22 = new comparators.hector.CompositeListSerializer();
        comparators.CompositeType compositeType23 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray24 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList25 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25, byteBufferArray24);
        java.lang.String str27 = compositeType23.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList25);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator28 = compositeType23.indexComparator;
        comparators.CompositeType compositeType29 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray30 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList31 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31, byteBufferArray30);
        java.lang.String str33 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList31);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator34 = compositeType23.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType29);
        comparators.CompositeType compositeType35 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray36 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList37 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37, byteBufferArray36);
        java.lang.String str39 = compositeType35.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.lang.String str40 = compositeType29.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList37);
        java.util.List<java.util.List<java.lang.Object>> objListList41 = compositeListSerializer22.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList37);
        java.util.List<java.nio.ByteBuffer> byteBufferList42 = compositeListSerializer0.toBytesList(objListList41);
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        comparators.CompositeType compositeType44 = new comparators.CompositeType();
        comparators.CompositeType compositeType45 = comparators.CompositeType.instance;
        byte[] byteArray49 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray50 = new byte[] {};
        int int51 = comparators.Composite.compare(byteArray49, byteArray50);
        java.util.List<java.lang.Object> objList52 = comparators.Composite.deserialize(byteArray50);
        byte[] byteArray53 = comparators.Composite.serialize(objList52);
        java.util.stream.Stream<java.lang.Object> objStream54 = objList52.parallelStream();
        comparators.Composite composite55 = new comparators.Composite(objList52);
        java.lang.Object[] objArray56 = composite55.toArray();
        int int57 = composite55.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream58 = composite55.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream59 = composite55.parallelStream();
        byte[] byteArray63 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray64 = new byte[] {};
        int int65 = comparators.Composite.compare(byteArray63, byteArray64);
        java.util.List<java.lang.Object> objList66 = comparators.Composite.deserialize(byteArray64);
        byte[] byteArray67 = comparators.Composite.serialize(objList66);
        java.util.stream.Stream<java.lang.Object> objStream68 = objList66.parallelStream();
        comparators.Composite composite69 = new comparators.Composite(objList66);
        java.lang.Object[] objArray70 = composite69.toArray();
        int int71 = composite69.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream72 = composite69.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream73 = composite69.parallelStream();
        int int74 = composite69.startOffset;
        int int75 = composite55.compareTo(composite69);
        byte[] byteArray79 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray80 = new byte[] {};
        int int81 = comparators.Composite.compare(byteArray79, byteArray80);
        comparators.Composite composite82 = composite55.addBytes(byteArray80);
        java.nio.ByteBuffer byteBuffer83 = composite82.serializeToByteBuffer();
        compositeType45.validate(byteBuffer83);
        boolean boolean85 = comparators.Composite.validate(byteBuffer83);
        comparators.Composite composite86 = new comparators.Composite(byteBuffer83);
        java.nio.ByteBuffer byteBuffer87 = null;
        int int88 = compositeType44.compare(byteBuffer83, byteBuffer87);
        compositeType43.validate(byteBuffer83);
        java.util.List<java.lang.Object> objList90 = comparators.Composite.deserialize(byteBuffer83);
        java.nio.ByteBuffer byteBuffer91 = compositeListSerializer0.toByteBuffer(objList90);
        comparators.Composite composite92 = new comparators.Composite(objList90);
        java.util.stream.Stream<java.lang.Object> objStream93 = objList90.parallelStream();
        java.nio.ByteBuffer byteBuffer94 = comparators.Composite.serializeToByteBuffer(objList90);
        java.util.Spliterator<java.lang.Object> objSpliterator95 = objList90.spliterator();
        org.junit.Assert.assertNotNull(compositeType1);
        org.junit.Assert.assertNotNull(byteBufferArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(indexInfoComparator6);
        org.junit.Assert.assertNotNull(compositeType7);
        org.junit.Assert.assertNotNull(byteBufferArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteBufferComparator12);
        org.junit.Assert.assertNotNull(compositeType13);
        org.junit.Assert.assertNotNull(byteBufferArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(objListList19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 6 + "'", int21 == 6);
        org.junit.Assert.assertNotNull(compositeType23);
        org.junit.Assert.assertNotNull(byteBufferArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(indexInfoComparator28);
        org.junit.Assert.assertNotNull(compositeType29);
        org.junit.Assert.assertNotNull(byteBufferArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteBufferComparator34);
        org.junit.Assert.assertNotNull(compositeType35);
        org.junit.Assert.assertNotNull(byteBufferArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(objListList41);
        org.junit.Assert.assertNotNull(byteBufferList42);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(compositeType45);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(objList52);
        org.junit.Assert.assertNull(byteArray53);
        org.junit.Assert.assertNotNull(objStream54);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(objList66);
        org.junit.Assert.assertNull(byteArray67);
        org.junit.Assert.assertNotNull(objStream68);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(objStream72);
        org.junit.Assert.assertNotNull(objStream73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(composite82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(objList90);
        org.junit.Assert.assertNotNull(byteBuffer91);
        org.junit.Assert.assertNotNull(objStream93);
        org.junit.Assert.assertNotNull(byteBuffer94);
        org.junit.Assert.assertNotNull(objSpliterator95);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        org.apache.cassandra.db.IColumn[] iColumnArray5 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList6 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6, iColumnArray5);
        java.lang.String str8 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList6);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator9 = compositeType0.getReverseComparator();
        comparators.CompositeType compositeType10 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray11 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList12 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12, byteBufferArray11);
        java.lang.String str14 = compositeType10.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList12);
        org.apache.cassandra.db.IColumn[] iColumnArray15 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList16 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16, iColumnArray15);
        java.lang.String str18 = compositeType10.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        java.lang.String str19 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList16);
        comparators.CompositeType compositeType20 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray21 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList22 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22, byteBufferArray21);
        java.lang.String str24 = compositeType20.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList22);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator25 = compositeType20.indexComparator;
        comparators.CompositeType compositeType26 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray27 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList28 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28, byteBufferArray27);
        java.lang.String str30 = compositeType26.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList28);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator31 = compositeType20.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType26);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator32 = compositeType0.thenComparing(byteBufferComparator31);
        comparators.CompositeType compositeType33 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray34 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList35 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35, byteBufferArray34);
        java.lang.String str37 = compositeType33.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList35);
        org.apache.cassandra.db.IColumn[] iColumnArray38 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList39 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList39, iColumnArray38);
        java.lang.String str41 = compositeType33.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList39);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator42 = compositeType33.getReverseComparator();
        comparators.CompositeType compositeType43 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray44 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList45 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45, byteBufferArray44);
        java.lang.String str47 = compositeType43.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList45);
        org.apache.cassandra.db.IColumn[] iColumnArray48 = new org.apache.cassandra.db.IColumn[] {};
        java.util.ArrayList<org.apache.cassandra.db.IColumn> iColumnList49 = new java.util.ArrayList<org.apache.cassandra.db.IColumn>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49, iColumnArray48);
        java.lang.String str51 = compositeType43.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49);
        java.lang.String str52 = compositeType33.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49);
        java.lang.String str53 = compositeType0.getColumnsString((java.util.Collection<org.apache.cassandra.db.IColumn>) iColumnList49);
        java.lang.Class<?> wildcardClass54 = compositeType0.getClass();
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(iColumnArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteBufferComparator9);
        org.junit.Assert.assertNotNull(compositeType10);
        org.junit.Assert.assertNotNull(byteBufferArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(iColumnArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(compositeType20);
        org.junit.Assert.assertNotNull(byteBufferArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(indexInfoComparator25);
        org.junit.Assert.assertNotNull(compositeType26);
        org.junit.Assert.assertNotNull(byteBufferArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteBufferComparator31);
        org.junit.Assert.assertNotNull(byteBufferComparator32);
        org.junit.Assert.assertNotNull(compositeType33);
        org.junit.Assert.assertNotNull(byteBufferArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(iColumnArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteBufferComparator42);
        org.junit.Assert.assertNotNull(compositeType43);
        org.junit.Assert.assertNotNull(byteBufferArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(iColumnArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        comparators.Composite composite0 = new comparators.Composite();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        int int15 = composite0.compareTo(composite10);
        int int16 = composite0.startOffset;
        byte[] byteArray20 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray21 = new byte[] {};
        int int22 = comparators.Composite.compare(byteArray20, byteArray21);
        java.util.List<java.lang.Object> objList23 = comparators.Composite.deserialize(byteArray21);
        byte[] byteArray24 = comparators.Composite.serialize(objList23);
        java.util.stream.Stream<java.lang.Object> objStream25 = objList23.parallelStream();
        comparators.Composite composite26 = new comparators.Composite(objList23);
        java.lang.Object[] objArray27 = composite26.toArray();
        int int28 = composite26.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream29 = composite26.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream30 = composite26.parallelStream();
        comparators.Composite composite32 = composite26.addBool(true);
        java.util.Iterator<java.lang.Object> objItor33 = composite26.iterator();
        comparators.Composite composite34 = new comparators.Composite();
        byte[] byteArray38 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray39 = new byte[] {};
        int int40 = comparators.Composite.compare(byteArray38, byteArray39);
        java.util.List<java.lang.Object> objList41 = comparators.Composite.deserialize(byteArray39);
        byte[] byteArray42 = comparators.Composite.serialize(objList41);
        java.util.stream.Stream<java.lang.Object> objStream43 = objList41.parallelStream();
        comparators.Composite composite44 = new comparators.Composite(objList41);
        java.lang.Object[] objArray45 = composite44.toArray();
        int int46 = composite44.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream47 = composite44.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream48 = composite44.parallelStream();
        int int49 = composite34.compareTo(composite44);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        java.util.List<java.lang.Object> objList56 = comparators.Composite.deserialize(byteArray54);
        byte[] byteArray57 = comparators.Composite.serialize(objList56);
        java.util.stream.Stream<java.lang.Object> objStream58 = objList56.parallelStream();
        comparators.Composite composite59 = new comparators.Composite(objList56);
        byte[] byteArray64 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray65 = new byte[] {};
        int int66 = comparators.Composite.compare(byteArray64, byteArray65);
        boolean boolean68 = comparators.Composite.validate((int) ' ', byteArray65, true);
        boolean boolean69 = composite59.contains((java.lang.Object) boolean68);
        java.util.stream.Stream<java.lang.Object> objStream70 = composite59.parallelStream();
        boolean boolean71 = composite34.contains((java.lang.Object) composite59);
        boolean boolean72 = composite26.addAll((java.util.Collection<java.lang.Object>) composite34);
        int int73 = composite34.startOffset;
        java.lang.String str74 = composite34.toString();
        int int75 = comparators.Composite.compare(composite0, composite34);
        java.lang.String str76 = composite34.toString();
        comparators.Composite composite78 = composite34.addUTF8("Placeholder(255)");
        boolean boolean79 = composite78.isEmpty();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(objList23);
        org.junit.Assert.assertNull(byteArray24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(objStream29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(composite32);
        org.junit.Assert.assertNotNull(objItor33);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(objList41);
        org.junit.Assert.assertNull(byteArray42);
        org.junit.Assert.assertNotNull(objStream43);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(objList56);
        org.junit.Assert.assertNull(byteArray57);
        org.junit.Assert.assertNotNull(objStream58);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objStream70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(composite78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        byte[] byteArray4 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray5 = new byte[] {};
        int int6 = comparators.Composite.compare(byteArray4, byteArray5);
        java.util.List<java.lang.Object> objList7 = comparators.Composite.deserialize(byteArray5);
        byte[] byteArray8 = comparators.Composite.serialize(objList7);
        java.util.stream.Stream<java.lang.Object> objStream9 = objList7.parallelStream();
        comparators.Composite composite10 = new comparators.Composite(objList7);
        java.lang.Object[] objArray11 = composite10.toArray();
        int int12 = composite10.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream13 = composite10.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream14 = composite10.parallelStream();
        comparators.Composite composite16 = composite10.addBool(true);
        java.io.DataOutputStream dataOutputStream17 = composite10.out;
        byte[] byteArray18 = compositeSerializer0.toBytes(composite10);
        byte[] byteArray22 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray23 = new byte[] {};
        int int24 = comparators.Composite.compare(byteArray22, byteArray23);
        java.util.List<java.lang.Object> objList25 = comparators.Composite.deserialize(byteArray23);
        byte[] byteArray26 = comparators.Composite.serialize(objList25);
        java.util.stream.Stream<java.lang.Object> objStream27 = objList25.parallelStream();
        comparators.Composite composite28 = new comparators.Composite(objList25);
        java.lang.Object[] objArray29 = composite28.toArray();
        int int30 = composite28.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream31 = composite28.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream32 = composite28.parallelStream();
        comparators.Composite composite34 = composite28.addBool(true);
        comparators.Composite composite36 = composite34.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream37 = composite34.byteStream;
        java.nio.ByteBuffer byteBuffer38 = compositeSerializer0.toByteBuffer(composite34);
        byte[] byteArray39 = composite34.serialize();
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList46.parallelStream();
        comparators.Composite composite49 = new comparators.Composite(objList46);
        java.lang.Object[] objArray50 = composite49.toArray();
        int int51 = composite49.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream52 = composite49.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream53 = composite49.parallelStream();
        int int54 = composite49.startOffset;
        int int55 = composite49.startOffset;
        byte[] byteArray59 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray60 = new byte[] {};
        int int61 = comparators.Composite.compare(byteArray59, byteArray60);
        java.util.List<java.lang.Object> objList62 = comparators.Composite.deserialize(byteArray60);
        byte[] byteArray63 = comparators.Composite.serialize(objList62);
        java.util.stream.Stream<java.lang.Object> objStream64 = objList62.parallelStream();
        comparators.Composite composite65 = new comparators.Composite(objList62);
        byte[] byteArray70 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray71 = new byte[] {};
        int int72 = comparators.Composite.compare(byteArray70, byteArray71);
        boolean boolean74 = comparators.Composite.validate((int) ' ', byteArray71, true);
        boolean boolean75 = composite65.contains((java.lang.Object) boolean74);
        java.util.Spliterator<java.lang.Object> objSpliterator76 = composite65.spliterator();
        boolean boolean77 = composite49.containsAll((java.util.Collection<java.lang.Object>) composite65);
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray78 = new comparators.hector.CompositeListSerializer[] {};
        comparators.hector.CompositeListSerializer[] compositeListSerializerArray79 = composite49.toArray(compositeListSerializerArray78);
        comparators.Composite composite80 = new comparators.Composite((java.lang.Object[]) compositeListSerializerArray79);
        byte[] byteArray81 = comparators.Composite.serialize((java.lang.Object[]) compositeListSerializerArray79);
        comparators.Composite composite82 = new comparators.Composite((java.lang.Object[]) compositeListSerializerArray79);
        // The following exception was thrown during execution in test generation
        try {
            me.prettyprint.cassandra.serializers.AbstractSerializer<java.util.List<java.lang.Object>>[] objListAbstractSerializerArray83 = composite34.toArray((me.prettyprint.cassandra.serializers.AbstractSerializer<java.util.List<java.lang.Object>>[]) compositeListSerializerArray79);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(objList7);
        org.junit.Assert.assertNull(byteArray8);
        org.junit.Assert.assertNotNull(objStream9);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(composite16);
        org.junit.Assert.assertNotNull(dataOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(objList25);
        org.junit.Assert.assertNull(byteArray26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(objStream31);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(composite34);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteArrayOutputStream37);
        org.junit.Assert.assertEquals(byteArrayOutputStream37.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[67, 77, 80, 1, 2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 6, 0]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(objList62);
        org.junit.Assert.assertNull(byteArray63);
        org.junit.Assert.assertNotNull(objStream64);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objSpliterator76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(compositeListSerializerArray78);
        org.junit.Assert.assertNotNull(compositeListSerializerArray79);
        org.junit.Assert.assertNull(byteArray81);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        java.util.stream.Stream<java.lang.Object> objStream20 = objList18.parallelStream();
        comparators.Composite composite21 = new comparators.Composite(objList18);
        java.lang.Object[] objArray22 = composite21.toArray();
        int int23 = composite21.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream24 = composite21.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream25 = composite21.parallelStream();
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray30);
        byte[] byteArray33 = comparators.Composite.serialize(objList32);
        java.util.stream.Stream<java.lang.Object> objStream34 = objList32.parallelStream();
        comparators.Composite composite35 = new comparators.Composite(objList32);
        java.lang.Object[] objArray36 = composite35.toArray();
        int int37 = composite35.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream38 = composite35.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream39 = composite35.parallelStream();
        int int40 = composite35.startOffset;
        int int41 = composite21.compareTo(composite35);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        comparators.Composite composite48 = composite21.addBytes(byteArray46);
        java.nio.ByteBuffer byteBuffer49 = composite48.serializeToByteBuffer();
        compositeType6.validate(byteBuffer49);
        comparators.Composite composite51 = new comparators.Composite(byteBuffer49);
        comparators.Composite composite52 = new comparators.Composite(byteBuffer49);
        boolean boolean54 = comparators.Composite.validate(byteBuffer49, true);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(composite48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        java.lang.Object[] objArray10 = composite9.toArray();
        int int11 = composite9.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream12 = composite9.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream13 = composite9.parallelStream();
        byte[] byteArray17 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray18 = new byte[] {};
        int int19 = comparators.Composite.compare(byteArray17, byteArray18);
        java.util.List<java.lang.Object> objList20 = comparators.Composite.deserialize(byteArray18);
        byte[] byteArray21 = comparators.Composite.serialize(objList20);
        java.util.stream.Stream<java.lang.Object> objStream22 = objList20.parallelStream();
        comparators.Composite composite23 = new comparators.Composite(objList20);
        java.lang.Object[] objArray24 = composite23.toArray();
        int int25 = composite23.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream26 = composite23.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream27 = composite23.parallelStream();
        int int28 = composite23.startOffset;
        int int29 = composite9.compareTo(composite23);
        byte[] byteArray33 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray34 = new byte[] {};
        int int35 = comparators.Composite.compare(byteArray33, byteArray34);
        comparators.Composite composite36 = composite9.addBytes(byteArray34);
        java.nio.ByteBuffer byteBuffer37 = composite36.serializeToByteBuffer();
        byte[] byteArray41 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray42 = new byte[] {};
        int int43 = comparators.Composite.compare(byteArray41, byteArray42);
        java.util.List<java.lang.Object> objList44 = comparators.Composite.deserialize(byteArray42);
        byte[] byteArray45 = comparators.Composite.serialize(objList44);
        java.util.stream.Stream<java.lang.Object> objStream46 = objList44.parallelStream();
        comparators.Composite composite47 = new comparators.Composite(objList44);
        java.util.RandomAccess[] randomAccessArray48 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray49 = composite47.toArray(randomAccessArray48);
        comparators.Composite composite51 = composite47.addLong((long) 67);
        byte[] byteArray52 = composite51.serialize();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean53 = composite36.removeAll((java.util.Collection<java.lang.Object>) composite51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(objStream12);
        org.junit.Assert.assertNotNull(objStream13);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(objList20);
        org.junit.Assert.assertNull(byteArray21);
        org.junit.Assert.assertNotNull(objStream22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(objStream26);
        org.junit.Assert.assertNotNull(objStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(composite36);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(objList44);
        org.junit.Assert.assertNull(byteArray45);
        org.junit.Assert.assertNotNull(objStream46);
        org.junit.Assert.assertNotNull(randomAccessArray48);
        org.junit.Assert.assertNotNull(randomAccessArray49);
        org.junit.Assert.assertNotNull(composite51);
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        comparators.hector.CompositeSerializer compositeSerializer0 = new comparators.hector.CompositeSerializer();
        comparators.hector.CompositeSerializer compositeSerializer1 = new comparators.hector.CompositeSerializer();
        byte[] byteArray5 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray6 = new byte[] {};
        int int7 = comparators.Composite.compare(byteArray5, byteArray6);
        java.util.List<java.lang.Object> objList8 = comparators.Composite.deserialize(byteArray6);
        byte[] byteArray9 = comparators.Composite.serialize(objList8);
        java.util.stream.Stream<java.lang.Object> objStream10 = objList8.parallelStream();
        comparators.Composite composite11 = new comparators.Composite(objList8);
        java.lang.Object[] objArray12 = composite11.toArray();
        int int13 = composite11.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream14 = composite11.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream15 = composite11.parallelStream();
        comparators.Composite composite17 = composite11.addBool(true);
        java.io.DataOutputStream dataOutputStream18 = composite11.out;
        byte[] byteArray19 = compositeSerializer1.toBytes(composite11);
        byte[] byteArray23 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray24 = new byte[] {};
        int int25 = comparators.Composite.compare(byteArray23, byteArray24);
        java.util.List<java.lang.Object> objList26 = comparators.Composite.deserialize(byteArray24);
        byte[] byteArray27 = comparators.Composite.serialize(objList26);
        java.util.stream.Stream<java.lang.Object> objStream28 = objList26.parallelStream();
        comparators.Composite composite29 = new comparators.Composite(objList26);
        java.lang.Object[] objArray30 = composite29.toArray();
        int int31 = composite29.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream32 = composite29.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream33 = composite29.parallelStream();
        comparators.Composite composite35 = composite29.addBool(true);
        comparators.Composite composite37 = composite35.addLong((long) 6);
        java.io.ByteArrayOutputStream byteArrayOutputStream38 = composite35.byteStream;
        java.nio.ByteBuffer byteBuffer39 = compositeSerializer1.toByteBuffer(composite35);
        byte[] byteArray43 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray44 = new byte[] {};
        int int45 = comparators.Composite.compare(byteArray43, byteArray44);
        java.util.List<java.lang.Object> objList46 = comparators.Composite.deserialize(byteArray44);
        byte[] byteArray47 = comparators.Composite.serialize(objList46);
        java.util.stream.Stream<java.lang.Object> objStream48 = objList46.parallelStream();
        comparators.Composite composite49 = new comparators.Composite(objList46);
        java.lang.Object[] objArray50 = composite49.toArray();
        int int51 = composite49.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream52 = composite49.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream53 = composite49.parallelStream();
        byte[] byteArray57 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray58 = new byte[] {};
        int int59 = comparators.Composite.compare(byteArray57, byteArray58);
        java.util.List<java.lang.Object> objList60 = comparators.Composite.deserialize(byteArray58);
        byte[] byteArray61 = comparators.Composite.serialize(objList60);
        java.util.stream.Stream<java.lang.Object> objStream62 = objList60.parallelStream();
        comparators.Composite composite63 = new comparators.Composite(objList60);
        java.lang.Object[] objArray64 = composite63.toArray();
        int int65 = composite63.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream66 = composite63.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream67 = composite63.parallelStream();
        int int68 = composite63.startOffset;
        int int69 = composite49.compareTo(composite63);
        byte[] byteArray73 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray74 = new byte[] {};
        int int75 = comparators.Composite.compare(byteArray73, byteArray74);
        java.util.List<java.lang.Object> objList76 = comparators.Composite.deserialize(byteArray74);
        byte[] byteArray77 = comparators.Composite.serialize(objList76);
        java.util.stream.Stream<java.lang.Object> objStream78 = objList76.parallelStream();
        comparators.Composite composite79 = new comparators.Composite(objList76);
        java.util.RandomAccess[] randomAccessArray80 = new java.util.RandomAccess[] {};
        java.util.RandomAccess[] randomAccessArray81 = composite79.toArray(randomAccessArray80);
        comparators.Composite composite83 = composite79.addLong((long) 67);
        byte[] byteArray84 = composite83.serialize();
        java.util.List<java.lang.Object> objList85 = comparators.Composite.deserialize(byteArray84);
        comparators.Composite composite86 = new comparators.Composite(byteArray84);
        boolean boolean87 = composite63.equals((java.lang.Object) byteArray84);
        comparators.Composite composite88 = compositeSerializer1.fromBytes(byteArray84);
        comparators.CompositeType compositeType89 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray90 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList91 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList91, byteBufferArray90);
        java.lang.String str93 = compositeType89.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList91);
        java.util.List<comparators.Composite> compositeList94 = compositeSerializer1.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList91);
        java.util.List<comparators.Composite> compositeList95 = compositeSerializer0.fromBytesList((java.util.List<java.nio.ByteBuffer>) byteBufferList91);
        int int97 = compositeSerializer0.computeInitialHashSize(67);
        java.util.List<comparators.Composite> compositeList98 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.nio.ByteBuffer> byteBufferList99 = compositeSerializer0.toBytesList(compositeList98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(objList8);
        org.junit.Assert.assertNull(byteArray9);
        org.junit.Assert.assertNotNull(objStream10);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(objStream14);
        org.junit.Assert.assertNotNull(objStream15);
        org.junit.Assert.assertNotNull(composite17);
        org.junit.Assert.assertNotNull(dataOutputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[67, 77, 80, 1, 2, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(objList26);
        org.junit.Assert.assertNull(byteArray27);
        org.junit.Assert.assertNotNull(objStream28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(objStream32);
        org.junit.Assert.assertNotNull(objStream33);
        org.junit.Assert.assertNotNull(composite35);
        org.junit.Assert.assertNotNull(composite37);
        org.junit.Assert.assertNotNull(byteArrayOutputStream38);
        org.junit.Assert.assertEquals(byteArrayOutputStream38.toString(), "CMP\001\002\001\003\000\000\000\000\000\000\000\006\000");
        org.junit.Assert.assertNotNull(byteBuffer39);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(objList46);
        org.junit.Assert.assertNull(byteArray47);
        org.junit.Assert.assertNotNull(objStream48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(objStream52);
        org.junit.Assert.assertNotNull(objStream53);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(objList60);
        org.junit.Assert.assertNull(byteArray61);
        org.junit.Assert.assertNotNull(objStream62);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(objStream66);
        org.junit.Assert.assertNotNull(objStream67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(objList76);
        org.junit.Assert.assertNull(byteArray77);
        org.junit.Assert.assertNotNull(objStream78);
        org.junit.Assert.assertNotNull(randomAccessArray80);
        org.junit.Assert.assertNotNull(randomAccessArray81);
        org.junit.Assert.assertNotNull(composite83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[67, 77, 80, 1, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0]");
        org.junit.Assert.assertNotNull(objList85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(composite88);
        org.junit.Assert.assertNotNull(compositeType89);
        org.junit.Assert.assertNotNull(byteBufferArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(compositeList94);
        org.junit.Assert.assertNotNull(compositeList95);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 90 + "'", int97 == 90);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        byte[] byteArray3 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray4 = new byte[] {};
        int int5 = comparators.Composite.compare(byteArray3, byteArray4);
        java.util.List<java.lang.Object> objList6 = comparators.Composite.deserialize(byteArray4);
        byte[] byteArray7 = comparators.Composite.serialize(objList6);
        java.util.stream.Stream<java.lang.Object> objStream8 = objList6.parallelStream();
        comparators.Composite composite9 = new comparators.Composite(objList6);
        byte[] byteArray14 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray15 = new byte[] {};
        int int16 = comparators.Composite.compare(byteArray14, byteArray15);
        boolean boolean18 = comparators.Composite.validate((int) ' ', byteArray15, true);
        boolean boolean19 = composite9.contains((java.lang.Object) boolean18);
        java.util.stream.Stream<java.lang.Object> objStream20 = composite9.parallelStream();
        boolean boolean21 = composite9.isEmpty();
        byte[] byteArray25 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray26 = new byte[] {};
        int int27 = comparators.Composite.compare(byteArray25, byteArray26);
        java.util.List<java.lang.Object> objList28 = comparators.Composite.deserialize(byteArray26);
        byte[] byteArray29 = comparators.Composite.serialize(objList28);
        java.util.stream.Stream<java.lang.Object> objStream30 = objList28.parallelStream();
        comparators.Composite composite31 = new comparators.Composite(objList28);
        java.lang.Object[] objArray32 = composite31.toArray();
        int int33 = composite31.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream34 = composite31.parallelStream();
        boolean boolean35 = composite9.containsAll((java.util.Collection<java.lang.Object>) composite31);
        java.lang.Object[] objArray36 = composite31.toArray();
        byte[] byteArray37 = comparators.Composite.serialize(objArray36);
        comparators.Composite composite38 = new comparators.Composite(objArray36);
        byte[] byteArray42 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray43 = new byte[] {};
        int int44 = comparators.Composite.compare(byteArray42, byteArray43);
        java.util.List<java.lang.Object> objList45 = comparators.Composite.deserialize(byteArray43);
        byte[] byteArray46 = comparators.Composite.serialize(objList45);
        java.util.stream.Stream<java.lang.Object> objStream47 = objList45.parallelStream();
        comparators.Composite composite48 = new comparators.Composite(objList45);
        byte[] byteArray53 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray54 = new byte[] {};
        int int55 = comparators.Composite.compare(byteArray53, byteArray54);
        boolean boolean57 = comparators.Composite.validate((int) ' ', byteArray54, true);
        boolean boolean58 = composite48.contains((java.lang.Object) boolean57);
        java.util.stream.Stream<java.lang.Object> objStream59 = composite48.parallelStream();
        composite48.startOffset = 8;
        comparators.Composite composite63 = composite48.addAscii("hi!");
        java.lang.String str64 = composite48.toString();
        byte[] byteArray65 = composite48.bytes;
        byte[] byteArray66 = composite48.serialize();
        int int67 = composite48.startOffset;
        int int68 = comparators.Composite.compare(composite38, composite48);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(objList6);
        org.junit.Assert.assertNull(byteArray7);
        org.junit.Assert.assertNotNull(objStream8);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(objList28);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertNotNull(objStream30);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNull(byteArray37);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(objList45);
        org.junit.Assert.assertNull(byteArray46);
        org.junit.Assert.assertNotNull(objStream47);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objStream59);
        org.junit.Assert.assertNotNull(composite63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[67, 77, 80, 1, 7, 0, 3, 104, 105, 33, 0]");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[67, 77, 80, 1, 7, 0, 3, 104, 105, 33, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 8 + "'", int67 == 8);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        comparators.CompositeType compositeType0 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray1 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList2 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2, byteBufferArray1);
        java.lang.String str4 = compositeType0.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList2);
        java.util.Comparator<org.apache.cassandra.io.sstable.IndexHelper.IndexInfo> indexInfoComparator5 = compositeType0.indexComparator;
        comparators.CompositeType compositeType6 = comparators.CompositeType.instance;
        java.nio.ByteBuffer[] byteBufferArray7 = new java.nio.ByteBuffer[] {};
        java.util.ArrayList<java.nio.ByteBuffer> byteBufferList8 = new java.util.ArrayList<java.nio.ByteBuffer>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8, byteBufferArray7);
        java.lang.String str10 = compositeType6.getString((java.util.Collection<java.nio.ByteBuffer>) byteBufferList8);
        java.util.Comparator<java.nio.ByteBuffer> byteBufferComparator11 = compositeType0.thenComparing((java.util.Comparator<java.nio.ByteBuffer>) compositeType6);
        byte[] byteArray15 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray16 = new byte[] {};
        int int17 = comparators.Composite.compare(byteArray15, byteArray16);
        java.util.List<java.lang.Object> objList18 = comparators.Composite.deserialize(byteArray16);
        byte[] byteArray19 = comparators.Composite.serialize(objList18);
        java.util.stream.Stream<java.lang.Object> objStream20 = objList18.parallelStream();
        comparators.Composite composite21 = new comparators.Composite(objList18);
        java.lang.Object[] objArray22 = composite21.toArray();
        int int23 = composite21.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream24 = composite21.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream25 = composite21.parallelStream();
        byte[] byteArray29 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray30 = new byte[] {};
        int int31 = comparators.Composite.compare(byteArray29, byteArray30);
        java.util.List<java.lang.Object> objList32 = comparators.Composite.deserialize(byteArray30);
        byte[] byteArray33 = comparators.Composite.serialize(objList32);
        java.util.stream.Stream<java.lang.Object> objStream34 = objList32.parallelStream();
        comparators.Composite composite35 = new comparators.Composite(objList32);
        java.lang.Object[] objArray36 = composite35.toArray();
        int int37 = composite35.startOffset;
        java.util.stream.Stream<java.lang.Object> objStream38 = composite35.parallelStream();
        java.util.stream.Stream<java.lang.Object> objStream39 = composite35.parallelStream();
        int int40 = composite35.startOffset;
        int int41 = composite21.compareTo(composite35);
        byte[] byteArray45 = new byte[] { (byte) 10, (byte) 10, (byte) -1 };
        byte[] byteArray46 = new byte[] {};
        int int47 = comparators.Composite.compare(byteArray45, byteArray46);
        comparators.Composite composite48 = composite21.addBytes(byteArray46);
        java.nio.ByteBuffer byteBuffer49 = composite48.serializeToByteBuffer();
        compositeType6.validate(byteBuffer49);
        boolean boolean52 = comparators.Composite.validate(byteBuffer49, true);
        boolean boolean53 = comparators.Composite.validate(byteBuffer49);
        org.junit.Assert.assertNotNull(compositeType0);
        org.junit.Assert.assertNotNull(byteBufferArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(indexInfoComparator5);
        org.junit.Assert.assertNotNull(compositeType6);
        org.junit.Assert.assertNotNull(byteBufferArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteBufferComparator11);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(objList18);
        org.junit.Assert.assertNull(byteArray19);
        org.junit.Assert.assertNotNull(objStream20);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(objStream24);
        org.junit.Assert.assertNotNull(objStream25);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(objList32);
        org.junit.Assert.assertNull(byteArray33);
        org.junit.Assert.assertNotNull(objStream34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(objStream38);
        org.junit.Assert.assertNotNull(objStream39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[10, 10, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(composite48);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }
}
